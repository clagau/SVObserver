//*****************************************************************************
/// \copyright (c) 2018,2018 by Seidenader Maschinenbau GmbH
/// \file SVRC-SVObserver.proto
/// All Rights Reserved 
//*****************************************************************************
/// Protobuf file for all SVRC commands handled by SVObserevr
//******************************************************************************

syntax = "proto3";
package SvPb;

import "Variant.proto";
import "SVRC-Enum.proto";

///This is the Data Definition structure returned for each item in the list
message DataDefinition
{
	string name = 1;				//Name of value or image object
	bool writable = 2;				//True if object is writable
	bool published = 3;				//True if object has been published 
	string type = 4;				//The object type (int, double etc..)
	repeated string additionalInfo = 5;	//List of additional information
}

///This is the Value structure used for each item when calling GetItems or SetItems
message Value
{
	string name = 1;				//The name of the value item
	sint32 status = 2;				//The status for this value item
	sint32 count = 3;				//Trigger count

	Variant item = 4;				//The value item as a variant
}

///This is the recursive structure for the object selector tree
message TreeItem
{
	string name = 1;				//The name of the leaf or branch
	bool selected = 2;				//The flag which defines if the object is selected
	bytes objectID = 3;				//The objects UUID
	repeated TreeItem Children = 4;	//The children of this node
}

//Retrieves the SVObserver version
message GetSVObserverVersionRequest 
{
}

//Sets the SVObserver device mode
message SetDeviceModeRequest
{
	DeviceModeType mode = 1;		//The SVObserver device mode to set to
}

//Gets the current SVObserver device mode
message GetDeviceModeRequest 
{
}

message GetDeviceModeResponse 
{
	DeviceModeType mode = 1;		//The current SVObserver device mode
}

///Gets the current SVObserver state
message GetStateRequest 
{
}

message GetStateResponse
{
	 uint32 state = 1;				//The current SVObserver state which is a combination of the below possible states
	//The state is a combination of the following bit flags
	// SVIM_CONFIG_LOADING =	0x0001; SVObserver is busy loading a configuration
	// SVIM_CONFIG_LOADED =		0x0002; SVObserver has loaded a configuration
	// SVIM_ONLINE_PENDING =	0x0004; SVObserver is busy going online
	// SVIM_ONLINE =			0x0008;	SVObserver is online
	// SVIM_RUNNING_TEST =		0x0010; SVObserver is running test mode
	// SVIM_RUNNING =			0x0020; SVObserver is running
	// SVIM_REGRESSION_TEST =	0x0040; SVObserver is running regression test mode
	// SVIM_SETUPMODE =			0x0080; SVObserver is in edit mode
	// SVIM_SAVING_CONFIG =		0x0100;	SVObserver is busy saving a configuration
	// SVIM_STOPPING =			0x0200;	SVObserver is busy stopping the configuration
	// SVIM_RAID_FAILURE =		0x0400; SVObserver has a raid failure
}

///Gets the currently loaded configuration from SVObserver and saves it in the file name (locally)
message GetConfigRequest
{
	string fileName = 1;			//The name of the file to save the configuration
}

message GetConfigResponse
{
	sint32 hResult = 1;				//The result of the request
	bytes fileData = 2;				//The file data retrieved as a byte array
}

///Transfers a configuration given a client file name to SVObserver and loads it as the current configuration
message PutConfigRequest
{
	string fileName = 1;			//The name of the configuration file
	bytes fileData = 2;				//The file data to send as a byte array
}

///Gets the current offline counter value
message GetOfflineCountRequest
{
}

message GetOfflineCountResponse
{
	uint32 count = 1;				//The number of times SVObserver has been set to offline
}

///Activates or deactivates the given monitor list name
message ActivateMonitorListRequest
{
	string listName = 1;			//The monitor list name
	bool activate = 2;				//True if the montor list should become active
}

///Sets the filter type for the given product name
message SetProductFilterRequest
{
	string listName = 1;			//The monitor list name
	ProductFilterEnum filter = 2;	//The filter setting
}

///Gets the filter type for the given product name
message GetProductFilterRequest
{
	string listName = 1;			//The monitor list name
}

message GetProductFilterResponse
{
	sint32 hResult = 1;				//The request result (0 = no error)
	ProductFilterEnum filter = 2;	//The filter setting
}

///Gets the item values for the given name list
message GetItemsRequest
{
	repeated string itemNameList = 1;	//The list of item names to retrieve
}

message GetItemsResponse
{
	sint32 hResult = 1;				//The total result of the request (0 = no error)
	repeated Value valueList = 2;	//The list of values retrieved
	repeated Value imageList = 3;	//The list of images retrieved
	repeated Value errorList = 4;	//The list of errors retrieved
}

///Sets the item for the given value and image name list
///If RunOnce is true then for all changed inspections a runonce is executed after changing all the values
message SetItemsRequest
{
	repeated Value valueList = 1;	//The list of values to set
	repeated Value imageList = 2;	//The list of images to set
	bool runOnce = 3;				//True if after setting the values and images a run once is executed
}

message SetItemsResponse
{
	sint32 hResult = 1;				//The total result of the request
	repeated Value errorList = 2;	//The list of errors retrieved
}

///Gets the given source file on the SVIM
message GetFileRequest
{
	string sourcePath = 1;			//The path to the file to retrieve from the SVIM
}

message GetFileResponse
{
	sint32 hResult = 1;				//The request result
	bytes fileData = 2;				//The file data as a byte array
}

///Transfers the given file to SVObserver and saves it to the given file path
message PutFileRequest
{
	string destinationPath = 1;		//The destination path of the file on the SVIM
	bytes fileData = 2;				//The file data as a byte array
	bool saveInConfig = 3;			//The file is marked to be saved in the configuration file
}

///Registers the given Monitor list into the currently loaded configuration in SVObserver
message RegisterMonitorListRequest
{
	string listName = 1;						//The monitor list name to register on the SVObserver
	string ppqName = 2;							//The PPQ name to register it to
	sint32 rejectDepth = 3;						//The amount of maximum rejects to support
	repeated string productItemList = 4;		//The list of product items
	repeated string rejectConditionList = 5;	//The list of conditional reject items
	repeated string failStatusList = 6;			//The list of fail status items
}

message RegisterMonitorListResponse
{
	sint32 hResult = 1;				//The request result (0 = no error)
	repeated Value errorList = 2;	//The list of errors for the request
}

//Retrieves the inspection names of the currently loaded configuration on the SVIM
message GetInspectionNamesRequest
{
}

///Sends a shutdown request to the SVIM with an optional parameter
message ShutdownRequest
{
	sint32 option = 1;				//Option 0=Shutdown SVObserver; 1=Shutdown SVObserver & Windows; 2=Shutdown SVObserver Restart Windows
}

///Gets the monitor list properties with the given name from SVObserver
message GetMonitorListPropertiesRequest
{
	string listName = 1;			//The monitor list name
}

message GetMonitorListPropertiesResponse
{
	sint32 hResult = 1;				//The request result (0 = no error)
	sint32 rejectDepth = 2;			//The reject depth value
	bool active = 3;				//True if the monitor list is active
	string ppqName = 4;				//The PPQ name of the moitor list
}

///Gets the maximum reject depth of the currently loaded configuration
message GetMaxRejectDepthRequest
{
}

message GetMaxRejectDepthResponse
{
	sint32 maxRejectDepth = 1;
}

message GetConfigReportRequest
{
}

///Gets the report of the currently loaded configuration
message GetConfigReportResponse
{
	sint32 hResult = 1;				//The request result (0 = no error)
	string report = 2;				//The complete configuration report as a string
}

///Gets the data definition list of the currently loaded configuration with the given inspection name
///The items returned depends on the Data Definition List type
message GetDataDefinitionListRequest
{
	string inspectionName = 1;			//The inspection name to query
	DataDefinitionListType type = 2;	//The type of data definitions to return
}

message GetDataDefinitionListResponse
{
	sint32 hResult = 1;					//The request result (0 = no error)
	repeated DataDefinition list = 2;	//The list of data definition values
}

///Queries the Monitor List with the given name and type
message QueryMonitorListRequest
{
	string listName = 1;			//The monitor list name
	ListType type = 2;				//The monitor list type
}

message QueryMonitorListNamesRequest
{
}

///Causes a runonce for the currently loaded configuration with the given inspection name to be executed
message RunOnceRequest
{
	string inspectionName = 1;		//The inspection name to execute a runonce
}

///Loads a configuration given a local file name into SVObserver as the current configuration
message LoadConfigRequest
{
	string fileName = 1;			//The configuration file name to load 
}

///Get the required objects to be displayed for selection
message GetObjectSelectorItemsRequest
{
	repeated ObjectSelectorType Types = 1;	//The list of item types required
	string inspectionID = 2;			//The inspection GUID to query for the items or the inspection name (changed from bytes to string until inspection ID available)
	bytes instanceID = 3;				//The object instance GUID to query if required can be GUID_NULL
	ObjectAttributes Filter = 4;		//The object attribute to filter with
	bool wholeArray = 5;				//True to display whole array values (All values in the Array eg. Blob Analyzer.Box X Max[]) 
}

message GetObjectSelectorItemsResponse
{
	TreeItem Tree = 1;					//The object selector tree as recursive structure
}

message SaveClientChunkError
{
	uint32 requestRevision = 1;
	uint32 currentRevision = 2;
}

// For now, a client will specify the according user by himself. In the future
// we must extract the user from the current http session. Because right now,
// any user can overwrite the chunk of any other user.
message SaveClientChunkRequest
{
	uint32 revision = 1;
	string user = 2;
	string chunk = 3; // will be json
}

// Ack with new revision.
message SaveClientChunkResponse
{
	uint32 revision = 1;
}

// Load latest chunk of given user.
message LoadClientChunkRequest
{
	uint32 revision = 1; // optional. will return latest if not provided
	string user = 2;
}

// Same json chunk as stored last time.
// Will provide the revision that must be specified when save the chunk again.
message LoadClientChunkResponse
{
	uint32 revision = 1;
	string chunk = 2;
}

enum LogSeverity
{
	fatal = 0;
	error = 1;
	warning = 2;
	info = 3;
	debug = 4;
	trace = 5;
}

message LogEntry
{
	LogSeverity severity = 1;
	string message = 2;
}

message StoreClientLogsRequest
{
	string client = 1;
	repeated LogEntry logs = 2;
}

///Standard responce for requests that only return names
message NamesResponse
{
	sint32 hResult = 1;				//The request result (0 = no error)
	Value names = 2;				//The result names of the request
}

///Standard responce for requests that only return an hResult
message StandardResponse
{
	sint32 hResult = 1;				//The request result (0 = no error)
}

