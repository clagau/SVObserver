//*****************************************************************************
/// \copyright (c) 2019,2019 by Seidenader Maschinenbau GmbH
/// \file Overlay.proto
/// All Rights Reserved
//*****************************************************************************
/// Protobuf containing messages describing image overlays.
//******************************************************************************

syntax = "proto3";
package SvPb;

message ValueObject
{
	double value = 1;
	bytes guid = 2;
	int32 trPos = 3;	//The position in triggerRecord, but one-based (that mean trPos-1 is the pos in TR) because 0 = default and means not set.
}

message OverlayDesc
{
	repeated Overlay overlays = 1;
}

message Overlay
{
	// Name of the overlay that is also displayed.
	string name = 1;

	bytes guid = 2;

	// Hex color as abgr (a = alpha will not used yet)
	ValueObject color = 3;

	// Bounding box of the overlay that introduces a local
	// coordinate system for the shapes, positioning them relative
	// on the image.
	OverlayBoundingShape boundingShape = 4;

	bool displayBounding = 5;

	repeated OverlayShapeGroup shapeGroups = 6;
}

message OverlayBoundingShape
{
	oneof shape
	{
		OverlayShapeRect rect = 1;
	}
}

message OverlayShapeGroup
{
	string name = 1;
	repeated OverlayShape shapes = 2;
}

// Message encapsulating the actual shape in an oneof.
// All Coordinates are represented as relative positions on
// the image, not as pixels. For example, if the image has
// a width of 500px and here you use a w of 0.5, the width
// of the overlay will be 250px.
message OverlayShape
{
	// Hex color as abgr, for overwriting the default color
	// specified in the Overlay message
	ValueObject color = 1;

	oneof shape
	{
		OverlayShapeLine line = 2;
		OverlayShapeRect rect = 3;
		OverlayShapeArrow arrow = 4;
		OverlayShapeRectArray rectArray = 5;
	}
}

// Line shape with relative x/y for start and end of the line.
message OverlayShapeLine
{
	ValueObject x1 = 1;
	ValueObject y1 = 2;
	ValueObject x2 = 3;
	ValueObject y2 = 4;
}

// Rectangular shape with lower-left anchor represented by x/y
// and width and height (w/h).
message OverlayShapeRect
{
	ValueObject x = 1;
	ValueObject y = 2;
	ValueObject w = 3;
	ValueObject h = 4;
	ValueObject angle = 5;
}

// Like shape line with an additional arrow placed at second point.
message OverlayShapeArrow
{
	ValueObject x1 = 1;
	ValueObject y1 = 2;
	ValueObject x2 = 3;
	ValueObject y2 = 4;
}

message RectData
{
	double x = 1;
	double y = 2;
	double w = 3;
	double h = 4;
}

//This message is for rectArray data from SVObserver for x1/y1 x2/y2 without rotation (needed e.g. for blob boxes)
message SVORectArray12Data
{
	//The position in triggerRecord, but one-based (that mean trPos-1 is the pos in TR) because 0 = default and means not set.
	int32 x1TrPos = 1;
	int32 y1TrPos = 2;
	int32 x2TrPos = 3;
	int32 y2TrPos = 4;
}

//This message is for rectArray data from SVObserver for pattern x/y and angle is for all rects variable. Width and Height is the same for all.
message SVORectArrayPatternData
{
	//The position in triggerRecord, but one-based (that mean trPos-1 is the pos in TR) because 0 = default and means not set.
	int32 xTrPos = 1; //array value
	int32 yTrPos = 2; //array value
	int32 angleTrPos = 3; //array value
	int32 width = 4; //only single value
	int32 height = 5; //only single value
	int32 centerX = 6; //only single value
	int32 centerY = 7; //only single value
}

// An Array of rectangular shape.
message OverlayShapeRectArray
{
	repeated RectData rectArray = 1;

	oneof SVOData
	{
		SVORectArray12Data x12Data = 2;
		SVORectArrayPatternData patternData = 3;
	}
}