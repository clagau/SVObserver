//*****************************************************************************
/// \copyright (c) 2018,2018 by Seidenader Maschinenbau GmbH
/// \file InspectionCommands.proto
/// All Rights Reserved 
//*****************************************************************************
/// Protobuf file for all inspection commands handled by SVObserver
//******************************************************************************

syntax = "proto3";
package SvPb;

import "Variant.proto";
import "BasicStructure.proto";
import "SVO-Enum.proto";
import "GetObjectSelector.proto";
import "Overlay.proto";
import "PatternUtils.proto";
//***************************************************************************
// Help Structs
//***************************************************************************
message InputNameObjectNameIdPair
{
	uint32 objectId = 1; //ID of the object.
	bytes objectName = 2; //name of the object.
	bytes inputName = 3; //input name.
}

message ObjectNameIdPair
{
	uint32 objectId = 1; //ID of the object.
	bytes objectName = 2; //name of the object.
}

message NameClassIdPair
{
	ClassIdEnum classId = 1; //classId of the object.
	bytes objectName = 2; //name of the object.
}

message SVObjectTypeInfoStruct
{
	SVObjectTypeEnum objectType = 1;	// Main Type
	SVObjectSubTypeEnum subType = 2;	// Sub Type  
	EmbeddedIdEnum embeddedID = 3;
}

//info for one taskobject 
message TaskObjectInfo
{
	string displayname =1;
	uint32  taskObjectId = 2;  //ID of the object
	SVObjectTypeEnum objecttype = 3; 
	SVObjectSubTypeEnum objectsubtype = 4;
	bool isvalid = 5; 
}

message NameValuePair
{
	bytes name = 1;
	int32 value = 2;
} 

message ValueObjectValues
{
	uint32 objectId = 1;
	EmbeddedIdEnum embeddedId = 2;
	Variant value = 3;
	Variant defaultValue = 4;
}

message SetValueObjectValues
{
	ValueObjectValues values = 1;
	bool isModified = 2;
	bool isDefaultModified = 3;
	int32 arrayIndex = 4;
}

message ExtentParameter
{
	SVExtentPropertyEnum type = 1;
	bytes name = 2;
	double value = 3;
	bool isSetByReset = 4;
	bool FilteredOutFlag = 5;
}

message IsBeforeToolMethod
{ 
	uint32 toolId = 1;
}

message DefaultPlusHidden
{
}

message UpdateFromOutpuSpace
{
	SVExtentLocationPropertyEnum action = 1;
	int32 dx = 2;
	int32 dy = 3;
}

message SetExtentProperty
{
	SVExtentPropertyEnum propertyFlag = 1;
	double value = 2;
}

message SetExtentList
{
	repeated ExtentParameter extentList = 1;
}

//***************************************************************************
// InspectionCommands - can be send with method InspectionCommands
//***************************************************************************
// This message do a runOnce for an inspection or taskObject
message InspectionRunOnceRequest
{
	uint32 inspectionID = 1; //ID of the inspection.
}

// This is the message to delete an object.
message DeleteObjectRequest
{
	uint32 objectID = 1; //ID of the object which should be deleted.

	enum FlagEnum
	{
		Flag_None = 0;
		Flag_SetDefaultInputs = 1;
		Flag_ResetInspection = 2;
		Flag_SetDefaultInputs_And_ResetInspection = 3;
	}

	FlagEnum flag = 2; //Define if after destroying object the default inputs are set and/or inspection are reset.
}

// This is the message to get the last (Error)MessageList from an taskObject
message GetMessageListRequest
{
	uint32 objectId = 1; //ID of the task-object.
}

// This is the message to reset an object
message ResetObjectRequest
{
	uint32 objectId = 1; //ID of the task-object.
}

//This is the message to create a model for the pattern-analyzer. The model will copy from the current source image of the analyzer.
message CreateModelRequest
{
	uint32 patternAnalyzerID = 1; //ID of the pattern-analyzer
	sint32 posX = 2; //x-Pos in the source image.
	sint32 posY = 3; //y-Pos in the source image.
	sint32 modelWidth = 4; //wanted model width.
	sint32 modelHeight = 5; //wanted model height.
	string FileName = 6; //filename where the model should be saved.
}

message GetObjectParametersRequest
{
	uint32 objectId = 1; //ID of the object.
}

message GetObjectParametersResponse
{
	bool isValid = 1; //flag if valid, will only set for TaskObject (not for ValueObject)
	bytes name = 2;
	uint32 allowedAttributes = 3;
	SVObjectTypeInfoStruct typeInfo = 4;
}

// This is the message to return the equation string
message GetEquationRequest
{
	uint32 objectId = 1; //ID of the equation-object.
}

// This is the message response-message from GetEquationRequest
message GetEquationResponse
{
	string equationText = 1; //string of the equation
}

//This message validate and if required set an equation
message ValidateAndSetEquationRequest
{
	uint32 objectId = 1; //ID of the equation-object.
	string equationText = 2; //string of the equation.
	bool bSetValue = 3; //flag if value should be set.
}

// This is the message response-message from ValidateAndSetEquationRequest
message ValidateAndSetEquationResponse
{
	sint32 validateStatus = 1; //return validateSuccessful if text is valid, else it return the position of the first error in the text.
	double result = 2; //if validateStatus is validateSuccessful, this variable contain the result of the equation.
	MessageContainerVector Messages = 3; //list of error messages
}

// This is the message to get a list of object which should be added to the monitorlist.
message GetObjectsForMonitorListRequest
{
	uint32 objectId = 1; //ID of the tool.
}

// This is the message response-message from GetObjectsForMonitorListRequest
message GetObjectsForMonitorListResponse
{
	repeated ObjectNameIdPair list = 1;
	MessageContainerVector Messages = 2; //list of messages
}

// This message moved an object in a taskObject- or friend-list to another position.
message MoveObjectRequest
{
	enum ListEnum
	{
		TaskObjectList = 0;
		FriendList = 1;
	}

	uint32 parentId = 1; //ID of the parent object, which contain the list (for taskObjectList it must be a ITaskObjectList-Object)
	uint32 objectId = 2; //ID of the object, which should be moved (must be a taskObject)
	uint32 movePreId = 3; //ID of the object, before which the other object should be moved. If it is SvDef::InvalidObjectId, the object will be moved to the end.
	ListEnum listMode = 4;
}

// Request TaskObjectInfo for all taskobject in the taskobjectlist
message TaskObjectListRequest
{
	uint32 taskObjectId = 1;  //ID of the object
}

message TaskObjectListResponse
{
	repeated TaskObjectInfo taskobjectinfos = 1; 
}

//get an image(if imageId is set, return this, else try to get image with name and parent)
message GetImageRequest
{
	uint32 imageId = 1;  //ID of the image
	bytes imageName = 2; //Name of the image at parent object
	uint32 parentId = 3; //ID of the parent
} 

message GetImageResponse
{
	Image imageData = 1;
	MessageContainerVector Messages = 2; //list of error messages
}

//get an image(if imageId is set, return this, else try to get image with name and parent)
message AreAuxiliaryExtentsAvailableRequest
{
	uint32 objectId = 1;  //ID of the tool
} 

message AreAuxiliaryExtentsAvailableResponse
{
	bool areAvailable = 1;
}

message GetAvailableAuxImagesRequest
{
	uint32 objectId = 1;  //ID of the tool
}

message GetAvailableAuxImagesResponse
{
	repeated ObjectNameIdPair list = 1;
}

message GetAuxImageObjectRequest
{
	uint32 objectId = 1;  //ID of the tool
}

message GetAuxImageObjectResponse
{
	ObjectNameIdPair auxObject = 1;
}

message SetAuxImageObjectRequest
{
	uint32 objectId = 1;  //ID of the tool
	uint32 sourceImageId = 2;  //ID of the source image
}

message GetInputsRequest
{
	uint32 objectId = 1;  //ID of the tool
	SVObjectTypeInfoStruct typeInfo = 2;
	SVObjectTypeEnum objectTypeToInclude = 3; //define until which type the name should displayed (not used for image objects, it has the own name conventions)
	bool shouldExcludeFirstObjectName = 4; //Is true it remove first object name. (If objectTypeToInclude == SVNotsetObjectType this parameter will not used) e.g. SVToolSetObjectType means "Window Tool....". (not used for image objects, it has the own name conventions)
	int32 maxRequested = 5; //only used for image object, it define after how many founded entry it stops. 0 means all.
}

message GetInputsResponse
{
	repeated InputNameObjectNameIdPair list = 1;
}

message ConnectToObjectRequest
{
	uint32 objectId = 1;
	bytes inputName = 2;
	uint32 newConnectedId = 3;
	SVObjectTypeEnum objectType = 4;
}

message SaveImageRequest
{
	uint32 objectId = 1;
	bytes imageName = 2;
}

message SetObjectNameRequest
{
	uint32 objectId = 1;
	bytes objectName = 2;
}

message GetAvailableObjectsRequest
{
	uint32 objectId = 1;
	SVObjectTypeInfoStruct typeInfo = 2;
	SVObjectTypeEnum objectTypeToInclude = 3; //default = SVNotSetObjectType
	bool shouldExcludeFirstObjectName = 4;

	oneof allowedMode  //default is check of valid object and not hidden. In this case do not set a oneof-message.
	{
		IsBeforeToolMethod isBeforeToolMethod=5; //same then default, but stop searching if required tool reached.
		DefaultPlusHidden defaultPlusHidden=6;
	}	
}

message GetAvailableObjectsResponse
{
	repeated ObjectNameIdPair list = 1;
	MessageContainerVector Messages = 2; //list of messages
}

message GetSpecialImageListRequest
{
	uint32 taskObjectId = 1;
}

message GetSpecialImageListResponse
{
	repeated bytes specialImageNames = 1;
}

message ExportMaskRequest
{
	uint32 objectId = 1;
	bytes fileName = 2;
}

message ImportMaskRequest
{
	uint32 objectId = 1;
	bytes fileName = 2;
}

message GetObjectIdRequest
{
	message InfoStruct
	{
		uint32 ownerId = 1;
		SVObjectTypeInfoStruct infoStruct = 2;
	}

	oneof message
	{
		string name = 1;
		InfoStruct info = 2;
	}
}

message GetObjectIdResponse
{
	uint32 objectId = 1;
}

message CreateObjectRequest
{
	message FriendTask
	{
		bytes name = 1; //the name of the new object
		uint32 preId = 2; //Add new object before the object with this ID. If object not found (e.g. SvDef::InvalidObjectId), it will be added at the end.
	}

	uint32 ownerId = 1;
	ClassIdEnum classId = 2;

	oneof message
	{
		FriendTask friend = 3;	//Add the new object to the friend list.
		uint32 taskObjectInsertBeforeId = 4; //Add the new object to the taskObject-list before the object with this ID. if SvDef::InvalidObjectId, add at the end.
	}
}

message CreateObjectResponse
{
	uint32 objectId = 1;
	bytes name = 2;
}

message GetCreatableObjectsRequest
{
	uint32 objectId = 1;
	SVObjectTypeInfoStruct typeInfo = 2;
}

message GetCreatableObjectsResponse
{
	repeated NameClassIdPair list = 1;
}

//Return if the inspection should be reset. By now it is only used for the filter, because some filters must be reset the whole inspection after changes.
message ShouldInspectionResetRequest
{
	uint32 objectId = 1;
}

message ShouldInspectionResetResponse
{
	bool shouldReset = 1;
}

//Get the ppq-name of the inspection
message GetPPQNameRequest
{
	uint32 inspectionId = 1;
}

message GetPPQNameResponse
{
	bytes ppqName = 1;
}

//Request the Enumerations(name/value) from a SVEnumerateValueObject
message GetValueObjectEnumsRequest
{
	uint32 objectId = 1;
}

message GetValueObjectEnumsResponse
{
	repeated NameValuePair list = 1;
}

message GetEmbeddedValuesRequest
{
	uint32 objectId = 1;
}

message GetEmbeddedValuesResponse
{
	repeated ValueObjectValues list = 1;
}

message SetEmbeddedValuesRequest
{
	uint32 objectId = 1;
	repeated SetValueObjectValues list = 2;
}

message GetOutputRectangleRequest
{
	uint32 imageId = 1;
}

message GetOutputRectangleResponse
{
	int32 left = 1;
	int32 top = 2;
	int32 right = 3;
	int32 bottom = 4;
}

message GetToolSizeAdjustParameterRequest
{
	uint32 objectId = 1;
}

message GetToolSizeAdjustParameterResponse
{
	bool isFullSizeAllowed = 1;
	bool isAdjustSizeAllowed = 2;
	bool isAdjustPositionAllowed = 3;
	EAutoSize enableAutoSize = 4;
	bool canResizeToParent = 5;
}

message GetExtentParameterRequest
{
	uint32 objectId = 1; //id of the tool
	bool shouldFromParent = 2; 
}

message GetExtentParameterResponse
{
	repeated ExtentParameter parameters = 1;
	SVExtentTranslationEnum translationType = 2;
}

message SetExtentParameterRequest
{
	uint32 objectId = 1; //id of the tool
	oneof message
	{
		UpdateFromOutpuSpace updateFromOutputSpace = 2;
		SetExtentProperty setProperty = 3;
		SetExtentList extentList = 4;
		bool setToParent = 5;
	}
}

message SetExtentParameterResponse
{
	repeated ExtentParameter parameters = 1;
	SVExtentTranslationEnum translationType = 2;
}

message IsAllowedLocationRequest
{
	uint32 objectId = 1; //id of the tool
	SVExtentLocationPropertyEnum location = 2;
	SVExtentDirectionsEnum direction = 3;
}

message IsAllowedLocationResponse
{
	bool IsAllowed = 1;
}

message PropagateSizeAndPositionRequest
{
	uint32 objectId = 1; //id of the inspection
}

message UsePropagateSizeAndPositionRequest
{
	uint32 objectId = 1; //id of the inspection
}

message UsePropagateSizeAndPositionResponse
{
	bool isUsed = 1;
}

message GetOverlayStructRequest
{
	uint32 imageId = 1; //id of the image
}

message GetOverlayStructResponse
{
	OverlayDesc overlays = 1;
}
message SetDefaultInputsRequest
{
	uint32 objectId = 1; //ID of the inspection object.
}

message BarCodeTypeParameter
{
	int32 type = 1;
	bytes name = 2;
	repeated int32 PossibleECCTypes = 3;
	int32 DefaultEccType = 4;
	repeated int32 PossibleENCTypes = 5;
	int32 DefaultEncType = 6;
}
message GetNormalizerValuesRequest
{
	uint32 linearAnalyzerId = 1; //ID of the analyzer object (SVLinearAnalyzerClass)
}
message GetNormalizerValuesResponse
{
	double normalRangeMax = 1;
	double normalRangeMin = 2;
	double normalRangeStepWidth = 3;
	double normalRangeBaseSize = 4;
	double realRangeMax = 5;
	double realRangeMin = 6;
	double realRangeStepWidth = 7;
	double realRangeBaseSize = 8;	
}
message SetNormalizerRangesRequest
{
	uint32 linearAnalyzerId = 1; //ID of the analyzer object (SVLinearAnalyzerClass)
	double normalMax = 2;
	double normalMin = 3;
	double normalStepWidth = 4;
	double realMax = 5;
	double realMin = 6;
	double realStepWidth = 7;
}

message GetBarCodeTypeInfosRequest
{
}

message GetBarCodeTypeInfosResponse
{
	repeated NameValuePair ECCNames = 1;
	repeated NameValuePair ENCNames = 2;
	repeated BarCodeTypeParameter typeParameters = 3;
}

//Request Information from an ISVImage based on image id
message GetImageInfoRequest
{
	uint32 imageId = 1; //id of the image
}
//Contains Information from an ISVImage 
//Currently, only SVImageType, other info can be added here!
message GetImageInfoResponse
{
	SVImageTypeEnum imageType = 1; 
}

//request information from a IBlobAnalyzer object
message GetBlobAnalyzerInfoRequest
{
	uint32 taskObjectId = 1;
	uint32 feature = 2;
	bool featureEnabled = 3;
}

//Contains information from an IBlobAnalyzer
message GetBlobAnalyzerInfoResponse
{
	uint32 resultObjectId = 1;
	ClassIdEnum resultObjectClassId = 2;
	uint32 resultBlobId = 3;
	ClassIdEnum resultBlobClassId = 4;
	repeated NameValuePair list = 5;
}


message InspectionCmdRequest
{
	uint32 inspectionID = 1;			//The inspection ID to perform the command on

	oneof message
	{
		InspectionRunOnceRequest inspectionRunOnceRequest = 2;
		DeleteObjectRequest deleteObjectRequest = 3;
		GetMessageListRequest  getMessageListRequest = 4;
		ResetObjectRequest  resetObjectRequest = 5;
		CreateModelRequest  createModelRequest = 6;
		GetObjectParametersRequest getObjectParametersRequest = 7;
		GetEquationRequest getEquationRequest = 8;
		ValidateAndSetEquationRequest  validateAndSetEquationRequest = 9;
		GetObjectsForMonitorListRequest getObjectsForMonitorListRequest = 10;
		MoveObjectRequest moveObjectRequest = 11;
		TaskObjectListRequest taskObjectListRequest = 12;
		GetImageRequest getImageRequest = 13;
		AreAuxiliaryExtentsAvailableRequest areAuxiliaryExtentsAvailableRequest = 14;
		GetAvailableAuxImagesRequest getAvailableAuxImagesRequest = 15;
		GetAuxImageObjectRequest getAuxImageObjectRequest = 16;
		SetAuxImageObjectRequest setAuxImageObjectRequest = 17;
		GetInputsRequest getInputsRequest = 18;
		ConnectToObjectRequest connectToObjectRequest = 19;
		SaveImageRequest saveImageRequest = 20;
		SetObjectNameRequest setObjectNameRequest = 21;
		GetAvailableObjectsRequest getAvailableObjectsRequest = 22;
		GetSpecialImageListRequest getSpecialImageListRequest = 23;
		ExportMaskRequest exportMaskRequest = 24;
		ImportMaskRequest importMaskRequest = 25;
		GetObjectIdRequest getObjectIdRequest = 26;
		CreateObjectRequest createObjectRequest = 27;
		GetCreatableObjectsRequest getCreatableObjectsRequest = 28;
		ShouldInspectionResetRequest shouldInspectionResetRequest = 29;
		GetPPQNameRequest getPPQNameRequest = 30;
		GetValueObjectEnumsRequest getValueObjectEnumsRequest = 31;
		GetEmbeddedValuesRequest getEmbeddedValuesRequest = 32;
		SetEmbeddedValuesRequest setEmbeddedValuesRequest = 33;
		GetOutputRectangleRequest getOutputRectangleRequest = 34;
		GetObjectSelectorItemsRequest getObjectSelectorItemsRequest = 35;
		GetToolSizeAdjustParameterRequest getToolSizeAdjustParameterRequest = 36;
		GetExtentParameterRequest getExtentParameterRequest = 37;
		SetExtentParameterRequest setExtentParameterRequest = 38;
		IsAllowedLocationRequest isAllowedLocationRequest = 39;
		PropagateSizeAndPositionRequest propagateSizeAndPositionRequest = 40;
		UsePropagateSizeAndPositionRequest usePropagateSizeAndPositionRequest = 41;
		GetOverlayStructRequest getOverlayStructRequest = 42;
		SetDefaultInputsRequest  setDefaultInputsRequest = 43;
		GetBarCodeTypeInfosRequest getBarCodeTypeInfosRequest = 44;
		GetNormalizerValuesRequest getNormalizerValuesRequest = 45;
		SetNormalizerRangesRequest setNormalizerRangesRequest = 46;
		GetImageInfoRequest getImageInfoRequest = 47;
		GetBlobAnalyzerInfoRequest getBlobAnalyzerInfoRequest = 48;
		ComputeOverscanRectRequest computeOverscanRectRequest = 49;
	}
}

message InspectionCmdResponse
{
	sfixed32 hResult = 1;				//The request result (0 = no error)
		
	oneof message
	{
		StandardResponse standardResponse = 2;
		GetObjectParametersResponse getObjectParametersResponse = 3;
		GetEquationResponse  getEquationResponse = 4;
		ValidateAndSetEquationResponse  validateAndSetEquationResponse = 5;
		GetObjectsForMonitorListResponse getObjectsForMonitorListResponse = 6;
		TaskObjectListResponse taskObjectListResponse = 7;
		GetImageResponse getImageResponse = 8;
		AreAuxiliaryExtentsAvailableResponse areAuxiliaryExtentsAvailableResponse = 9;
		GetAvailableAuxImagesResponse getAvailableAuxImagesResponse = 10;
		GetAuxImageObjectResponse getAuxImageObjectResponse = 11;
		GetInputsResponse getInputsResponse = 12;
		GetAvailableObjectsResponse getAvailableObjectsResponse = 13;
		GetSpecialImageListResponse getSpecialImageListResponse = 14;
		GetObjectIdResponse getObjectIdResponse = 15;
		CreateObjectResponse createObjectResponse = 16;
		GetCreatableObjectsResponse getCreatableObjectsResponse = 17;
		ShouldInspectionResetResponse shouldInspectionResetResponse = 18;
		GetPPQNameResponse getPPQNameResponse = 19;
		GetValueObjectEnumsResponse getValueObjectEnumsResponse = 20;
		GetEmbeddedValuesResponse getEmbeddedValuesResponse = 21;
		GetOutputRectangleResponse getOutputRectangleResponse = 22;
		GetObjectSelectorItemsResponse getObjectSelectorItemsResponse = 23;
		GetToolSizeAdjustParameterResponse getToolSizeAdjustParameterResponse = 24;
		GetExtentParameterResponse getExtentParameterResponse = 25;
		SetExtentParameterResponse setExtentParameterResponse = 26;
		IsAllowedLocationResponse isAllowedLocationResponse = 27;
		UsePropagateSizeAndPositionResponse usePropagateSizeAndPositionResponse = 28;
		GetOverlayStructResponse getOverlayStructResponse = 29;
		GetBarCodeTypeInfosResponse getBarCodeTypeInfosResponse = 30;
		GetNormalizerValuesResponse getNormalizerValuesResponse = 31;
		GetImageInfoResponse getImageInfoResponse = 32;
		GetBlobAnalyzerInfoResponse getBlobAnalyzerInfoResponse = 33;
		ComputeOverscanRectResponse computeOverscanRectResponse = 34;
	}
}
