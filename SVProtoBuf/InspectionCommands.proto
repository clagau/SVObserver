syntax = "proto2";
package SvPB;


//************************************************
// intern structures (used in InspectionCommands)
//************************************************
message UUID //Guid-structure
{
  optional uint64 part1 = 1 [default = 0];
  optional uint64 part2 = 2 [default = 0];
}

message MessageContainer //structure for a (error/warning/info-)message 
{
	optional int32 MessageCode = 1;
	optional int32 AdditionalTextId = 2;
	repeated string AdditionalTextList = 3;
	optional string CompileDate = 4;
	optional string CompileTime = 5;
	optional string FileName = 6;
	optional int32 FileLine = 7;
	optional string FileDateTime = 8;
	optional UUID ObjectId = 9;
}

message MessageContainerVector
{
	repeated MessageContainer Messages = 1;  //list of messages
}

//***************************************************************************
// InspectionCommands - can be send with method InspectionCommandsSynchronous
//***************************************************************************
// This message do a runOnce for an inspection or taskObject
message InspectionRunOnceRequest 
{
	optional UUID inspectionID = 1; //GUID of the inspection.
	optional UUID taskID = 2; //GUID of the taskObject on which the runOnce should be done. If this field empty the whole inspection will run.
}

// This is the message for Destroy child object.
message DestroyChildRequest
{
	optional UUID taskObjectListID = 1;  //GUID of the task-object-list-object.
	optional UUID objectID = 2; //GUID of the object which should be destroyed.

	enum FlagEnum
	{
		Flag_None = 0;
		Flag_SetDefaultInputs = 1;
		Flag_ResetInspection = 2;
		Flag_SetDefaultInputs_And_ResetInspection = 3;
	}

	optional FlagEnum flag = 3 [default = Flag_None]; //Define if after destroying object the default inputs are set and/or inspection are reset.
}


// This is the message to get the last (Error)MessageList from an taskObject
message GetMessageListRequest
{
	optional UUID objectId = 1;  //GUID of the task-object.
}

// This is the message response-message from GetMessageListRequest
message GetMessageListResponse
{
	optional MessageContainerVector Messages = 1;  //list of messages
}


// This is the message to reset an object
message ResetObjectRequest
{
	optional UUID objectId = 1;  //GUID of the task-object.
}

// This is the message response-message from ResetObjectRequest
message ResetObjectResponse
{
	optional MessageContainerVector Messages = 1;  //list of messages
}


//This is the message to create a model for the pattern-analyzer. The model will copy from the current source image of the analyzer.
message CreateModelRequest
{
	optional UUID patternAnalyzerID = 1; //GUID of the pattern-analyzer
	optional int32 posX = 2; //x-Pos in the source image.
	optional int32 posY = 3; //y-Pos in the source image.
	optional int32 modelWidth = 4; //wanted model width.
	optional int32 modelHeight = 5; //wanted model height.
	optional string FileName = 6; //filename where the model should be saved.
}

// This is the message response-message from CreateModelRequest
message CreateModelResponse
{
	optional MessageContainerVector Messages = 1;  //list of messages
}

// This is the message to return the state if an object is valid
message IsValidRequest
{
	optional UUID objectId = 1;  //GUID of the object.
}

// This is the message response-message from IsValidRequest
message IsValidResponse
{
	optional bool IsValid = 1;  //flag if valid
}


// This is the message to return the equation string
message GetEquationRequest
{
	optional UUID objectId = 1;  //GUID of the equation-object.
}

// This is the message response-message from GetEquationRequest
message GetEquationResponse
{
	optional string equationText = 1;  //string of the equation
}

//This message validate and if required set an equation
message ValidateAndSetEquationRequest
{
	optional UUID objectId = 1;  //GUID of the equation-object.
	optional string equationText = 2;  //string of the equation.
	optional bool bSetValue = 3; //flag if value should be set.
}

// This is the message response-message from ValidateAndSetEquationRequest
message ValidateAndSetEquationResponse
{
	optional int32 validateStatus = 1; //return validateSuccessful if text is valid, else it return the position of the first error in the text.
	optional double result = 2; //if validateStatus is validateSuccessful, this variable contain the result of the equation. 
	optional MessageContainerVector Messages = 3;  //list of error messages
}