syntax = "proto3";
package SvPb;

import "Variant.proto";
import "BasicStructure.proto";
import "SVO-Enum.proto";

//***************************************************************************
// Help Structs
//***************************************************************************
message InputNameObjectNameGuidPair
{
	bytes objectId = 1; //GUID of the object.
	bytes objectName = 2; //name of the object.
	bytes inputName = 3; //input name.
}

message ObjectNameGuidPair
{
	bytes objectId = 1; //GUID of the object.
	bytes objectName = 2; //name of the object.
}

message SVObjectTypeInfoStruct
{
	SVObjectTypeEnum objectType = 1;	// Main Type
	SVObjectSubTypeEnum subType = 2;	// Sub Type  
	bytes embeddedID = 3;
}

//info for one taskobject 
message TaskObjectInfo
{
	string displayname =1;
	bytes  taskObjectId = 2;  //GUID of the object
	SVObjectTypeEnum objecttype = 3; 
	SVObjectSubTypeEnum objectsubtype = 4;
	bool isvalid = 5; 
}

message NameValuePair
{
	bytes name = 1;
	int32 value = 2;
} 

message ValueObjectValues
{
	bytes objectId = 1;
	bytes embeddedId = 2;
	Variant value = 3;
	Variant defaultValue = 4;
}

message SetValueObjectValues
{
	ValueObjectValues values = 1;
	bool isModified = 2;
	bool isDefaultModified = 3;
	int32 arrayIndex = 4;
}

message IsBeforeToolMethod
{ 
	bytes toolId = 1;
}

message DefaultPlusHidden
{
}

//***************************************************************************
// InspectionCommands - can be send with method InspectionCommandsSynchronous
//***************************************************************************
// This message do a runOnce for an inspection or taskObject
message InspectionRunOnceRequest
{
	bytes inspectionID = 1; //GUID of the inspection.
}

// This is the message for Destroy child object.
message DestroyChildRequest
{
	bytes taskObjectListID = 1; //GUID of the task-object-list-object.
	bytes objectID = 2; //GUID of the object which should be destroyed.

	enum FlagEnum
	{
		Flag_None = 0;
		Flag_SetDefaultInputs = 1;
		Flag_ResetInspection = 2;
		Flag_SetDefaultInputs_And_ResetInspection = 3;
	}

	FlagEnum flag = 3; //Define if after destroying object the default inputs are set and/or inspection are reset.
}


// This is the message to get the last (Error)MessageList from an taskObject
message GetMessageListRequest
{
	bytes objectId = 1; //GUID of the task-object.
}

// This is the message response-message from GetMessageListRequest
message GetMessageListResponse
{
	MessageContainerVector Messages = 1; //list of messages
}


// This is the message to reset an object
message ResetObjectRequest
{
	bytes objectId = 1; //GUID of the task-object.
}

// This is the message response-message from ResetObjectRequest
message ResetObjectResponse
{
	MessageContainerVector Messages = 1; //list of messages
}

//This is the message to create a model for the pattern-analyzer. The model will copy from the current source image of the analyzer.
message CreateModelRequest
{
	bytes patternAnalyzerID = 1; //GUID of the pattern-analyzer
	sint32 posX = 2; //x-Pos in the source image.
	sint32 posY = 3; //y-Pos in the source image.
	sint32 modelWidth = 4; //wanted model width.
	sint32 modelHeight = 5; //wanted model height.
	string FileName = 6; //filename where the model should be saved.
}

// This is the message response-message from CreateModelRequest
message CreateModelResponse
{
	MessageContainerVector Messages = 1; //list of messages
}

message GetObjectParametersRequest
{
	bytes objectId = 1; //GUID of the object.
}

message GetObjectParametersResponse
{
	bool isValid = 1; //flag if valid
	bytes name = 2;
	uint32 allowedAttributes = 3;
	SVObjectTypeInfoStruct typeInfo = 4;
}

// This is the message to return the equation string
message GetEquationRequest
{
	bytes objectId = 1; //GUID of the equation-object.
}

// This is the message response-message from GetEquationRequest
message GetEquationResponse
{
	string equationText = 1; //string of the equation
}

//This message validate and if required set an equation
message ValidateAndSetEquationRequest
{
	bytes objectId = 1; //GUID of the equation-object.
	string equationText = 2; //string of the equation.
	bool bSetValue = 3; //flag if value should be set.
}

// This is the message response-message from ValidateAndSetEquationRequest
message ValidateAndSetEquationResponse
{
	sint32 validateStatus = 1; //return validateSuccessful if text is valid, else it return the position of the first error in the text.
	double result = 2; //if validateStatus is validateSuccessful, this variable contain the result of the equation.
	MessageContainerVector Messages = 3; //list of error messages
}

// This is the message to get a list of object which should be added to the monitorlist.
message GetObjectsForMonitorListRequest
{
	bytes objectId = 1; //GUID of the tool.
}

// This is the message response-message from GetObjectsForMonitorListRequest
message GetObjectsForMonitorListResponse
{
	repeated ObjectNameGuidPair list = 1;
	MessageContainerVector Messages = 2; //list of messages
}
// This message moved an object in a taskObject- or friend-list to another position.
message MoveObjectRequest
{
	enum ListEnum
	{
		TaskObjectList = 0;
		FriendList = 1;
	}

	bytes parentId = 1; //GUID of the parent object, which contain the list (for taskObjectList it must be a ITaskObjectList-Object)
	bytes objectId = 2; //GUID of the object, which should be moved (must be a taskObject)
	bytes movePreId = 3; //GUID of the object, before which the other object should be moved. If it is GUID_NULL, the object will be moved to the end.
	ListEnum listMode = 4;
}

// Request TaskObjectInfo for all taskobject in the taskobjectlist
message TaskObjectListRequest
{
	bytes taskObjectId = 1;  //GUID of the object
}

message TaskObjectListResponse
{
	repeated TaskObjectInfo taskobjectinfos = 1; 
}

//get an image(if imageId is set, return this, else try to get image with name and parent)
message GetImageRequest
{
	bytes imageId = 1;  //GUID of the image
	bytes imageName = 2; //Name of the image at parent object
	bytes parentId = 3; //GUID of the parent
} 

message GetImageResponse
{
	Image imageData = 1;
	MessageContainerVector Messages = 2; //list of error messages
}

//get an image(if imageId is set, return this, else try to get image with name and parent)
message AreAuxiliaryExtentsAvailableRequest
{
	bytes objectId = 1;  //GUID of the tool
} 

message AreAuxiliaryExtentsAvailableResponse
{
	bool areAvailable = 1;
}

message GetAvailableAuxImagesRequest
{
	bytes objectId = 1;  //GUID of the tool
}

message GetAvailableAuxImagesResponse
{
	repeated ObjectNameGuidPair list = 1;
}

message GetAuxImageObjectRequest
{
	bytes objectId = 1;  //GUID of the tool
}

message GetAuxImageObjectResponse
{
	ObjectNameGuidPair auxObject = 1;
}

message SetAuxImageObjectRequest
{
	bytes objectId = 1;  //GUID of the tool
	bytes sourceImageId = 2;  //GUID of the source image
}

message SetAuxImageObjectResponse
{
	MessageContainerVector Messages = 1; //list of error messages
}

message GetInputsRequest
{
	bytes objectId = 1;  //GUID of the tool
	SVObjectTypeInfoStruct typeInfo = 2;
	SVObjectTypeEnum objectTypeToInclude = 3; //define until which type the name should displayed (not used for image objects, it has the own name conventions)
	bool shouldExcludeFirstObjectName = 4; //Is true it remove first object name. (If objectTypeToInclude == SVNotsetObjectType this parameter will not used) e.g. SVToolSetObjectType means "Window Tool....". (not used for image objects, it has the own name conventions)
	int32 maxRequested = 5; //only used for image object, it define after how many founded entry it stops.
}

message GetInputsResponse
{
	repeated InputNameObjectNameGuidPair list = 1;
}

message ConnectToObjectRequest
{
	bytes objectId = 1;
	bytes inputName = 2;
	bytes newConnectedId = 3;
	SVObjectTypeEnum objectType = 4;
}

message SaveImageRequest
{
	bytes objectId = 1;
	bytes imageName = 2;
}

message SetObjectNameRequest
{
	bytes objectId = 1;
	bytes objectName = 2;
}

message GetAvailableObjectsRequest
{
	bytes objectId = 1;
	SVObjectTypeInfoStruct typeInfo = 2;
	SVObjectTypeEnum objectTypeToInclude = 3; //default = SVNotSetObjectType
	bool shouldExcludeFirstObjectName = 4;

	oneof allowedMode  //default is check of valid object and not hidden. In this case do not set a oneof-message.
	{
		IsBeforeToolMethod isBeforeToolMethod=5; //same then default, but stop searching if required tool reached.
		DefaultPlusHidden defaultPlusHidden=6;
	}	
}

message GetAvailableObjectsResponse
{
	repeated ObjectNameGuidPair list = 1;
	MessageContainerVector Messages = 2; //list of messages
}

message GetSpecialImageListRequest
{
	bytes taskObjectId = 1;
}

message GetSpecialImageListResponse
{
	repeated bytes specialImageNames = 1;
}

message ExportMaskRequest
{
	bytes objectId = 1;
	bytes fileName = 2;
}

message ImportMaskRequest
{
	bytes objectId = 1;
	bytes fileName = 2;
}

message GetObjectIdRequest
{
	message InfoStruct
	{
		bytes ownerId = 1;
		SVObjectTypeInfoStruct infoStruct = 2;
	}

	oneof message
	{
		bytes name = 1;
		InfoStruct info = 2;
	}
}

message GetObjectIdResponse
{
	bytes objectId = 1;
}

message ConstructAndInsertRequest
{
	message FriendTask
	{
		bytes name = 1; //the name of the new object
		bytes preGuid = 2; //Add new object before the object with this GUID. If object not found (e.g. GUID_NULL), it will be added at the end.
	}

	bytes ownerId = 1;
	bytes classId = 2;

	oneof message
	{
		FriendTask friend = 3;	//Add the new object to the friend list.
		int32 taskObjectPos = 4; //Add the new object to the taskObject list at the pos. 
		bytes taskObjectAfterId = 5; //Add the new object to the taskObject-list after the object with this GUID. if GUID_NULL, add at the end.
	}
}

message ConstructAndInsertResponse
{
	bytes objectId = 1;
	bytes name = 2;
}

message GetCreatableObjectsRequest
{
	bytes objectId = 1;
	SVObjectTypeInfoStruct typeInfo = 2;
}

message GetCreatableObjectsResponse
{
	repeated ObjectNameGuidPair list = 1;
}

//Return if the inspection should be reset. By now it is only used for the filter, because some filters must be reset the whole inspection after changes.
message ShouldInspectionResetRequest
{
	bytes objectId = 1;
}

message ShouldInspectionResetResponse
{
	bool shouldReset = 1;
}

//Get the ppq-name of the inspection
message GetPPQNameRequest
{
	bytes inspectionId = 1;
}

message GetPPQNameResponse
{
	bytes ppqName = 1;
}

//Request the Enumerations(name/value) from a SVEnumerateValueObject
message GetValueObjectEnumsRequest
{
	bytes objectId = 1;
}

message GetValueObjectEnumsResponse
{
	repeated NameValuePair list = 1;
}

message GetEmbeddedValuesRequest
{
	bytes objectId = 1;
}

message GetEmbeddedValuesResponse
{
	repeated ValueObjectValues list = 1;
}

message SetEmbeddedValuesRequest
{
	bytes objectId = 1;
	repeated SetValueObjectValues list = 2;
}

message SetEmbeddedValuesResponse
{
	MessageContainerVector messages = 1; //list of messages
}

message GetOutputRectangleRequest
{
	bytes imageId = 1;
}

message GetOutputRectangleResponse
{
	int32 left = 1;
	int32 top = 2;
	int32 right = 3;
	int32 bottom = 4;
}

message InspectionCmdMsgs
{
	oneof message
	{
		InspectionRunOnceRequest inspectionRunOnceRequest=1;
		DestroyChildRequest destroyChildRequest =2;
		GetMessageListRequest  getMessageListRequest =3;
		GetMessageListResponse getMessageListResponse =4;
		ResetObjectRequest  resetObjectRequest =5;
		ResetObjectResponse resetObjectResponse =6;
		CreateModelRequest  createModelRequest =7;
		CreateModelResponse createModelResponse =8;
		GetObjectParametersRequest getObjectParametersRequest = 9;
		GetObjectParametersResponse getObjectParametersResponse = 10;
		GetEquationRequest getEquationRequest = 11;
		GetEquationResponse  getEquationResponse=12; 
		ValidateAndSetEquationRequest  validateAndSetEquationRequest =13;
		ValidateAndSetEquationResponse  validateAndSetEquationResponse =14;
		GetObjectsForMonitorListRequest getObjectsForMonitorListRequest =15;
		GetObjectsForMonitorListResponse getObjectsForMonitorListResponse = 16;
		MoveObjectRequest moveObjectRequest =17;
		TaskObjectListRequest taskObjectListRequest = 18;
		TaskObjectListResponse taskObjectListResponse = 19;
		GetImageRequest getImageRequest = 20;
		GetImageResponse getImageResponse = 21;
		AreAuxiliaryExtentsAvailableRequest areAuxiliaryExtentsAvailableRequest = 22;
		AreAuxiliaryExtentsAvailableResponse areAuxiliaryExtentsAvailableResponse = 23;
		GetAvailableAuxImagesRequest getAvailableAuxImagesRequest = 24;
		GetAvailableAuxImagesResponse getAvailableAuxImagesResponse = 25;
		GetAuxImageObjectRequest getAuxImageObjectRequest = 26;
		GetAuxImageObjectResponse getAuxImageObjectResponse = 27;
		SetAuxImageObjectRequest setAuxImageObjectRequest = 28;
		SetAuxImageObjectResponse setAuxImageObjectResponse = 29;
		GetInputsRequest getInputsRequest = 30;
		GetInputsResponse getInputsResponse = 31;
		ConnectToObjectRequest connectToObjectRequest = 32;
		SaveImageRequest saveImageRequest = 33;
		SetObjectNameRequest setObjectNameRequest = 34;
		GetAvailableObjectsRequest getAvailableObjectsRequest = 35;
		GetAvailableObjectsResponse getAvailableObjectsResponse = 36;
		GetSpecialImageListRequest getSpecialImageListRequest = 37;
		GetSpecialImageListResponse getSpecialImageListResponse = 38;
		ExportMaskRequest exportMaskRequest = 39;
		ImportMaskRequest importMaskRequest = 40;
		GetObjectIdRequest getObjectIdRequest = 41;
		GetObjectIdResponse getObjectIdResponse = 42;
		ConstructAndInsertRequest constructAndInsertRequest = 43;
		ConstructAndInsertResponse constructAndInsertResponse = 44;
		GetCreatableObjectsRequest getCreatableObjectsRequest = 45;
		GetCreatableObjectsResponse getCreatableObjectsResponse = 46;
		ShouldInspectionResetRequest shouldInspectionResetRequest = 47;
		ShouldInspectionResetResponse shouldInspectionResetResponse = 48;
		GetPPQNameRequest getPPQNameRequest = 49;
		GetPPQNameResponse getPPQNameResponse = 50;
		GetValueObjectEnumsRequest getValueObjectEnumsRequest = 51;
		GetValueObjectEnumsResponse getValueObjectEnumsResponse = 52;
		GetEmbeddedValuesRequest getEmbeddedValuesRequest = 53;
		GetEmbeddedValuesResponse getEmbeddedValuesResponse = 54;
		SetEmbeddedValuesRequest setEmbeddedValuesRequest = 55;
		SetEmbeddedValuesResponse setEmbeddedValuesResponse = 56;
		GetOutputRectangleRequest getOutputRectangleRequest = 57;
		GetOutputRectangleResponse getOutputRectangleResponse = 58;
	}
}

