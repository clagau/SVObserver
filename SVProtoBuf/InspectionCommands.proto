syntax = "proto3";
package SvPb;

import "BasicStructure.proto";

//***************************************************************************
// InspectionCommands - can be send with method InspectionCommandsSynchronous
//***************************************************************************



// This message do a runOnce for an inspection or taskObject
message InspectionRunOnceRequest
{
	bytes inspectionID = 1; //GUID of the inspection.
	bytes taskID = 2; //GUID of the taskObject on which the runOnce should be done. If this field empty the whole inspection will run.
}

// This is the message for Destroy child object.
message DestroyChildRequest
{
	bytes taskObjectListID = 1; //GUID of the task-object-list-object.
	bytes objectID = 2; //GUID of the object which should be destroyed.

	enum FlagEnum
	{
		Flag_None = 0;
		Flag_SetDefaultInputs = 1;
		Flag_ResetInspection = 2;
		Flag_SetDefaultInputs_And_ResetInspection = 3;
	}

	FlagEnum flag = 3; //Define if after destroying object the default inputs are set and/or inspection are reset.
}


// This is the message to get the last (Error)MessageList from an taskObject
message GetMessageListRequest
{
	bytes objectId = 1; //GUID of the task-object.
}

// This is the message response-message from GetMessageListRequest
message GetMessageListResponse
{
	MessageContainerVector Messages = 1; //list of messages
}


// This is the message to reset an object
message ResetObjectRequest
{
	bytes objectId = 1; //GUID of the task-object.
}

// This is the message response-message from ResetObjectRequest
message ResetObjectResponse
{
	MessageContainerVector Messages = 1; //list of messages
}


//This is the message to create a model for the pattern-analyzer. The model will copy from the current source image of the analyzer.
message CreateModelRequest
{
	bytes patternAnalyzerID = 1; //GUID of the pattern-analyzer
	sint32 posX = 2; //x-Pos in the source image.
	sint32 posY = 3; //y-Pos in the source image.
	sint32 modelWidth = 4; //wanted model width.
	sint32 modelHeight = 5; //wanted model height.
	string FileName = 6; //filename where the model should be saved.
}

// This is the message response-message from CreateModelRequest
message CreateModelResponse
{
	MessageContainerVector Messages = 1; //list of messages
}

// This is the message to return the state if an object is valid
message IsValidRequest
{
	bytes objectId = 1; //GUID of the object.
}

// This is the message response-message from IsValidRequest
message IsValidResponse
{
	bool IsValid = 1; //flag if valid
}


// This is the message to return the equation string
message GetEquationRequest
{
	bytes objectId = 1; //GUID of the equation-object.
}

// This is the message response-message from GetEquationRequest
message GetEquationResponse
{
	string equationText = 1; //string of the equation
}

//This message validate and if required set an equation
message ValidateAndSetEquationRequest
{
	bytes objectId = 1; //GUID of the equation-object.
	string equationText = 2; //string of the equation.
	bool bSetValue = 3; //flag if value should be set.
}

// This is the message response-message from ValidateAndSetEquationRequest
message ValidateAndSetEquationResponse
{
	sint32 validateStatus = 1; //return validateSuccessful if text is valid, else it return the position of the first error in the text.
	double result = 2; //if validateStatus is validateSuccessful, this variable contain the result of the equation.
	MessageContainerVector Messages = 3; //list of error messages
}

// This is the message to get a list of object which should be added to the monitorlist.
message GetObjectsForMonitorListRequest
{
	bytes objectId = 1; //GUID of the tool.
}

message ObjectNameGuidPair
{
	bytes objectId = 1; //GUID of the object.
	bytes objectName = 2; //name of the object.
}

// This is the message response-message from GetObjectsForMonitorListRequest
message GetObjectsForMonitorListResponse
{
	repeated ObjectNameGuidPair list = 1;
	MessageContainerVector Messages = 2; //list of messages
}


message InspectionCmdMsgs
{
	oneof message
	{
		InspectionRunOnceRequest inspectionRunOnceRequest=1;
		DestroyChildRequest destroyChildRequest =2;
		GetMessageListRequest  getMessageListRequest =3;
		GetMessageListResponse getMessageListResponse =4;
		ResetObjectRequest  resetObjectRequest =5;
		ResetObjectResponse resetObjectResponse =6;
		CreateModelRequest  createModelRequest =7;
		CreateModelResponse createModelResponse =8;
		IsValidRequest  isValidRequest = 9;
		IsValidResponse isValidResponse  =10;
		GetEquationRequest getEquationRequest = 11;
		GetEquationResponse  getEquationResponse=12; 
		ValidateAndSetEquationRequest  validateAndSetEquationRequest =13;
		ValidateAndSetEquationResponse  validateAndSetEquationResponse =14;
		GetObjectsForMonitorListRequest getObjectsForMonitorListRequest =15;
		GetObjectsForMonitorListResponse getObjectsForMonitorListResponse = 16;
	}
}

