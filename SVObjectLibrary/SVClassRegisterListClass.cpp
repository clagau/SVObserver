//******************************************************************************
//* COPYRIGHT (c) 2003 by SVResearch, Harrisburg
//* All Rights Reserved
//******************************************************************************
//* .Module Name     : SVClassRegisterListClass
//* .File Name       : $Workfile:   SVClassRegisterListClass.cpp  $
//* ----------------------------------------------------------------------------
//* .Current Version : $Revision:   1.0  $
//* .Check In Date   : $Date:   22 Apr 2013 16:35:30  $
//******************************************************************************

#pragma region Includes
#include "stdafx.h"
#include "SVClassRegisterListClass.h"
#include "SVClassRegisterClass.h"
#include "SVObjectClass.h"
#include "SVOResource/resource.h"
#include "SVProtoBuf/SVO-Enum.h"
#include "SVUtilityLibrary/StringHelper.h"
#include "SVUtilityLibrary/SVGUID.h"
#include "SVClsids.h"
#include "SVObjectManagerClass.h"
#include "SVStatusLibrary/GlobalPath.h"
#include "Definitions/TextDefineSvDef.h"
#pragma endregion Includes

#pragma region Declarations
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

//ClassIdGuids and EmbeddedGuids is only used to load old Configuration (8.20 or older) and Import old Inspections. 
//If it is not longer needed to load Configuration 8.20 or older than the Guids and its maps can be deleted.
#pragma region ClassIdGuids
const GUID SVBoolValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x3e, 0xd, 0xd } };
const GUID SVDWordValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x4e, 0xd, 0xd } };
const GUID SVDoubleValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x5e, 0xd, 0xd } };
const GUID DoubleSortValueObjectGuid = { 0x2182eafb, 0xf354, 0x42f5,{ 0xac, 0x2e, 0x7a, 0x4a, 0x99, 0xc3, 0xb9, 0x4 } };
const GUID SVLongValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x6e, 0xd, 0xd } };
const GUID SVPointValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x7e, 0xd, 0xd } };
const GUID SVDPointValueObjectClassGuid = { 0x71a10856, 0x2b37, 0x4612,{ 0xa4, 0xe3, 0x5d, 0x97, 0x78, 0x2, 0x2c, 0x14 } };
const GUID SVByteValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x8e, 0xd, 0xd } };
//This Guid is also used for embedded.
const GUID SVStringValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x5f, 0xd, 0xd } };
const GUID SVStaticStringValueObjectClassGuid = { 0xe9c59b74, 0x2018, 0x47c0,{ 0xb4, 0xcb, 0x4b, 0x8e, 0x91, 0x87, 0xa6, 0xf } };
const GUID SVFileNameValueObjectClassGuid = { 0x5b48b354, 0x2eb3, 0x11d5,{ 0xa9, 0xb8, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVInt64ValueObjectClassGuid = { 0x7a8535a5, 0xceb, 0x4953,{ 0xb9, 0xb8, 0xea, 0xe, 0x5f, 0x14, 0x14, 0x8c } };
const GUID SVCharValueObjectClassGuid = { 0x7a8535a6, 0xceb, 0x4953,{ 0xb9, 0xb8, 0xea, 0xe, 0x5f, 0x14, 0x14, 0x8c } };
const GUID SVTimerValueObjectClassGuid = { 0x28ecad3e, 0x2325, 0x4795,{ 0x93, 0xe8, 0x78, 0xd5, 0x72, 0xf0, 0xc3, 0x7b } };
const GUID SVVariantValueObjectClassGuid = { 0x8661367d, 0xbf3d, 0x4cac,{ 0xa9, 0xe4, 0x53, 0x35, 0xb8, 0x66, 0x1e, 0x23 } };
const GUID SVEnumerateValueObjectClassGuid = { 0xb038c414, 0xe896, 0x11d3,{ 0xa9, 0x4c, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVImageClassGuid = { 0x6f2b5910, 0x6528, 0x11d1,{ 0x92, 0x51, 0x0, 0x0, 0xf8, 0x45, 0x69, 0x69 } };
const GUID SVInspectionProcessGuid = { 0xbab48424, 0xc2d8, 0x11d2,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x1e, 0xd, 0xd } };
const GUID SVToolSetClassGuid = { 0xd6def5d9, 0xc2de, 0x11d2,{ 0xac, 0x61, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVWindowToolClassGuid = { 0x86ddf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVMathToolClassGuid = { 0x86ddf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc1, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatisticsToolClassGuid = { 0x86ddf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc3, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID RingBufferToolGuid = { 0x9ead7f0e, 0xacbe, 0x468f,{ 0x99, 0xf3, 0x93, 0x8, 0x47, 0x1d, 0xf3, 0xf3 } };
const GUID SVArchiveToolClassGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc6, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVAcquisitionToolClassGuid = { 0x45588b9a, 0x7283, 0x1167,{ 0xf8, 0xa3, 0x1f, 0xc4, 0x7, 0x0, 0xfd, 0xa0 } };
const GUID SVTransformationToolClassGuid = { 0xbdf6dc5b, 0xde42, 0x11d3,{ 0xa8, 0x8b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVShiftToolClassGuid = { 0xdd22376e, 0x4d86, 0x4173,{ 0x91, 0x32, 0x65, 0xbb, 0xa5, 0xf4, 0xb9, 0x18 } };
const GUID SVCylindricalWarpToolClassGuid = { 0x93dbf9c1, 0xbcee, 0x4654,{ 0x9c, 0xa5, 0x28, 0x4, 0x47, 0xba, 0x7d, 0x5f } };
const GUID SVPerspectiveToolClassGuid = { 0xb465d824, 0x7e69, 0x4e54,{ 0x89, 0xd6, 0xb6, 0xad, 0xc5, 0x90, 0x9f, 0xb2 } };
const GUID SVImageToolClassGuid = { 0x5cc0b7d3, 0x6964, 0x11d3,{ 0xa8, 0x6f, 0x0, 0x0, 0x2c, 0x0, 0xdd, 0x5 } };
const GUID SVLinearToolClassGuid = { 0x33e8442, 0xcee8, 0x4447,{ 0xb6, 0x6f, 0x7f, 0x97, 0x98, 0x8a, 0x39, 0xcc } };
const GUID SVColorToolClassGuid = { 0x33e41275, 0x45fa, 0x11d4,{ 0xa9, 0x24, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVResizeToolGuid = { 0xb7b9c748, 0xbfc4, 0x4863,{ 0x85, 0xb6, 0xe3, 0x37, 0x8a, 0x90, 0xc1, 0x75 } };
const GUID SVLoadImageToolClassGuid = { 0x471d5437, 0x720b, 0x11d3,{ 0xa8, 0x80, 0x22, 0xa9, 0x0, 0x0, 0x51, 0xf0 } };
const GUID TableToolGuid = { 0x8d4ee252, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3a } };
const GUID TableAnalyzerToolGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x17 } };
const GUID SVPolarTransformationToolClassGuid = { 0xd21cced, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID LoopToolClassGuid = { 0xc71e73b5, 0x4822, 0x4e94,{ 0xb6, 0xf8, 0x36, 0x5a, 0xbf, 0x64, 0x98, 0xbf } };
const GUID SVExternalToolGuid = { 0x16dde450, 0x10c5, 0x4926,{ 0xbd, 0xf3, 0x68, 0xd3, 0xf1, 0x59, 0x2c, 0x3f } };
const GUID SVBlobAnalyzerClassGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xbc, 0x0, 0xa2, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID PixelAnalyzerClassGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xa3, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVLuminanceAnalyzerClassGuid = { 0xb4cf7400, 0x4454, 0x11d3,{ 0xa7, 0x9b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x76 } };
const GUID HistogramAnalyzerGuid = { 0x3e5c8100, 0x2e0d, 0x4ab0,{ 0x85, 0x12, 0xd5, 0x7b, 0xcf, 0x47, 0x5d, 0x83 } };
const GUID SVPatternAnalyzerClassGuid = { 0xf929719c, 0xeeab, 0x11d3,{ 0xa8, 0x90, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVBarCodeAnalyzerClassGuid = { 0xf52e8df6, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVOCVAnalyzerClassGuid = { 0x70d8f917, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID LinearPixelCountingAnalyzerClassGuid = { 0x782d5b52, 0xb548, 0x4e03,{ 0xbd, 0x84, 0xff, 0xf6, 0xae, 0x48, 0x63, 0x39 } };
const GUID LinearEdgeCountingAnalyzerGuid = { 0x31aeeb38, 0x9102, 0x4a50,{ 0xaf, 0x98, 0x7f, 0xaa, 0x2f, 0x60, 0xf8, 0x28 } };
const GUID LinearEdgePositionAnalyzerClassGuid = { 0x58ab741e, 0x752a, 0x43fd,{ 0x95, 0x86, 0xa3, 0xa6, 0xf9, 0x42, 0x19, 0xb7 } };
const GUID SVLinearMeasurementAnalyzerClassGuid = { 0xe95676cf, 0x3658, 0x4d23,{ 0xbf, 0xee, 0xc5, 0x74, 0xc8, 0xf8, 0x4a, 0x1c } };
const GUID LinearMaximumBackgroundObjectAnalyzerClassGuid = { 0x96f91065, 0x9ef2, 0x4b80,{ 0x90, 0x39, 0xdf, 0xd1, 0xbe, 0xd6, 0x57, 0x18 } };
const GUID LinearMaximumForegroundObjectAnalyzerClassGuid = { 0xbb4f2275, 0x6481, 0x4914,{ 0x9d, 0x53, 0x9d, 0x6f, 0x1b, 0x9a, 0xf9, 0xa5 } };
const GUID LinearMaximumObjectAnalyzerClassGuid = { 0x2d8a0bdc, 0xe0d3, 0x4127,{ 0xae, 0xbf, 0x97, 0x9f, 0xee, 0x42, 0x1a, 0xe5 } };
const GUID TableAnaylzerSortGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x19 } };
const GUID TableAnaylzerExcludeGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1A } };
const GUID TableAnaylzerLimitGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1B } };
const GUID TableAnaylzerAddColumnGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1D } };
const GUID SVPointXResultClassGuid = { 0x131b613b, 0x5b2d, 0x11d3,{ 0xa8, 0x58, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVPointYResultClassGuid = { 0x131b613c, 0x5b2d, 0x11d3,{ 0xa8, 0x58, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVDPointXResultClassGuid = { 0x567f8706, 0xd394, 0x4a07,{ 0xb5, 0xf1, 0xa9, 0xbb, 0x91, 0x92, 0x56, 0xfb } };
const GUID SVDPointYResultClassGuid = { 0x71dbc40, 0x8197, 0x4ba2,{ 0x97, 0xde, 0xdb, 0x2, 0xd8, 0x5a, 0x2b, 0x77 } };
const GUID SVDoubleResultClassGuid = { 0x8c0429f9, 0x5faf, 0x11d3,{ 0xa7, 0xe2, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLongResultClassGuid = { 0x131b613d, 0x5b2d, 0x11d3,{ 0xa8, 0x58, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVVariantResultClassGuid = { 0x79cb37ec, 0x2a7f, 0x4c0b,{ 0xb2, 0xef, 0xde, 0x79, 0xe1, 0x50, 0xae, 0x22 } };
const GUID SVStringResultClassGuid = { 0xf52e8df8, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBarCodeResultClassGuid = { 0xf52e8dfb, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVOCVAnalyzerResultClassGuid = { 0x70d8f918, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVCharacterResultClassGuid = { 0x70d8f92a, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVRangeClassGuid = { 0x86dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVSmoothFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x02, 0x44, 0xd, 0xd } };
const GUID SVSharpenFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x03, 0x44, 0xd, 0xd } };
const GUID SVSharpen2FilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x04, 0x44, 0xd, 0xd } };
const GUID SVHorizEdgeFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x05, 0x44, 0xd, 0xd } };
const GUID SVVertEdgeFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x06, 0x44, 0xd, 0xd } };
const GUID SVEdgeDetectFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x07, 0x44, 0xd, 0xd } };
const GUID SVEdgeDetect2FilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x08, 0x44, 0xd, 0xd } };
const GUID SVLaplacianEdgeFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x09, 0x44, 0xd, 0xd } };
const GUID SVLaplacianEdge2FilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x0a, 0x44, 0xd, 0xd } };
const GUID SVMaxMinusMinFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x0b, 0x44, 0xd, 0xd } };
const GUID SVErosionFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x0d, 0x44, 0xd, 0xd } };
const GUID SVDilationFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x0e, 0x44, 0xd, 0xd } };
const GUID SVOpeningFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x0f, 0x44, 0xd, 0xd } };
const GUID SVClosingFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x10, 0x44, 0xd, 0xd } };
const GUID SVCustomFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x13, 0x44, 0xd, 0xd } };
const GUID Custom2FilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x14, 0x44, 0xd, 0xd } };
const GUID SVRankingFilterClassGuid = { 0xd2675f50, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x13, 0x44, 0xd, 0xd } };
const GUID Ranking2FilterClassGuid = { 0xd2675f51, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x13, 0x44, 0xd, 0xd } };
const GUID SVSkeletonFilterClassGuid = { 0x81983088, 0xfeaa, 0x47e7,{ 0x83, 0xfc, 0x53, 0x9a, 0x72, 0xc9, 0x15, 0xc8 } };
const GUID SVThinningFilterClassGuid = { 0xd4f9d765, 0xc168, 0x4300,{ 0x91, 0x28, 0x89, 0xdb, 0x40, 0xd9, 0xcb, 0x60 } };
const GUID SVThickeningFilterClassGuid = { 0xa5664844, 0xd021, 0x413f,{ 0xb2, 0xe5, 0xb6, 0x82, 0xf6, 0xc3, 0x9a, 0xa5 } };
const GUID SVWatershedFilterClassGuid = { 0xadd53485, 0x3f05, 0x4cef,{ 0x8f, 0x2, 0x3, 0x77, 0x14, 0x2f, 0xa1, 0x2d } };
const GUID SVEraseBorderBlobsFilterClassGuid = { 0x60ab07dd, 0x423f, 0x4d0b,{ 0x9e, 0xd2, 0x6e, 0x63, 0xba, 0x8b, 0xd2, 0x47 } };
const GUID SVExtractHolesFilterClassGuid = { 0x60ab07dd, 0x423f, 0x4d0b,{ 0x9e, 0xd2, 0x6e, 0x63, 0xba, 0x8b, 0xd2, 0x48 } };
const GUID SVFillHolesFilterClassGuid = { 0x60ab07dd, 0x423f, 0x4d0b,{ 0x9e, 0xd2, 0x6e, 0x63, 0xba, 0x8b, 0xd2, 0x49 } };
const GUID SVReconstructFilterClassGuid = { 0x60ab07dd, 0x423f, 0x4d0b,{ 0x9e, 0xd2, 0x6e, 0x63, 0xba, 0x8b, 0xd2, 0x50 } };
const GUID SVThresholdClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x01, 0x44, 0xd, 0xd } };
const GUID SVUserMaskOperatorClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x12, 0x44, 0xd, 0xd } };
const GUID SVStdImageOperatorListClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x5e, 0xd, 0xd } };
const GUID SVInPlaceImageOperatorListClassGuid = { 0x2d8eb69, 0xff48, 0x11d3,{ 0xa9, 0x6d, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLinearImageOperatorListClassGuid = { 0x10ae3db6, 0xe433, 0x4215,{ 0x80, 0x71, 0x2c, 0xab, 0x1c, 0x80, 0xb1, 0xe4 } };
const GUID SVEquationClassGuid = { 0x5dd374e7, 0x4f36, 0x11d3,{ 0xa7, 0xc8, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6c } };
const GUID SVConditionalClassGuid = { 0x4cdb299b, 0x5bc0, 0x11d3,{ 0xa7, 0xdd, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVMathEquationClassGuid = { 0x4cdb299d, 0x5bc0, 0x11d3,{ 0xa7, 0xdd, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLinearEdgeAProcessingClassGuid = { 0x12ee01a8, 0xfe81, 0x4ad3,{ 0xaf, 0x3f, 0x57, 0x2f, 0x9, 0xe7, 0xbf, 0xa7 } };
const GUID SVLinearEdgeBProcessingClassGuid = { 0x12ee01a8, 0xfe82, 0x4ad3,{ 0xaf, 0x3f, 0x57, 0x2f, 0x9, 0xe7, 0xbf, 0xa7 } };
const GUID SVDataBufferClassGuid = { 0xdc1f4808, 0x66f3, 0x11d3,{ 0xa8, 0x6b, 0x0, 0x18, 0x0, 0x0, 0x58, 0x11 } };
const GUID SVImageArithmeticClassGuid = { 0x5cc0b7dd, 0x6964, 0x11d3,{ 0xa8, 0x6f, 0x0, 0x1c, 0x55, 0x0, 0x7d, 0x3c } };
const GUID SVUpperThresholdEquationClassGuid = { 0x4598ab0e, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0x3f, 0xe0, 0x23, 0x0, 0x10, 0x0 } };
const GUID SVLowerThresholdEquationClassGuid = { 0x4598ab34, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0xd0, 0x3d, 0x4f, 0x0, 0x44, 0x0 } };
const GUID SVAutoThresholdEquationClassGuid = { 0x4598ab5b, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0x2d, 0x0, 0x33, 0x0, 0xa, 0xb3 } };
const GUID SVExternalToolTaskGuid = { 0xba649a3c, 0x2ef1, 0x4eaf,{ 0xb1, 0x7b, 0xf9, 0x2d, 0xcf, 0xb2, 0x32, 0x38 } };
const GUID SVImageTransformClassGuid = { 0xbdf6dc64, 0xde42, 0x11d3,{ 0xa8, 0x8b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVPolarTransformClassGuid = { 0xec839a34, 0xeb75, 0x11d3,{ 0xa9, 0x52, 0x7, 0x10, 0x6f, 0x0, 0x18, 0x38 } };
const GUID SVImagePolarTransformClassGuid = { 0xd21cd37, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVEvaluateTranslationXClassGuid = { 0x62df95a9, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVEvaluateTranslationYClassGuid = { 0x62df95aa, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVEvaluateRotationXClassGuid = { 0x62df95ab, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVEvaluateRotationYClassGuid = { 0x62df95ac, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVEvaluateRotationAngleClassGuid = { 0x62df95ad, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVEvaluateCenterXClassGuid = { 0xd21ccf5, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x0, 0x17, 0x36 } };
const GUID SVEvaluateCenterYClassGuid = { 0xd21ccfc, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x32 } };
const GUID SVEvaluateStartRadiusClassGuid = { 0xd21cd04, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x4, 0x18, 0x36 } };
const GUID SVEvaluateEndRadiusClassGuid = { 0xd21cd0e, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVEvaluateStartAngleClassGuid = { 0xd21cd1c, 0xed1c, 0x11d3,{ 0xa9, 0x53, 0x1, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVEvaluateEndAngleClassGuid = { 0xd21cd2b, 0xed1c, 0x11d3,{ 0xa9, 0x58, 0x0, 0x11, 0x6f, 0x0, 0x18, 0x40 } };
const GUID SVLUTEquationClassGuid = { 0x4c478d7f, 0xfbf9, 0x11d3,{ 0xa9, 0x6a, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLUTOperatorClassGuid = { 0x4c478d96, 0xfbf9, 0x11d3,{ 0xa9, 0x6a, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVColorThresholdClassGuid = { 0xdb745833, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID ToolSizeAdjustTaskGuid = { 0x4f6b67ea, 0xaedb, 0x46fb,{ 0xaa, 0x7b, 0xe6, 0x90, 0xe7, 0xc4, 0xa6, 0x80 } };
const GUID TableColumnEquationGuid = { 0x8d4ee252, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3c } };
const GUID TableAddColumnEquationGuid = { 0x8d4ee253, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3c } };
const GUID TableFillObjectGuid = { 0x8d4ee252, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3e } };
const GUID TableCopyObjectGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x18 } };
const GUID SVRemoteOutputObjectGUID = { 0xd17799f, 0xb317, 0x4af1,{ 0x90, 0x4d, 0xc2, 0xa6, 0xd6, 0xcc, 0x41, 0xe8 } };
const GUID EQAdjustSizeWidthGuid = { 0xf4021122, 0x9b73, 0x41bf,{ 0x96, 0xaa, 0x89, 0xbf, 0x1f, 0x10, 0xe, 0xd5 } };
const GUID EQAdjustSizeHeightGuid = { 0xe39723ff, 0x5299, 0x4a8f,{ 0x94, 0x4e, 0x6b, 0xbe, 0x11, 0xeb, 0xc8, 0x7 } };
const GUID EQAdjustSizePositionXGuid = { 0xbd589ca5, 0x80e6, 0x41fb,{ 0xac, 0x6e, 0xc0, 0x87, 0xcc, 0xb5, 0x9f, 0xf0 } };
const GUID EQAdjustSizePositionYGuid = { 0xc5547ceb, 0xc7d1, 0x4d2e,{ 0xa7, 0x99, 0xaa, 0xe8, 0x73, 0xac, 0x27, 0x1e } };
const GUID SVShapeMaskHelperClassGuid = { 0x3f24390d, 0xfd80, 0x4d40,{ 0xba, 0x9f, 0x56, 0x15, 0x29, 0xaa, 0x1d, 0x73 } };
const GUID TableObjectGuid = { 0x8d4ee252, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3d } };
const GUID SVRemoteOutputGroupGUID = { 0x78c51773, 0x3fb4, 0x4e92,{ 0xad, 0x86, 0xa5, 0x2c, 0xdb, 0x17, 0x6a, 0x53 } };
const GUID SVRemoteOutputDataControllerGUID = { 0x109f88b8, 0x376b, 0x4858,{ 0xa7, 0x1, 0xbb, 0xef, 0x7e, 0x3b, 0xa, 0x15 } };
#pragma endregion ClassIdGuids

typedef std::unordered_map<GUID, SvPb::ClassIdEnum>  ExchangeClassMap;
ExchangeClassMap g_ExchangeClassID = {
	{ SVBoolValueObjectClassGuid, SvPb::BoolValueClassId },
	{ SVDWordValueObjectClassGuid, SvPb::DWordValueClassId },
	{ SVDoubleValueObjectClassGuid, SvPb::DoubleValueClassId },
	{ DoubleSortValueObjectGuid, SvPb::DoubleSortValueClassId },
	{ SVLongValueObjectClassGuid, SvPb::LongValueClassId },
	{ SVPointValueObjectClassGuid, SvPb::PointValueClassId },
	{ SVDPointValueObjectClassGuid, SvPb::DPointValueClassId },
	{ SVByteValueObjectClassGuid, SvPb::ByteValueClassId },
	{ SVStaticStringValueObjectClassGuid, SvPb::StringValueClassId },
	{ SVStringValueObjectClassGuid, SvPb::StringValueClassId },
	{ SVFileNameValueObjectClassGuid, SvPb::FileNameValueClassId },
	{ SVInt64ValueObjectClassGuid, SvPb::Int64ValueClassId },
	{ SVCharValueObjectClassGuid, SvPb::CharValueClassId },
	{ SVTimerValueObjectClassGuid, SvPb::TimerValueClassId },
	{ SVVariantValueObjectClassGuid, SvPb::VariantValueClassId },
	{ SVEnumerateValueObjectClassGuid, SvPb::EnumerateValueClassId },
	{ SVImageClassGuid , SvPb::ImageClassId },
	{ SVInspectionProcessGuid , SvPb::InspectionProcessClassId },
	{ SVToolSetClassGuid, SvPb::ToolSetClassId },
	{ SVWindowToolClassGuid, SvPb::WindowToolClassId },
	{ SVMathToolClassGuid, SvPb::MathToolClassId },
	{ SVStatisticsToolClassGuid, SvPb::StatisticsToolClassId },
	{ RingBufferToolGuid, SvPb::RingBufferToolClassId },
	{ SVArchiveToolClassGuid, SvPb::ArchiveToolClassId },
	{ SVAcquisitionToolClassGuid, SvPb::AcquisitionToolClassId },
	{ SVTransformationToolClassGuid, SvPb::TransformationToolClassId },
	{ SVShiftToolClassGuid, SvPb::ShiftToolClassId },
	{ SVCylindricalWarpToolClassGuid, SvPb::CylindricalWarpToolClassId },
	{ SVPerspectiveToolClassGuid, SvPb::PerspectiveToolClassId },
	{ SVImageToolClassGuid, SvPb::ImageToolClassId },
	{ SVLinearToolClassGuid, SvPb::LinearToolClassId },
	{ SVColorToolClassGuid, SvPb::ColorToolClassId },
	{ SVResizeToolGuid, SvPb::ResizeToolId },
	{ SVLoadImageToolClassGuid, SvPb::LoadImageToolClassId },
	{ TableToolGuid, SvPb::TableToolClassId },
	{ TableAnalyzerToolGuid, SvPb::TableAnalyzerToolClassId },
	{ SVPolarTransformationToolClassGuid, SvPb::PolarTransformationToolClassId },
	{ LoopToolClassGuid, SvPb::LoopToolClassId },
	{ SVExternalToolGuid, SvPb::ExternalToolClassId },
	{ SVBlobAnalyzerClassGuid, SvPb::BlobAnalyzerClassId },
	{ PixelAnalyzerClassGuid, SvPb::PixelAnalyzerClassId },
	{ SVLuminanceAnalyzerClassGuid, SvPb::LuminanceAnalyzerClassId },
	{ HistogramAnalyzerGuid, SvPb::HistogramAnalyzerClassId },
	{ SVPatternAnalyzerClassGuid, SvPb::PatternAnalyzerClassId },
	{ SVBarCodeAnalyzerClassGuid, SvPb::BarCodeAnalyzerClassId },
	{ SVOCVAnalyzerClassGuid, SvPb::OCVAnalyzerClassId },
	{ LinearPixelCountingAnalyzerClassGuid , SvPb::LinearPixelCountingLineAnalyzerClassId },
	{ LinearEdgeCountingAnalyzerGuid, SvPb::LinearEdgeCountingLineAnalyzerClassId },
	{ LinearEdgePositionAnalyzerClassGuid, SvPb::LinearEdgePositionLineAnalyzerClassId },
	{ SVLinearMeasurementAnalyzerClassGuid, SvPb::LinearMeasurementAnalyzerClassId },
	{ LinearMaximumBackgroundObjectAnalyzerClassGuid, SvPb::LinearMaximumBackgroundObjectLineAnalyzerClassId },
	{ LinearMaximumForegroundObjectAnalyzerClassGuid, SvPb::LinearMaximumForegroundObjectLineAnalyzerClassId },
	{ LinearMaximumObjectAnalyzerClassGuid, SvPb::LinearMaximumObjectLineAnalyzerClassId },
	{ TableAnaylzerSortGuid, SvPb::TableAnaylzerSortClassId },
	{ TableAnaylzerExcludeGuid, SvPb::TableAnaylzerExcludeClassId },
	{ TableAnaylzerLimitGuid, SvPb::TableAnaylzerLimitClassId },
	{ TableAnaylzerAddColumnGuid, SvPb::TableAnaylzerAddColumnClassId },
	{ SVPointXResultClassGuid, SvPb::PointXResultClassId },
	{ SVPointYResultClassGuid, SvPb::PointYResultClassId },
	{ SVDPointXResultClassGuid, SvPb::DPointXResultClassId },
	{ SVDPointYResultClassGuid, SvPb::DPointYResultClassId },
	{ SVLongResultClassGuid, SvPb::LongResultClassId },
	{ SVDoubleResultClassGuid, SvPb::DoubleResultClassId },
	{ SVVariantResultClassGuid, SvPb::VariantResultClassId },
	{ SVStringResultClassGuid, SvPb::StringResultClassId },
	{ SVBarCodeResultClassGuid, SvPb::BarCodeResultClassId },
	{ SVOCVAnalyzerResultClassGuid, SvPb::OCVAnalyzerResultClassId },
	{ SVOCVCharacterResultClassGuid, SvPb::OCVCharacterResultClassId },
	{ SVRangeClassGuid, SvPb::RangeClassId },
	{ SVSmoothFilterClassGuid, SvPb::SmoothFilterClassId },
	{ SVSharpenFilterClassGuid, SvPb::SharpenFilterClassId },
	{ SVSharpen2FilterClassGuid, SvPb::Sharpen2FilterClassId },
	{ SVHorizEdgeFilterClassGuid, SvPb::HorizEdgeFilterClassId },
	{ SVVertEdgeFilterClassGuid, SvPb::VertEdgeFilterClassId },
	{ SVEdgeDetectFilterClassGuid, SvPb::EdgeDetectFilterClassId },
	{ SVEdgeDetect2FilterClassGuid, SvPb::EdgeDetect2FilterClassId },
	{ SVLaplacianEdgeFilterClassGuid, SvPb::LaplacianEdgeFilterClassId },
	{ SVLaplacianEdge2FilterClassGuid, SvPb::LaplacianEdge2FilterClassId },
	{ SVMaxMinusMinFilterClassGuid, SvPb::MaxMinusMinFilterClassId },
	{ SVErosionFilterClassGuid, SvPb::ErosionFilterClassId },
	{ SVDilationFilterClassGuid, SvPb::DilationFilterClassId },
	{ SVOpeningFilterClassGuid, SvPb::OpeningFilterClassId },
	{ SVClosingFilterClassGuid, SvPb::ClosingFilterClassId },
	{ SVCustomFilterClassGuid, SvPb::CustomFilterClassId },
	{ Custom2FilterClassGuid, SvPb::Custom2FilterClassId },
	{ SVRankingFilterClassGuid, SvPb::RankingFilterClassId },
	{ Ranking2FilterClassGuid, SvPb::Ranking2FilterClassId },
	{ SVSkeletonFilterClassGuid, SvPb::SkeletonFilterClassId },
	{ SVThinningFilterClassGuid, SvPb::ThinningFilterClassId },
	{ SVThickeningFilterClassGuid, SvPb::ThickeningFilterClassId },
	{ SVWatershedFilterClassGuid, SvPb::WatershedFilterClassId },
	{ SVEraseBorderBlobsFilterClassGuid, SvPb::EraseBorderBlobsFilterClassId },
	{ SVExtractHolesFilterClassGuid, SvPb::ExtractHolesFilterClassId },
	{ SVFillHolesFilterClassGuid, SvPb::FillHolesFilterClassId },
	{ SVReconstructFilterClassGuid, SvPb::ReconstructFilterClassId },
	{ SVThresholdClassGuid, SvPb::ThresholdClassId },
	{ SVUserMaskOperatorClassGuid, SvPb::UserMaskOperatorClassId },
	{ SVStdImageOperatorListClassGuid, SvPb::StdImageOperatorListClassId },
	{ SVInPlaceImageOperatorListClassGuid, SvPb::InPlaceImageOperatorListClassId },
	{ SVLinearImageOperatorListClassGuid, SvPb::LinearImageOperatorListClassId },
	{ SVEquationClassGuid, SvPb::EquationClassId },
	{ SVConditionalClassGuid, SvPb::ConditionalClassId },
	{ SVMathEquationClassGuid, SvPb::MathEquationClassId },
	{ SVLinearEdgeAProcessingClassGuid, SvPb::LinearEdgeAProcessingClassId },
	{ SVLinearEdgeBProcessingClassGuid, SvPb::LinearEdgeBProcessingClassId },
	{ SVDataBufferClassGuid, SvPb::DataBufferClassId },
	{ SVImageArithmeticClassGuid, SvPb::ImageArithmeticClassId },
	{ SVUpperThresholdEquationClassGuid, SvPb::UpperThresholdEquationClassId },
	{ SVLowerThresholdEquationClassGuid, SvPb::LowerThresholdEquationClassId },
	{ SVAutoThresholdEquationClassGuid, SvPb::AutoThresholdEquationClassId },
	{ SVExternalToolTaskGuid, SvPb::ExternalToolTaskClassId },
	{ SVImageTransformClassGuid, SvPb::ImageTransformClassId },
	{ SVPolarTransformClassGuid, SvPb::PolarTransformClassId },
	{ SVImagePolarTransformClassGuid, SvPb::ImagePolarTransformClassId },
	{ SVEvaluateTranslationXClassGuid, SvPb::EvaluateTranslationXClassId },
	{ SVEvaluateTranslationYClassGuid, SvPb::EvaluateTranslationYClassId },
	{ SVEvaluateRotationXClassGuid, SvPb::EvaluateRotationXClassId },
	{ SVEvaluateRotationYClassGuid, SvPb::EvaluateRotationYClassId },
	{ SVEvaluateRotationAngleClassGuid, SvPb::EvaluateRotationAngleClassId },
	{ SVEvaluateCenterXClassGuid, SvPb::EvaluateCenterXClassId },
	{ SVEvaluateCenterYClassGuid, SvPb::EvaluateCenterYClassId },
	{ SVEvaluateStartRadiusClassGuid, SvPb::EvaluateStartRadiusClassId },
	{ SVEvaluateEndRadiusClassGuid, SvPb::EvaluateEndRadiusClassId },
	{ SVEvaluateStartAngleClassGuid, SvPb::EvaluateStartAngleClassId },
	{ SVEvaluateEndAngleClassGuid, SvPb::EvaluateEndAngleClassId },
	{ SVLUTEquationClassGuid, SvPb::LUTEquationClassId },
	{ SVLUTOperatorClassGuid, SvPb::LUTOperatorClassId },
	{ SVColorThresholdClassGuid, SvPb::ColorThresholdClassId },
	{ ToolSizeAdjustTaskGuid, SvPb::ToolSizeAdjustTaskId },
	{ TableColumnEquationGuid, SvPb::TableColumnEquationId },
	{ TableAddColumnEquationGuid, SvPb::IndexEquationId },
	{ TableFillObjectGuid, SvPb::TableFillObjectId },
	{ TableCopyObjectGuid, SvPb::TableCopyObjectId },
	{ SVRemoteOutputObjectGUID, SvPb::RemoteOutputObjectId },
	{ EQAdjustSizeWidthGuid, SvPb::EQAdjustSizeWidthClassId },
	{ EQAdjustSizeHeightGuid, SvPb::EQAdjustSizeHeightClassId },
	{ EQAdjustSizePositionXGuid, SvPb::EQAdjustSizePositionXClassId },
	{ EQAdjustSizePositionYGuid, SvPb::EQAdjustSizePositionYClassId },
	{ SVShapeMaskHelperClassGuid, SvPb::ShapeMaskHelperClassId },
	{ TableObjectGuid, SvPb::TableClassId },
	{ SVRemoteOutputGroupGUID, SvPb::RemoteOutputGroupClassId },
	{ SVRemoteOutputDataControllerGUID, SvPb::RemoteOutputDataControllerClassId }
};			//This map is used to exchange a class ID with another, can construct another object when read from a configuration

SvPb::ClassIdEnum calcClassId(const _variant_t& rClassIdVariant)
{
	SvPb::ClassIdEnum classId;
	switch (rClassIdVariant.vt)
	{
	case VT_BSTR:
	{
		SVGUID guidId(rClassIdVariant);
		const auto& iter = g_ExchangeClassID.find(guidId);
		if (g_ExchangeClassID.end() != iter)
		{
			classId = iter->second;
		}
		else
		{
			classId = SvPb::NoObjectClassId;
		}
		break;
	}
	case VT_I4:
	case VT_INT:
		classId = static_cast<SvPb::ClassIdEnum>(static_cast<int>(rClassIdVariant));
		break;
	default:
		classId = SvPb::NoObjectClassId;
		break;
	}
	return classId;
}

#pragma region EmbeddedGuids
//const GUID SVStringValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x5f, 0xd, 0xd } };
const GUID SVTaskObjectClassIsObjectValidGuid = { 0xcc5c6f43, 0xc2d7, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVToolSetEnabledObjectGuid = { 0x6bce73cb, 0x4f45, 0x11d3,{ 0xa7, 0xc8, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6c } };
const GUID SVToolEnabledObjectGuid = { 0xd2465f29, 0xc2db, 0x11d2,{ 0x26, 0x13, 0x0, 0x0, 0xf9, 0x1e, 0xd, 0xd } };
const GUID SVToolSelectedForOperatorMoveObjectGuid = { 0xd2465f29, 0xc2dc, 0x11d3,{ 0x26, 0x13, 0x0, 0x0, 0xf9, 0x1e, 0xd, 0xd } };
const GUID SVToolPositionGuid = { 0x4edf916d, 0x4df0, 0x49b2,{ 0x8c, 0xd6, 0x89, 0xf5, 0x2b, 0x1, 0x82, 0x3e } };
const GUID SVToolTimeGuid = { 0x6eaa9a91, 0x40ef, 0x4a0e,{ 0x8b, 0xe3, 0x6e, 0x7f, 0xe4, 0x5, 0x33, 0x3d } };
const GUID SVMinToolSetTimeGuid = { 0x6eaa9a92, 0x40ef, 0x4a0e,{ 0x8b, 0xe3, 0x6e, 0x7f, 0xe4, 0x5, 0x33, 0x3d } };
const GUID SVMaxToolSetTimeGuid = { 0x6eaa9a93, 0x40ef, 0x4a0e,{ 0x8b, 0xe3, 0x6e, 0x7f, 0xe4, 0x5, 0x33, 0x3d } };
const GUID SVResetInspectionCountsGuid = { 0xf30a09d6, 0xbca3, 0x4469,{ 0xaa, 0x9c, 0xa8, 0xc1, 0xbb, 0x4e, 0x7c, 0x9e } };
const GUID SVTriggerCountGuid = { 0xb7b9c748, 0xbfc3, 0x4863,{ 0x85, 0xb6, 0xe3, 0x37, 0x8a, 0x8f, 0xc1, 0x75 } };
const GUID SVPPQIndexGuid = { 0x98f3db70, 0xa2dc, 0x47be,{ 0xa8, 0xbe, 0xe6, 0xa5, 0xe3, 0x82, 0xda, 0x49 } };
const GUID SVTriggerDeltaGuid = { 0x2b989862, 0x7025, 0x4561,{ 0xad, 0x46, 0x6c, 0x47, 0xa4, 0x36, 0xa2, 0xc2 } };
const GUID SVTriggerToCompletionGuid = { 0x293fd9d8, 0x97a8, 0x4567,{ 0xbb, 0x92, 0x48, 0x62, 0x33, 0x77, 0x74, 0x3a } };
const GUID SVTriggerToStartGuid = { 0xaf837120, 0x73b1, 0x4523,{ 0x99, 0xf7, 0x7c, 0x2e, 0x27, 0xe8, 0xe9, 0xfd } };
const GUID SVTriggerToAcquisitionStartGuid = { 0xf186ac6d, 0x7d9e, 0x43e1,{ 0xb1, 0x0c, 0x98, 0x2b, 0x39, 0x3c, 0xc7, 0x67 } };
const GUID SVAcquisitionTimeGuid = { 0x4d5c22f3, 0x0aa7, 0x4661,{ 0xaf, 0x4a, 0x66, 0xd6, 0x3a, 0x9e, 0x89, 0x1c } };
const GUID EnableAuxiliaryExtentsObjectGuid = { 0x952cca85, 0x14e1, 0x4058,{ 0xa3, 0xdf, 0x70, 0x15, 0x55, 0xac, 0xc6, 0xa4 } };
const GUID ObjectIDGuid = { 0x86f77201, 0x85bf, 0x4d4d,{ 0x88, 0x74, 0xe5, 0xd8, 0x44, 0x49, 0x32, 0x6e } };
const GUID TriggerIndexGuid = { 0x82a3e3c4, 0x8e69, 0x42ea,{ 0xb9, 0x85, 0xc7, 0x95, 0x80, 0x3e, 0x1d, 0x77 } };
const GUID InspectedObjectIDGuid = { 0xa84cf91d, 0x696a, 0x4eb9,{ 0x85, 0x00, 0xcc, 0xfc, 0xc2, 0xf9, 0xc5, 0xb9 } };
const GUID InspectedObjectIDLinkGuid = { 0x0ec31b7b, 0x6e9b, 0x42c7,{ 0xa4, 0x1a, 0xfd, 0x0f, 0x09, 0x64, 0x5d, 0xd8 } };
const GUID SVLuminanceValueObjectGuid = { 0xb4cf7402, 0x4454, 0x11d3,{ 0xa7, 0x9b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x76 } };
const GUID SVHistogramValueObjectGuid = { 0xc0af1637, 0x6c46, 0x426e,{ 0x85, 0xdc, 0xc3, 0x65, 0xfd, 0x48, 0xe4, 0x1a } };
const GUID SVHistogramMeanObjectGuid = { 0x7dada15c, 0x4a04, 0x46f9,{ 0x94, 0xce, 0xf8, 0x7c, 0x7f, 0xdf, 0xf0, 0xda } };
const GUID SVHistogramStdDevObjectGuid = { 0xebb625b0, 0x76f2, 0x4892,{ 0xb2, 0xe, 0x26, 0xc1, 0xdf, 0xfe, 0x76, 0x49 } };
const GUID SVHistogramRangeStartObjectGuid = { 0x85e63bb2, 0xb25, 0x4081,{ 0xa0, 0xee, 0xf9, 0x46, 0x1e, 0x6e, 0xaa, 0xa6 } };
const GUID SVHistogramRangeEndObjectGuid = { 0xef6994c3, 0x804e, 0x4d5e,{ 0xb7, 0x21, 0xb0, 0x4, 0x16, 0x33, 0x5f, 0xca } };
const GUID SVHistogramRangeSizeObjectGuid = { 0xa4293e1c, 0xc589, 0x4398,{ 0x86, 0xab, 0x8a, 0x8c, 0xda, 0x74, 0x4d, 0xdc } };
const GUID SVHistogramMaxPixelObjectGuid = { 0x7c08079a, 0x2e0c, 0x4176,{ 0xb3, 0xe1, 0xa3, 0x33, 0xec, 0x85, 0x40, 0x69 } };
const GUID SVHistogramScaleObjectGuid = { 0xf8c60f3a, 0x8140, 0x4ded,{ 0xb6, 0x59, 0xd9, 0x2, 0x33, 0xe0, 0xbe, 0xe4 } };
const GUID SVHistogramMinPixelObjectGuid = { 0x962804c4, 0x73a9, 0x4fd7,{ 0x8a, 0x79, 0xb, 0xa5, 0x18, 0xb0, 0xc0, 0x93 } };
const GUID SVHistogramPixelCountObjectGuid = { 0x582d30eb, 0x8d60, 0x497f,{ 0x8c, 0x56, 0x11, 0x89, 0xc6, 0x27, 0x34, 0x16 } };
const GUID SVHistogramImageObjectGuid = { 0x38f12e7, 0x9d89, 0x4a89,{ 0xb8, 0xdb, 0xfe, 0x43, 0x31, 0xc7, 0x99, 0x56 } };
const  GUID SVHistogramHighPeakObjectGuid = { 0xf5601e58, 0x314d, 0x4100,{ 0x8d, 0x65, 0xdf, 0xae, 0x96, 0x6c, 0xad, 0x84 } };
const  GUID SVHistogramLowPeakObjectGuid = { 0x6a2e1217, 0xdcc7, 0x4612,{ 0x8a, 0x21, 0x2c, 0x26, 0xc, 0x67, 0x27, 0x4 } };
const  GUID SVHistogramValleyObjectGuid = { 0xaa805326, 0x3739, 0x4d74,{ 0x9d, 0xfb, 0x61, 0xa9, 0xa0, 0xdd, 0xe, 0xd9 } };
const  GUID SVHistogramPeakThresholdObjectGuid = { 0xe7abc3b0, 0x428e, 0x4386,{ 0xa2, 0x11, 0xeb, 0x2e, 0xcf, 0x5a, 0x74, 0x6a } };
const  GUID SVHistogramDefaultPeakObjectGuid = { 0xc9557a32, 0x787b, 0x46c6,{ 0x86, 0xbc, 0x9, 0x40, 0x16, 0x6b, 0xd3, 0xf7 } };
const GUID SVHistogramAccumulateObjectGuid = { 0x491258a9, 0x220a, 0x4d74,{ 0xa2, 0x83, 0xa4, 0xec, 0x45, 0x7e, 0x3b, 0x69 } };
const GUID SVHistogramMinPeakHeightObjectGuid = { 0xf92115ff, 0x3f48, 0x4a78,{ 0x92, 0x5e, 0xe3, 0xe1, 0xd4, 0x22, 0xfd, 0x15 } };
const GUID SVHistogramValleyLowerBoundObjectGuid = { 0x3f6e5d37, 0x1587, 0x4adc,{ 0x99, 0x78, 0x78, 0x9f, 0xb9, 0x29, 0x75, 0xce } };
const GUID SVHistogramValleyUpperBoundObjectGuid = { 0x7fb01ada, 0xe016, 0x4073,{ 0x90, 0x7c, 0xb2, 0x26, 0xf1, 0xab, 0xf5, 0x5e } };
const GUID SVHistogramValleyDefaultObjectGuid = { 0x74d8bc6d, 0xbbe2, 0x440b,{ 0x8e, 0xce, 0xd9, 0x96, 0x34, 0xc2, 0x7d, 0xe0 } };
const GUID SVHistogramFixedHeightValueObjectGuid = { 0xb0956540, 0x4400, 0x4791,{ 0x98, 0x32, 0x79, 0x15, 0x61, 0x9c, 0xd1, 0x3e } };
const GUID SVHistogramDynamicHeightObjectGuid = { 0xde470817, 0x2bc4, 0x44a6,{ 0x97, 0x28, 0x66, 0xe9, 0xb2, 0x27, 0x48, 0x5c } };
const GUID SVCalcStdDevObjectGuid = { 0x33bd2165, 0xcdc8, 0x11d3,{ 0xa8, 0x78, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVPixelColorIndexObjectGuid = { 0x6db49915, 0x4c0a, 0x11d3,{ 0xa7, 0xc4, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVPixelCountObjectGuid = { 0x6db49916, 0x4c0a, 0x11d3,{ 0xa7, 0xc4, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVBlobEnabledFeaturesObjectGuid = { 0x86dcf5d8, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVNbrOfBlobsObjectGuid = { 0x86dcf5d7, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVMaxBlobDataArraySizeObjectGuid = { 0x4693754f, 0xe20b, 0x41a0,{ 0x80, 0xbd, 0xa7, 0x9d, 0xa0, 0x9d, 0xd4, 0x50 } };
const GUID SVSortFeatureObjectGuid = { 0x86dcf5d6, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVNbrOfBlobsFoundObjectGuid = { 0x86dcf5d5, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVSortAscendingObjectGuid = { 0x3379991f, 0x7b1e, 0x11d3,{ 0xa8, 0x1a, 0x0, 0x10, 0x6f, 0x00, 0x0c, 0x7d } };
const GUID SVExcludeFailedObjectGuid = { 0x58d11817, 0xfc7, 0x11d4,{ 0xa8, 0xb6, 0x0, 0x10, 0x6f, 0x02, 0x17, 0x42 } };
const GUID SVBlobColorGuid = { 0xf350a652, 0x1b8a, 0x4c95,{ 0x8f, 0x7d, 0x9d, 0x8d, 0x54, 0x37, 0xc1, 0x39 } };
const GUID SVBlobUseFillGuid = { 0x4a6be419, 0xeda6, 0x4805,{ 0x95, 0x32, 0x37, 0x56, 0x98, 0xaf, 0x2, 0xed } };
const GUID SVBlobFillColorGuid = { 0xd2a9e466, 0xf4bb, 0x46c3,{ 0xbb, 0x7c, 0x62, 0xee, 0x1c, 0xf5, 0x18, 0xd6 } };
const GUID SVBlobFillTypeGuid = { 0x8b4a4d1, 0xdcda, 0x4c1c,{ 0x95, 0x60, 0x1b, 0xed, 0xa4, 0x61, 0x27, 0xb6 } };
const GUID SVStatMinObjectGuid = { 0x86dcf5f3, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatMaxObjectGuid = { 0x86dcf5f4, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatAverageObjectGuid = { 0x86dcf5f5, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatStdDevObjectGuid = { 0x86dcf5f6, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatVarianceObjectGuid = { 0x86dcf5f7, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatTestValueObjectGuid = { 0x86dcf5f9, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatNbrOfOccurancesObjectGuid = { 0x86dcf5fa, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatPercentOfOccurancesObjectGuid = { 0x86dcf5fb, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatEnabledFeaturesObjectGuid = { 0x86dcf5fc, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatNumberOfValidSamplesObjectGuid = { 0x990628a0, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatVariableToMonitorObjectGuid = { 0xf5a1634f, 0x7cbf, 0x11d3,{ 0xa8, 0x1c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVStatVariableNameToMonitorObjectGuid = { 0x755753f6, 0x9037, 0x41d4,{ 0x86, 0x30, 0x74, 0x94, 0x28, 0x2d, 0x5b, 0x6f } };
const GUID SVUpperThresholdObjectGuid = { 0x86dcf3d9, 0xc2dd, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVLowerThresholdObjectGuid = { 0x86dcf3d9, 0xc2dd, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc1, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVThresholdActivateObjectGuid = { 0x86dcf3d9, 0xc2dd, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc2, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVUpperThresholdActivateObjectGuid = { 0x86dcf3d9, 0xc2dd, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc3, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVLowerThresholdActivateObjectGuid = { 0x86dcf3d9, 0xc2dd, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc4, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVAutoThresholdObjectGuid = { 0x86dcf3d9, 0xc2dd, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc5, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVBlackBackgroundObjectGuid = { 0x86dcf3d9, 0xc2dd, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc6, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVAutoThresholdMultiplierObjectGuid = { 0x86dcf3d9, 0xc2dd, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc7, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID RingBuffer_FlagOfOutputImagesGuid = { 0x6986da1b, 0xf9a1, 0x4613,{ 0x9b, 0xfa, 0x80, 0xfd, 0xb2, 0x93, 0x6f, 0xad } };
const GUID FilterKernelGuid = { 0x12e2f10e, 0x3644, 0x46c7,{ 0x9c, 0x81, 0x3a, 0x25, 0xd8, 0xa7, 0x98, 0x8b } };
//Identical, use only one.
//const GUID SVRankingFilterRankingWidthGuid = { 0x665b5b34, 0x19e8, 0x4d71,{ 0x87, 0x52, 0x84, 0x30, 0x78, 0x6, 0xd0, 0xcd } };
const GUID SVCustomFilterKernelWidthGuid = { 0x665b5b34, 0x19e8, 0x4d71,{ 0x87, 0x52, 0x84, 0x30, 0x78, 0x6, 0xd0, 0xcd } };
//const GUID SVRankingFilterRankingHeightGuid = { 0x665b5b35, 0x19e8, 0x4d71,{ 0x87, 0x52, 0x84, 0x30, 0x78, 0x6, 0xd0, 0xcd } };
const GUID SVCustomFilterKernelHeightGuid = { 0x665b5b35, 0x19e8, 0x4d71,{ 0x87, 0x52, 0x84, 0x30, 0x78, 0x6, 0xd0, 0xcd } };
//const GUID SVRankingFilterRankingRankGuid = { 0x665b5b36, 0x19e8, 0x4d71,{ 0x87, 0x52, 0x84, 0x30, 0x78, 0x6, 0xd0, 0xcd } };
const GUID SVCustomFilterClippingGuid = { 0x665b5b36, 0x19e8, 0x4d71,{ 0x87, 0x52, 0x84, 0x30, 0x78, 0x6, 0xd0, 0xcd } };
const GUID SVCustomFilterAbsoluteGuid = { 0x665b5b37, 0x19e8, 0x4d71,{ 0x87, 0x52, 0x84, 0x30, 0x78, 0x6, 0xd0, 0xcd } };
const GUID SVCustomFilterTransformGuid = { 0x665b5b38, 0x19e8, 0x4d71,{ 0x87, 0x52, 0x84, 0x30, 0x78, 0x6, 0xd0, 0xcd } };
const GUID RingBuffer_DepthGuid = { 0xaa3c2036, 0xfd9e, 0x4d06,{ 0xb6, 0xfa, 0x3f, 0xd7, 0xae, 0xd6, 0x88, 0x72 } };
const GUID RingBufferLink_DepthGuid = { 0xaa3c2036, 0xfd9e, 0x4d06,{ 0xb6, 0xfa, 0x3f, 0xd7, 0xae, 0xd6, 0x88, 0x73 } };
const GUID SVRangeClassFailHighObjectGuid = { 0x86dcf3d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVRangeClassFailLowObjectGuid = { 0x86dcf3d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc1, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVRangeClassWarnHighObjectGuid = { 0x86dcf3d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc2, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVRangeClassWarnLowObjectGuid = { 0x86dcf3d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc3, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVRangeClassFailHighIndirectObjectGuid = { 0xf6e663d2, 0xd1b4, 0x4d57,{ 0xb9, 0xec, 0x32, 0x7f, 0x35, 0xad, 0x24, 0x4d } };
const GUID SVRangeClassFailLowIndirectObjectGuid = { 0xfdcaa076, 0xa9ec, 0x46c8,{ 0x89, 0x31, 0xe7, 0x49, 0x7c, 0xec, 0x80, 0x82 } };
const GUID SVRangeClassWarnHighIndirectObjectGuid = { 0xf0ded566, 0xb19f, 0x4dba,{ 0x81, 0x8d, 0xd1, 0xcd, 0xc4, 0x13, 0xca, 0x56 } };
const GUID SVRangeClassWarnLowIndirectObjectGuid = { 0x3a942a77, 0x1e01, 0x4bfb,{ 0xb0, 0x1, 0x53, 0x25, 0x58, 0x18, 0xd0, 0xd9 } };
const GUID SVOCVPerformOCRGuid = { 0x70d8f91c, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVMatchLineNumberGuid = { 0x70d8f91e, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVHighestMatchScoreGuid = { 0x70d8f920, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVLowestMatchScoreGuid = { 0x70d8f921, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVAverageMatchScoreGuid = { 0x70d8f922, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVFontFileNameGuid = { 0x70d8f923, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVMatchStringFileNameGuid = { 0x70d8f924, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVConstraintsFileNameGuid = { 0x70d8f925, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVControlsFileNameGuid = { 0x70d8f926, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVUseMatchFileGuid = { 0x70d8f927, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVMatchStringGuid = { 0x70d8f928, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVFoundStringGuid = { 0x70d8f929, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVCharacterValueGuid = { 0x70d8f92b, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVExtentLeftGuid = { 0x70d8f92c, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVExtentTopGuid = { 0x70d8f92d, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVExtentWidthGuid = { 0x70d8f92e, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVExtentHeightGuid = { 0x70d8f92f, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVMatchScoreGuid = { 0x70d8f930, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVArchiveFilePathObjectGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc7, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVArchiveImageGuidsObjectGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc8, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVArchiveImageFileRootPathGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc9, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVArchiveResultGuidsObjectGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xca, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVArchiveAppendArchiveFileGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xcb, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVArchiveStopAtMaxImagesGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xcc, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVArchiveUseTriggerCountForImagesGuid = { 0x5cc06831, 0xc394, 0x4ac2,{ 0xb4, 0x55, 0xff, 0x4, 0xe6, 0xc7, 0x8f, 0x39 } };
const GUID SVArchiveMaxImagesCountGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xcd, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVArchiveMethodGuid = { 0x715e7129, 0xba42, 0x47fa,{ 0xa3, 0x2e, 0xf2, 0xce, 0xc6, 0x3d, 0xdd, 0xf2 } };
const GUID SVArchiveUseHeadersGUID = { 0x9e5bb788, 0x8ffb, 0x4182,{ 0x88, 0x50, 0x6a, 0x5d, 0x99, 0xf5, 0x9d, 0x12 } };
const GUID SVArchiveHeaderLabelGUID = { 0x9e5bb788, 0x8ffb, 0x4182,{ 0x88, 0x50, 0x6a, 0x5d, 0x99, 0xf5, 0x9d, 0x13 } };
const GUID SVArchiveHeaderObjectGUID = { 0x9e5bb788, 0x8ffb, 0x4182,{ 0x88, 0x50, 0x6a, 0x5d, 0x99, 0xf5, 0x9d, 0x14 } };
const GUID SVArchiveResultNamesObjectGuid = { 0xd20cc846, 0xb0dc, 0x4b2f,{ 0x81, 0x69, 0x4f, 0x88, 0x28, 0x9c, 0xe0, 0xb } };
const GUID SVArchiveImageNamesObjectGuid = { 0xfa911dab, 0x487e, 0x4297,{ 0xa6, 0xb, 0x42, 0xe7, 0x41, 0x86, 0x4e, 0x82 } };
const GUID SVEquationEnabledObjectGuid = { 0x5dd374e8, 0x4f36, 0x11d3,{ 0xa7, 0xc8, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6c } };
const GUID SVConditionalResultObjectGuid = { 0x5dd374e9, 0x4f36, 0x11d3,{ 0xa7, 0xc8, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6c } };
const GUID SVMathEquationResultObjectGuid = { 0x4cdb299c, 0x5bc0, 0x11d3,{ 0xa7, 0xdd, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLinearEdgesClassGuid = { 0x12ee01a8, 0xfe83, 0x4ad3,{ 0xaf, 0x3f, 0x57, 0x2f, 0x9, 0xe7, 0xbf, 0xa7 } };
const GUID SVDPEdgeAObjectGuid = { 0xd69f53c3, 0x93a, 0x42d5,{ 0x9f, 0x36, 0xc9, 0xe0, 0xf, 0x4b, 0xbd, 0x98 } };
const GUID SVDPEdgeBObjectGuid = { 0xec0a09c3, 0xf13d, 0x4243,{ 0xb2, 0x3, 0xd, 0x1b, 0x34, 0xc6, 0x76, 0xd5 } };
const GUID SVDPCenterObjectGuid = { 0x7cfcdc54, 0xd13d, 0x469a,{ 0x9c, 0xa8, 0x67, 0x41, 0x15, 0x24, 0x45, 0xc6 } };
const GUID SVDWidthObjectGuid = { 0x131e087d, 0xcfe0, 0x47a4,{ 0xa9, 0xa3, 0x6c, 0x3b, 0x1a, 0xb0, 0xf4, 0x6b } };
const GUID SVLinearDistanceEdgeAObjectGuid = { 0xd69f53cf, 0x93f, 0x42df,{ 0x9f, 0x36, 0xc9, 0xe0, 0xf, 0x4b, 0xbd, 0x98 } };
const GUID SVLinearDistanceEdgeBObjectGuid = { 0xd69f53ce, 0x93e, 0x42de,{ 0x9f, 0x36, 0xc9, 0xe0, 0xf, 0x4b, 0xbd, 0x98 } };
const GUID SVXObjectGuid = { 0x131b613e, 0x5b2d, 0x11d3,{ 0xa8, 0x58, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVDXObjectGuid = { 0xda0d45a9, 0xa74c, 0x40b5,{ 0xbd, 0xdd, 0x85, 0x1e, 0x66, 0xa8, 0xd1, 0x66 } };
const GUID SVYObjectGuid = { 0x131b613f, 0x5b2d, 0x11d3,{ 0xa8, 0x58, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVDYObjectGuid = { 0x63e792ba, 0x23d1, 0x4c9e,{ 0xb7, 0x42, 0x35, 0xeb, 0x77, 0x41, 0x44, 0x3e } };
const GUID SVValueObjectGuid = { 0x131b6140, 0x5b2d, 0x11d3,{ 0xa8, 0x58, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVFailedObjectGuid = { 0xbcbad6b9, 0x5e2a, 0x11d3,{ 0xa7, 0xe0, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVWarnedObjectGuid = { 0xbcbad6ba, 0x5e2a, 0x11d3,{ 0xa7, 0xe0, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVPassedObjectGuid = { 0xbcbad6bb, 0x5e2a, 0x11d3,{ 0xa7, 0xe0, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVExplicitFailedObjectGuid = { 0x626e3371, 0x71cd, 0x11d3,{ 0xa8, 0x7f, 0x0, 0x13, 0x6f, 0x0, 0xf1, 0x3 } };
const GUID SVPassedCountObjectGuid = { 0x471d545a, 0x720b, 0x11d3,{ 0xa8, 0x80, 0x0, 0x20, 0x3, 0x0, 0x44, 0x4 } };
const GUID SVFailedCountObjectGuid = { 0x471d5463, 0x720b, 0x11d3,{ 0xa8, 0x80, 0x0, 0x8e, 0x0, 0x88, 0x0, 0x45 } };
const GUID SVWarnedCountObjectGuid = { 0x471d5470, 0x720b, 0x11d3,{ 0xa8, 0x80, 0x0, 0x3a, 0x4, 0x10, 0x0, 0x90 } };
const GUID SVEnabledCountObjectGuid = { 0x471d5476, 0x720b, 0x11d3,{ 0xa8, 0x80, 0x0, 0x13, 0x2, 0x0, 0x34, 0x0 } };
const GUID SVProcessedCountObjectGuid = { 0x471d5481, 0x720b, 0x11d3,{ 0xa8, 0x80, 0x0, 0x9, 0x1f, 0x0, 0x3e, 0x0 } };
const GUID SVBlackPixelObjectGuid = { 0x52463607, 0x5f2e, 0x11d3,{ 0xa8, 0x5d, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVWhitePixelObjectGuid = { 0x52463608, 0x5f2e, 0x11d3,{ 0xa8, 0x5d, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVEdgeCountObjectGuid = { 0x52463609, 0x5f2e, 0x11d3,{ 0xa8, 0x5d, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVColorObjectGuid = { 0x3ee6a9b3, 0x601c, 0x11d3,{ 0xa8, 0x5e, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVStatusObjectGuid = { 0x3ee6a9b4, 0x601c, 0x11d3,{ 0xa8, 0x5e, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVRotationAngleObjectGuid = { 0x2659f65c, 0x6653, 0x11d4,{ 0xa8, 0x69, 0x33, 0x0, 0x11, 0x0, 0x79, 0xbb } };
const GUID SVRotationPointXObjectGuid = { 0x2659f65c, 0x6653, 0x11d5,{ 0xa8, 0x69, 0x33, 0x0, 0x11, 0x0, 0x79, 0xbb } };
const GUID SVRotationPointYObjectGuid = { 0x2659f65c, 0x6653, 0x11d6,{ 0xa8, 0x69, 0x33, 0x0, 0x11, 0x0, 0x79, 0xbb } };
const GUID SVProfileOrientationGuid = { 0xec2ce123, 0x69d1, 0x4e47,{ 0x80, 0xc1, 0xd8, 0xbc, 0x51, 0xb3, 0x2a, 0x13 } };
const GUID SVLinearToolUseRotationGuid = { 0xbec1712b, 0xfe4b, 0x4dbd,{ 0xbc, 0x3a, 0xc9, 0x3f, 0xc1, 0x72, 0xf7, 0x9 } };
const GUID SVTranslationXOffsetObjectGuid = { 0xd12385ff, 0x8c33, 0x4ac0,{ 0xae, 0x9f, 0x9e, 0x3f, 0xca, 0x52, 0x74, 0x3d } };
const GUID SVTranslationYOffsetObjectGuid = { 0x574e5f9e, 0x34a, 0x41f8,{ 0x82, 0x9c, 0xc3, 0x4c, 0xfd, 0x4c, 0x4e, 0xbc } };
const GUID SVWarpTypeObjectGuid = { 0xc8ecabb1, 0x730f, 0x43c7,{ 0x86, 0x5, 0x59, 0xba, 0xff, 0x98, 0x42, 0xcd } };
const GUID SVWarpAngleObjectGuid = { 0x4b3f5c91, 0x7e77, 0x4655,{ 0x8e, 0xa4, 0x7e, 0x9e, 0x93, 0xc9, 0x13, 0x3a } };
const GUID SVEnableOffsetAObjectGuid = { 0x5cc0b7e8, 0x6964, 0x11d3,{ 0xa8, 0x6f, 0x0, 0xbf, 0x6f, 0xfc, 0x0, 0xd5 } };
const GUID SVOffsetAPointObjectGuid = { 0x5cc0b7f3, 0x6964, 0x11d3,{ 0xa8, 0x7f, 0xdf, 0xa9, 0x41, 0x53, 0x0, 0x99 } };
const GUID SVEnableOffsetBObjectGuid = { 0x5cc0b976, 0x6964, 0x11d3,{ 0xa8, 0x6f, 0x0, 0xf1, 0x0, 0x0, 0x87, 0x87 } };
const GUID SVOffsetBPointObjectGuid = { 0x5cc0ba44, 0x6964, 0x11d3,{ 0xa8, 0x6f, 0x0, 0x45, 0x0, 0xf9, 0x0, 0x16 } };
const GUID SVArithmeticOperatorObjectGuid = { 0x5cc0ba50, 0x6964, 0x11d3,{ 0xa8, 0x6f, 0x0, 0x11, 0x0, 0x15, 0x32, 0x63 } };
const GUID SVMaskEnabledObjectGuid = { 0xe49f4ef, 0x6b93, 0x11d3,{ 0xa8, 0x0, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVMaskUseImageMaskGuid = { 0x7c7866bd, 0xdd2f, 0x4729,{ 0x9c, 0x12, 0xb4, 0xd0, 0xec, 0x39, 0x34, 0xb2 } };
const GUID SVMaskOperatorGuid = { 0xe4e4792f, 0x8b1, 0x4f91,{ 0xa3, 0xf6, 0xc0, 0x3, 0x53, 0xb7, 0xfa, 0x38 } };
const GUID SVMaskFillAreaGuid = { 0xe8e87d9e, 0xed27, 0x4211,{ 0xb1, 0x8, 0xc0, 0x5d, 0x31, 0x35, 0x48, 0xa8 } };
const GUID SVMaskFillColorGuid = { 0x3c428c56, 0xe769, 0x4e1a,{ 0x8d, 0x46, 0x75, 0x2d, 0x30, 0x35, 0x9d, 0x38 } };
const GUID SVShapeMaskTypeGuid = { 0x63ff94fc, 0xdf86, 0x407e,{ 0xad, 0x65, 0xca, 0xb4, 0xd7, 0xda, 0xd8, 0x75 } };
const GUID SVShapeMaskMaskAreaGuid = { 0x8c7ec623, 0xf99c, 0x4aa0,{ 0xb3, 0x5f, 0xbf, 0x74, 0x9e, 0xf1, 0xdc, 0xe9 } };
const GUID SVShapeMaskPropertyCenterXGuid = { 0x52d5aa68, 0x9cb2, 0x47a4,{ 0xb8, 0x80, 0x84, 0x52, 0x4b, 0x3c, 0x7, 0x3b } };
const GUID SVShapeMaskPropertyCenterYGuid = { 0x84f30631, 0x413a, 0x4e1f,{ 0x83, 0x63, 0x3e, 0x76, 0x5b, 0x77, 0xde, 0x90 } };
const GUID SVShapeMaskPropertyWidthGuid = { 0x1a2c7e63, 0x2247, 0x4162,{ 0x8a, 0x64, 0xf9, 0x9b, 0xa6, 0x35, 0x48, 0x20 } };
const GUID SVShapeMaskPropertyHeightGuid = { 0x17f09a8e, 0x9ee7, 0x428f,{ 0x8d, 0x9b, 0xf3, 0x43, 0x53, 0xf3, 0x4a, 0x42 } };
const GUID SVShapeMaskPropertySideThicknessGuid = { 0x5e98ec9, 0x58db, 0x42eb,{ 0xac, 0x11, 0xd3, 0x8f, 0xc1, 0xa1, 0x82, 0x3 } };
const GUID SVShapeMaskPropertyTopBottomThicknessGuid = { 0x7c4d2da8, 0xdb44, 0x4629,{ 0xbc, 0xf7, 0xe5, 0xf0, 0xa2, 0x7b, 0xf5, 0x51 } };
const GUID SVShapeMaskPropertyOffsetGuid = { 0x9aa800e0, 0xa2e0, 0x4d93,{ 0x89, 0x17, 0x75, 0x3b, 0xb0, 0x19, 0xd1, 0xbe } };
const GUID SVShapeMaskPropertySymmetryOrientationGuid = { 0x1ab73eb6, 0x2d1a, 0x43b6,{ 0x9c, 0xaf, 0xb1, 0x65, 0xc, 0xb0, 0xda, 0x3e } };
const GUID SVShapeMaskAutoResizeGuid = { 0x4845ca1f, 0x40ab, 0x4850,{ 0x8b, 0x3e, 0x9, 0xb7, 0x98, 0x8e, 0x1, 0xa8 } };
const GUID SVPathNameObjectGuid = { 0x471d5442, 0x720b, 0x11d3,{ 0xa8, 0x80, 0x0, 0x20, 0x11, 0x6d, 0x1a, 0x13 } };
const GUID SVContinuousReloadObjectGuid = { 0x471d5450, 0x720b, 0x11d3,{ 0xa8, 0x81, 0x4, 0x0, 0x25, 0xd3, 0x0, 0x52 } };
const GUID SVBarCodeObjectGuid = { 0xf52e8df7, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVRegExpressionObjectGuid = { 0xf52e8df9, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCTypeObjectGuid = { 0xf52e8dfc, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCOrientationObjectGuid = { 0xf52e8dfd, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCSkewNegativeObjectGuid = { 0xf52e8dfe, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCSkewPositiveObjectGuid = { 0xf52e8dff, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCCellMinSizeObjectGuid = { 0xf52e8e00, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCCellMaxSizeObjectGuid = { 0xf52e8e01, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCCellNumberXObjectGuid = { 0xf52e8e02, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCCellNumberYObjectGuid = { 0xf52e8e03, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCSpeedObjectGuid = { 0xf52e8e04, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCThresholdObjectGuid = { 0xf52e8e05, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCStringSizeObjectGuid = { 0xf52e8e06, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCErrorCorrectionObjectGuid = { 0xf52e8e07, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCEncodingObjectGuid = { 0xf52e8e08, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCForegroundColorObjectGuid = { 0xf52e8e09, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCSaveStringInFileObjectGuid = { 0xf52e8e0a, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCStringFileNameObjectGuid = { 0xf52e8e0b, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBCWarnOnFailedReadObjectGuid = { 0xeaf2bf7e, 0xf642, 0x4606,{ 0xa5, 0xdb, 0x29, 0x5a, 0xe8, 0xd4, 0xc6, 0xfc } };
const GUID SVWatershedFilterMinVariationGuid = { 0x2ae1a266, 0x9f03, 0x44db,{ 0xb3, 0x21, 0xf4, 0xe2, 0x84, 0x70, 0xf5, 0xd6 } };
const GUID SVWatershedFilterControlFlagGuid = { 0xd98fa638, 0x51d5, 0x4fe7,{ 0xa5, 0x56, 0x5e, 0x15, 0x76, 0xd2, 0xf3, 0x15 } };
const GUID SVWatershedFilterUseMarkerGuid = { 0xba1626dd, 0xb2a5, 0x46ca,{ 0x81, 0x37, 0xec, 0x1a, 0xea, 0xcc, 0x23, 0xbc } };
const GUID SVThickeningFilterItterationsGuid = { 0xd285e8e0, 0x71aa, 0x4887,{ 0x8a, 0xbe, 0x9d, 0x76, 0x8e, 0x81, 0x40, 0xac } };
const GUID SVThickeningFilterGrayOnGuid = { 0x57c976e3, 0xd41f, 0x4928,{ 0x8b, 0xbd, 0x9b, 0x8a, 0x64, 0xfd, 0xd3, 0x7e } };
const GUID SVThinningFilterItterationsGuid = { 0x4f941e39, 0xac97, 0x44a8,{ 0xba, 0xd1, 0x38, 0x22, 0xb4, 0xdc, 0xc, 0x97 } };
const GUID SVGrayOnGuid = { 0x71848fc, 0xdafb, 0x4c21,{ 0xa1, 0x48, 0xd1, 0xb7, 0xe4, 0x19, 0xd, 0xb } };
const GUID SVBCUseSingleMatchStringGuid = { 0xa8a53dad, 0x9fbe, 0x486e,{ 0x87, 0xa3, 0xc1, 0xa7, 0x21, 0x7a, 0x1c, 0x12 } };
const GUID SVBCUseMatchStringFileGuid = { 0xfcba3ef6, 0xcf20, 0x40f8,{ 0xb7, 0xaf, 0x9, 0x5b, 0x23, 0xc2, 0xbb, 0x13 } };
const GUID SVBCMatchStringFileNameObjectGuid = { 0x72b745dc, 0x92a0, 0x40d8,{ 0x98, 0x35, 0x36, 0x88, 0x9a, 0x46, 0x71, 0xab } };
const GUID SVBCMatchStringLineGuid = { 0x368324a6, 0x4295, 0x4401,{ 0x99, 0x99, 0xdc, 0xc3, 0xe4, 0xb8, 0xd2, 0x7e } };
const GUID SVBCMatchScoreGuid = { 0x8695a8bf, 0xb45e, 0x4123,{ 0xb9, 0xc7, 0x63, 0x82, 0x1c, 0x91, 0x24, 0x9 } };
const GUID SVBCTimeoutGuid = { 0x3f8282a1, 0x42c7, 0x4322,{ 0x82, 0x47, 0x56, 0x1f, 0x14, 0x2e, 0x62, 0x39 } };
const GUID SVBCUnevenGridGuid = { 0xbabb4fd2, 0xee2e, 0x4662,{ 0x84, 0xa2, 0x76, 0x68, 0xb8, 0xc1, 0x16, 0xda } };
const GUID SVUpperThresholdEquationResultObjectGuid = { 0x4598ab1c, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0xe3, 0x0, 0x22, 0x0, 0x43, 0x1 } };
const GUID SVLowerThresholdEquationResultObjectGuid = { 0x4598ab4c, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0x0, 0x94, 0x1, 0xee, 0xd1, 0x0 } };
const GUID SVAutoThresholdEquationResultObjectGuid = { 0x4598ab6a, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0x0, 0x26, 0x77, 0xea, 0x1a, 0x0 } };
const GUID SVUseExternalATMObjectGuid = { 0x4598ab7a, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0x30, 0x8, 0x0, 0x21, 0x0, 0x16 } };
const GUID SVUseExternalLTObjectGuid = { 0x4598ab8a, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0x69, 0x0, 0x54, 0x0, 0x2, 0x55 } };
const GUID SVUseExternalUTObjectGuid = { 0x4598ab9a, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0x1e, 0x24, 0x0, 0x0, 0x77, 0x0 } };
const GUID SVRegressionTestModeGuid = { 0xee25c175, 0x8d6c, 0x11d3,{ 0xa7, 0xf4, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVUseLowerThresholdSelectableObjectGuid = { 0xf0cdab37, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseLowerThresholdMaxMinusPercentDiffObjectGuid = { 0xf0cdab38, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseLowerThresholdMaxMinusOffsetObjectGuid = { 0xf0cdab39, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseLowerThresholdMinPlusOffsetObjectGuid = { 0xf0cdab3a, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLowerThresholdMaxMinusPercentDiffObjectGuid = { 0xf0cdab3b, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLowerThresholdMaxMinusOffsetObjectGuid = { 0xf0cdab3c, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLowerThresholdMinPlusOffsetObjectGuid = { 0xf0cdab3d, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseUpperThresholdSelectableObjectGuid = { 0xf0cdab3e, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseUpperThresholdMaxMinusPercentDiffObjectGuid = { 0xf0cdab3f, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseUpperThresholdMaxMinusOffsetObjectGuid = { 0xf0cdab40, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseUpperThresholdMinPlusOffsetObjectGuid = { 0xf0cdab41, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUpperThresholdMaxMinusPercentDiffObjectGuid = { 0xf0cdab42, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUpperThresholdMaxMinusOffsetObjectGuid = { 0xf0cdab43, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUpperThresholdMinPlusOffsetObjectGuid = { 0xf0cdab44, 0xd4f1, 0x11d3,{ 0xa8, 0x80, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseLowerThresholdSelectableBObjectGuid = { 0xa4f8321b, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseLowerThresholdMaxMinusPercentDiffBObjectGuid = { 0xa4f8321c, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseLowerThresholdMaxMinusOffsetBObjectGuid = { 0xa4f8321d, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseLowerThresholdMinPlusOffsetBObjectGuid = { 0xa4f8321e, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLowerThresholdMaxMinusPercentDiffBObjectGuid = { 0xa4f8321f, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLowerThresholdMaxMinusOffsetBObjectGuid = { 0xa4f83220, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLowerThresholdMinPlusOffsetBObjectGuid = { 0xa4f83221, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseUpperThresholdSelectableBObjectGuid = { 0xa4f83222, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseUpperThresholdMaxMinusPercentDiffBObjectGuid = { 0xa4f83223, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseUpperThresholdMaxMinusOffsetBObjectGuid = { 0xa4f83224, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseUpperThresholdMinPlusOffsetBObjectGuid = { 0xa4f83225, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUpperThresholdMaxMinusPercentDiffBObjectGuid = { 0xa4f83226, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUpperThresholdMaxMinusOffsetBObjectGuid = { 0xa4f83227, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUpperThresholdMinPlusOffsetBObjectGuid = { 0xa4f83228, 0xd98f, 0x11d3,{ 0xa8, 0x86, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLinearThresholdMaxObjectGuid = { 0xe313d2f3, 0xd5b2, 0x11d3,{ 0xa8, 0x81, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLinearThresholdMinObjectGuid = { 0xe313d2f4, 0xd5b2, 0x11d3,{ 0xa8, 0x81, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLinearThresholdDeltaObjectGuid = { 0xac111952, 0x8847, 0x4cd7,{ 0x93, 0xf8, 0x7f, 0x11, 0x6d, 0xf2, 0xcc, 0x26 } };
const GUID SVShiftToolModeGuid = { 0xd135859a, 0x7fab, 0x4994,{ 0x9a, 0xe8, 0x96, 0x8d, 0xe2, 0x20, 0xac, 0x2d } };
const GUID SVShiftToolReferenceXObjectGuid = { 0xdcf5dbca, 0x2ac8, 0x405a,{ 0x8d, 0x48, 0xe3, 0x90, 0x13, 0x33, 0x4d, 0xab } };
const GUID SVShiftToolReferenceYObjectGuid = { 0x194c18b1, 0xfeaa, 0x48d8,{ 0x86, 0xba, 0x37, 0xc3, 0x6, 0xf8, 0xb1, 0xd } };
const GUID SVShiftToolEnableSourceImageExtentsGuid = { 0x5de3c9ac, 0xec35, 0x4876,{ 0x98, 0xee, 0x9c, 0x47, 0x73, 0x8, 0x97, 0x50 } };
const GUID SVImageTransformDisplacementXGuid = { 0xcdfe939d, 0x91ba, 0x4bd4,{ 0x8c, 0xcb, 0x33, 0x1c, 0xd8, 0xff, 0x85, 0xe7 } };
const GUID SVImageTransformDisplacementYGuid = { 0x6c9c89fb, 0xf133, 0x449b,{ 0xa6, 0xa7, 0xdc, 0x74, 0x38, 0xba, 0xf8, 0xe5 } };
const GUID SVTopResultObjectGuid = { 0xc9c1536e, 0xcafc, 0x4fb0,{ 0x99, 0xd7, 0xcf, 0xd1, 0x77, 0xff, 0xed, 0x60 } };
const GUID SVLeftResultObjectGuid = { 0xe5b7a077, 0xa9bb, 0x4af7,{ 0x9f, 0x8d, 0xc0, 0xc6, 0xc8, 0x32, 0xac, 0x64 } };
const GUID SVImageTransformSourceXGuid = { 0xdfc68329, 0x9660, 0x4f39,{ 0x9c, 0xee, 0xef, 0x41, 0xe, 0xa8, 0x3d, 0xa6 } };
const GUID SVImageTransformSourceYGuid = { 0xfacbd70f, 0x820e, 0x43c7,{ 0x90, 0xa3, 0x3c, 0xdb, 0xb7, 0x8b, 0x84, 0x39 } };
const GUID SVOutputEvaluateTranslationXResultObjectGuid = { 0x62df95b0, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVOutputEvaluateTranslationYResultObjectGuid = { 0x62df95b1, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVOutputEvaluateRotationXResultObjectGuid = { 0x62df95b2, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVOutputEvaluateRotationYResultObjectGuid = { 0x62df95b3, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVOutputEvaluateRotationAngleResultObjectGuid = { 0x62df95b4, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVPerformTranslationObjectGuid = { 0x62df95ae, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVTranslationXObjectGuid = { 0xcfaf118a, 0xe6e9, 0x466e,{ 0x90, 0x38, 0x8c, 0xc5, 0x99, 0x46, 0xa1, 0x8e } };
const GUID SVTranslationYObjectGuid = { 0xef30f643, 0x45a5, 0x41f8,{ 0x93, 0x30, 0x2c, 0xea, 0xda, 0x59, 0x5, 0xdc } };
const GUID SVPerformRotationObjectGuid = { 0x62df95af, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLearnedTranslationXObjectGuid = { 0xbdf6dc5c, 0xde42, 0x11d3,{ 0xa8, 0x8b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLearnedTranslationYObjectGuid = { 0xbdf6dc5d, 0xde42, 0x11d3,{ 0xa8, 0x8b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLearnedRotationXObjectGuid = { 0xbdf6dc5e, 0xde42, 0x11d3,{ 0xa8, 0x8b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLearnedRotationYObjectGuid = { 0xbdf6dc5f, 0xde42, 0x11d3,{ 0xa8, 0x8b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLearnedRotationAngleObjectGuid = { 0xbdf6dc60, 0xde42, 0x11d3,{ 0xa8, 0x8b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUseExtentsOnlyObjectGuid = { 0x7c078017, 0xe314, 0x11d3,{ 0xa8, 0x90, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVConditionalToolSetDrawFlagObjectGuid = { 0xf0ba3157, 0xe95b, 0x11d3,{ 0xa9, 0x4d, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVConditionalToolDrawFlagObjectGuid = { 0xb038c41d, 0xe896, 0x11d3,{ 0xa9, 0x4c, 0x5, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVOutputCenterXObjectGuid = { 0xc74b3c69, 0xedb0, 0x11d3,{ 0xa9, 0x55, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x37 } };
const GUID SVOutputCenterYObjectGuid = { 0xc74b3c75, 0xedb0, 0x11d3,{ 0xa9, 0x55, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x38 } };
const GUID SVOutputStartRadiusObjectGuid = { 0xc74b3c7f, 0xedb0, 0x11d3,{ 0xa9, 0x55, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x39 } };
const GUID SVOutputEndRadiusObjectGuid = { 0xc74b3c8b, 0xedb0, 0x11d3,{ 0xa9, 0x55, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x3a } };
const GUID SVOutputStartAngleObjectGuid = { 0xc74b3c96, 0xedb0, 0x11d3,{ 0xa9, 0x55, 0x0, 0x11, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVOutputEndAngleObjectGuid = { 0xc74b3ca3, 0xedb0, 0x11d3,{ 0xa9, 0x55, 0x0, 0x12, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVOutputInterpolationModeObjectGuid = { 0xec839a76, 0xeb75, 0x11d3,{ 0xa9, 0x52, 0x0, 0x13, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVOutputUseFormulaObjectGuid = { 0xfa20ad51, 0xedf4, 0x11d3,{ 0xa9, 0x56, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x30 } };
const GUID SVOutputAngularMethodObjectGuid = { 0x6b36eed1, 0xc25a, 0x4740,{ 0x96, 0xb9, 0xc, 0x33, 0xc8, 0xc, 0x12, 0x4d } };
const GUID SVOutputEvaluateCenterXResultObjectGuid = { 0xec839a3c, 0xeb75, 0x11d3,{ 0xa9, 0x52, 0x0, 0x10, 0x7a, 0x0, 0x18, 0x36 } };
const GUID SVOutputEvaluateCenterYResultObjectGuid = { 0xec839a41, 0xeb75, 0x11d3,{ 0xa9, 0x52, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVOutputEvaluateStartRadiusResultObjectGuid = { 0xec839a48, 0xeb75, 0x11d3,{ 0xa9, 0x52, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVOutputEvaluateEndRadiusResultObjectGuid = { 0xec839a50, 0xeb75, 0x11d3,{ 0xa9, 0x52, 0x0, 0x10, 0x67, 0x0, 0x18, 0x36 } };
const GUID SVOutputEvaluateStartAngleResultObjectGuid = { 0xec839a5e, 0xeb75, 0x11d3,{ 0xa9, 0x52, 0x0, 0x10, 0x6f, 0x0, 0x15, 0x36 } };
const GUID SVOutputEvaluateEndAngleResultObjectGuid = { 0xec839a6a, 0xeb75, 0x11d3,{ 0xa9, 0x52, 0x0, 0x10, 0x6f, 0x3, 0x18, 0x36 } };
const GUID SVExtentRelativeLeftPositionObjectGuid = { 0xfaaee6a3, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVExtentRelativeTopPositionObjectGuid = { 0xfaaee6a4, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVExtentRelativeRightPositionObjectGuid = { 0xfaaee6a5, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVExtentRelativeBottomPositionObjectGuid = { 0xfaaee6a6, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVExtentWidthObjectGuid = { 0xfaaee6a7, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVExtentHeightObjectGuid = { 0xfaaee6a8, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVExtentWidthScaleFactorObjectGuid = { 0xfbaee6a9, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVExtentHeightScaleFactorObjectGuid = { 0xfbaee6aa, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVUpdateAuxiliaryExtentsObjectGuid = { 0xffaee6a0, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVAuxiliarySourceXObjectGuid = { 0xffaee6a1, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVAuxiliarySourceYObjectGuid = { 0xffaee6a2, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVAuxiliarySourceAngleObjectGuid = { 0xffaee6a3, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVAuxiliarySourceImageNameObjectGuid = { 0xffaee6a4, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVAuxiliaryDrawTypeObjectGuid = { 0xffaee6a5, 0xf03e, 0x11d3,{ 0xa8, 0xa1, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLUTEquationResultObjectGuid = { 0x8519dc9a, 0xfda3, 0x11d3,{ 0xa9, 0x6b, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLUTEquationClipFlagObjectGuid = { 0x4c9c1dd6, 0x5163, 0x40fe,{ 0x8d, 0xe6, 0x59, 0x8a, 0x0, 0x2c, 0x1c, 0x57 } };
const GUID SVOutputLUTVectorObjectGuid = { 0x8519dcaa, 0xfda3, 0x11d3,{ 0xa9, 0x6b, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVUseLUTObjectGuid = { 0x8519dcb4, 0xfda3, 0x11d3,{ 0xa9, 0x6b, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVContinuousRecalcLUTObjectGuid = { 0x560340d3, 0xfe5d, 0x11d3,{ 0xa9, 0x6c, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLUTModeObjectGuid = { 0x8519dcbf, 0xfda3, 0x11d3,{ 0xa9, 0x6b, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLUTUpperClipObjectGuid = { 0x30382ccb, 0xfff3, 0x11d3,{ 0xa9, 0x6e, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLUTLowerClipObjectGuid = { 0x30382cd7, 0xfff3, 0x11d3,{ 0xa9, 0x6e, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLUTMinInputObjectGuid = { 0x30382ccc, 0xfff3, 0x11d3,{ 0xa9, 0x6e, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLUTMaxInputObjectGuid = { 0x30382ccd, 0xfff3, 0x11d3,{ 0xa9, 0x6e, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLUTMinOutputObjectGuid = { 0x30382cce, 0xfff3, 0x11d3,{ 0xa9, 0x6e, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLUTMaxOutputObjectGuid = { 0x30382ccf, 0xfff3, 0x11d3,{ 0xa9, 0x6e, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVpatAcceptThresholdObjectGuid = { 0xf4cf0804, 0xeed4, 0x11d3,{ 0xa8, 0x90, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatCertainThresholdObjectGuid = { 0xf4cf0806, 0xeed4, 0x11d3,{ 0xa8, 0x90, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatAccuracyObjectGuid = { 0xf4cf080c, 0xeed4, 0x11d3,{ 0xa8, 0x90, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatMaxOccurancesObjectGuid = { 0xf4cf0814, 0xeed4, 0x11d3,{ 0xa8, 0x90, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatSearchAngleModeObjectGuid = { 0xf4cf081e, 0xeed4, 0x11d3,{ 0xa8, 0x90, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatSpeedObjectGuid = { 0xf4cf0820, 0xeed4, 0x11d3,{ 0xa8, 0x90, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatModelImageFileGuid = { 0x89757d59, 0xfb82, 0x11d3,{ 0xa8, 0x9f, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatSearchAngleObjectGuid = { 0x94877924, 0x04af, 0x11d4,{ 0xa8, 0xa7, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatAngleDeltaNegObjectGuid = { 0x94877926, 0x04af, 0x11d4,{ 0xa8, 0xa7, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatAngleDeltaPosObjectGuid = { 0x94877928, 0x04af, 0x11d4,{ 0xa8, 0xa7, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatAngleToleranceObjectGuid = { 0x9487792a, 0x04af, 0x11d4,{ 0xa8, 0xa7, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatAngleAccuracyObjectGuid = { 0x9487792c, 0x04af, 0x11d4,{ 0xa8, 0xa7, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatAngleInterpolationObjectGuid = { 0x9487792e, 0x04af, 0x11d4,{ 0xa8, 0xa7, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatCircularOverscanObjectGuid = { 0x805d05bd, 0x657f, 0x4e1e,{ 0x9e, 0x31, 0x6b, 0xeb, 0xbd, 0x8f, 0xc2, 0xf7 } };
const GUID SVpatDontCareObjectGuid = { 0x1607fd27, 0xf9b7, 0x4488,{ 0x84, 0xdf, 0xea, 0xea, 0x9c, 0x12, 0x90, 0xcf } };
const GUID SVpatDontCareImageFileGuid = { 0xa94d46f4, 0x7a44, 0x49d6,{ 0xa4, 0x3, 0xd9, 0x14, 0xf5, 0x2d, 0xd3, 0xca } };
const GUID SVpatPreliminaryAcceptanceThresholdObjectGuid = { 0x1ff7f0dd, 0x880, 0x4dd1,{ 0xa8, 0xb7, 0x8d, 0xbf, 0xf5, 0x39, 0x46, 0xae } };
const GUID SVpatFastFindObjectGuid = { 0x5665c131, 0xeb03, 0x478f,{ 0xba, 0xca, 0x75, 0xb7, 0x75, 0xc8, 0xbe, 0x46 } };
const GUID SVpatModelStepObjectGuid = { 0x1478a616, 0x5545, 0x45f5,{ 0x9e, 0xfe, 0x6c, 0xc6, 0x82, 0x61, 0x5a, 0x12 } };
const GUID SVpatModelWidthObjectGuid = { 0xfdbd91db, 0x40f2, 0x451f,{ 0xb5, 0x36, 0x2b, 0x6c, 0x5d, 0x42, 0xc1, 0x20 } };
const GUID SVpatModelHeightObjectGuid = { 0x79f0400c, 0x48e0, 0x4f24,{ 0x88, 0xc4, 0xf6, 0x76, 0xbd, 0x43, 0xc0, 0xc6 } };
const GUID SVpatModelCenterXObjectGuid = { 0x62d1e41f, 0x9f5d, 0x4992,{ 0x90, 0x92, 0xdc, 0x1a, 0x9, 0x4b, 0x2c, 0x69 } };
const GUID SVpatModelCenterYObjectGuid = { 0x80ad1bc7, 0x7bb2, 0x4284,{ 0x9b, 0x71, 0x11, 0xc3, 0xb2, 0x92, 0xe5, 0x50 } };
const GUID SVpatDontCareWidthObjectGuid = { 0x4e563fc2, 0xec85, 0x4612,{ 0x9c, 0x38, 0x6c, 0xdd, 0x34, 0xbf, 0x60, 0xb6 } };
const GUID SVpatDontCareHeightObjectGuid = { 0xab13e451, 0xf215, 0x4d5d,{ 0x97, 0x38, 0x65, 0x5a, 0x26, 0x2d, 0x5a, 0x29 } };
const GUID SVpatBeginningResolutionLevelObjectGuid = { 0x4a9e62d4, 0xd487, 0x4bc7,{ 0xbe, 0x35, 0x34, 0xe9, 0xaf, 0xae, 0x13, 0x4f } };
const GUID SVpatFinalResolutionLevelObjectGuid = { 0xad0ec9e1, 0xdf41, 0x4c46,{ 0xa4, 0xec, 0xcd, 0xe7, 0x1, 0x14, 0xc6, 0x84 } };
const GUID SVpatAdditionalCandidatesObjectGuid = { 0x46e0ad64, 0x62b8, 0x4c0e,{ 0x92, 0x94, 0x7e, 0xd4, 0x1f, 0x29, 0x95, 0xd4 } };
const GUID SVpatCandidateSpacingXMinObjectGuid = { 0x20bf7139, 0xc3a1, 0x446f,{ 0x8a, 0xb5, 0x7d, 0x54, 0xcd, 0xf8, 0x89, 0x89 } };
const GUID SVpatCandidateSpacingYMinObjectGuid = { 0xad629e46, 0x8509, 0x4978,{ 0x96, 0xee, 0x4e, 0x2c, 0xfc, 0x93, 0x5e, 0x45 } };
const GUID SVpatResultMatchScoreObjectGuid = { 0x94877930, 0x04af, 0x11d4,{ 0xa8, 0xa7, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatResultXObjectGuid = { 0x94877932, 0x04af, 0x11d4,{ 0xa8, 0xa7, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatResultYObjectGuid = { 0x94877934, 0x04af, 0x11d4,{ 0xa8, 0xa7, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatResultAngleObjectGuid = { 0x94877936, 0x04af, 0x11d4,{ 0xa8, 0xa7, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVpatResultNumFoundOccurancesObjectGuid = { 0x6ef02e2e, 0x5792, 0x48b1,{ 0xb9, 0xc9, 0xbc, 0x49, 0xdd, 0xc0, 0xfe, 0xf2 } };
const GUID SVLinearDataClassGuid = { 0xfbfda012, 0x66aa, 0x4d4a,{ 0xb5, 0xe1, 0x50, 0xa1, 0xaf, 0xad, 0xbf, 0x59 } };
const GUID SVBand0ImageObjectGuid = { 0x33e41276, 0x45fa, 0x11d4,{ 0xa9, 0x24, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand1ImageObjectGuid = { 0x33e41277, 0x45fa, 0x11d4,{ 0xa9, 0x24, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand2ImageObjectGuid = { 0x33e41278, 0x45fa, 0x11d4,{ 0xa9, 0x24, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVConvertToHSIObjectGuid = { 0x0260f79f, 0x4785, 0x11d4,{ 0xa9, 0x26, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVHasROIObjectGuid = { 0x0260f7a0, 0x4785, 0x11d4,{ 0xa9, 0x26, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVColorThresholdEnabledObjectGuid = { 0xdb745900, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand0UpperThresholdObjectGuid = { 0xdb745834, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand0LowerThresholdObjectGuid = { 0xdb745835, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand0ThresholdExcludeObjectGuid = { 0xdb745836, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand0ThresholdEnabledObjectGuid = { 0xdb745901, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand1UpperThresholdObjectGuid = { 0xdb745837, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand1LowerThresholdObjectGuid = { 0xdb745838, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand1ThresholdExcludeObjectGuid = { 0xdb745839, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand1ThresholdEnabledObjectGuid = { 0xdb745902, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand2UpperThresholdObjectGuid = { 0xdb74583a, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand2LowerThresholdObjectGuid = { 0xdb74583b, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand2ThresholdExcludeObjectGuid = { 0xdb74583c, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVBand2ThresholdEnabledObjectGuid = { 0xdb745903, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVEdgeUpperThresholdValueGuid = { 0xe59c2a68, 0xf041, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeADirectionGuid = { 0xe59c2a60, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeAPolarisationGuid = { 0xe59c2a61, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeAEdgeSelectGuid = { 0xe59c2a62, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeAEdgeSelectThisValueGuid = { 0xe59c2a63, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeAIsFixedEdgeMarkerGuid = { 0xe59c2a64, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeAPositionGuid = { 0xe59c2a65, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeAPositionOffsetGuid = { 0xe59c2a66, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeALowerThresholdValueGuid = { 0xe59c2a67, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeBDirectionGuid = { 0xe59c2a6a, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeBPolarisationGuid = { 0xe59c2a6b, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeBEdgeSelectGuid = { 0xe59c2a6c, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeBEdgeSelectThisValueGuid = { 0xe59c2a6d, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeBIsFixedEdgeMarkerGuid = { 0xe59c2a6e, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeBPositionGuid = { 0xe59c2a6f, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeBPositionOffsetGuid = { 0xe59c2a70, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeBLowerThresholdValueGuid = { 0xe59c2a71, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVEdgeBUpperThresholdValueGuid = { 0xe59c2a72, 0xf040, 0x45eb,{ 0x8c, 0xe3, 0x4, 0x90, 0x4b, 0x7d, 0x1f, 0x6e } };
const GUID SVDrawCriteriaObjectGuid = { 0x26c18a2b, 0x1e94, 0x439a,{ 0xa4, 0x6b, 0xab, 0xeb, 0x7a, 0x3a, 0xf0, 0x9c } };
const GUID SVResizeInterpolationModeGuid = { 0xb7b9c748, 0xbfc4, 0x4863,{ 0x85, 0xb6, 0xe3, 0x37, 0x8a, 0x90, 0xc2, 0x75 } };
const GUID SVResizeOverscanGuid = { 0xb7b9c748, 0xbfc4, 0x4863,{ 0x85, 0xb6, 0xe3, 0x37, 0x8a, 0x90, 0xc3, 0x75 } };
const GUID SVResizePerformanceGuid = { 0xb7b9c748, 0xbfc4, 0x4863,{ 0x85, 0xb6, 0xe3, 0x37, 0x8a, 0x90, 0xc4, 0x75 } };
const GUID SVLogicalROIImageGuid = { 0xb7b9c748, 0xbfc4, 0x4863,{ 0x85, 0xb6, 0xe3, 0x37, 0x8a, 0x90, 0xc5, 0x75 } };
const GUID SVDllFileNameGuid = { 0x50f86100, 0x12da, 0x422c,{ 0x9b, 0x95, 0x28, 0xc8, 0x20, 0xa7, 0xf4, 0x38 } };
const GUID SVDllToolNameGuid = { 0x980cc3d4, 0xf0eb, 0x4a46,{ 0x86, 0x3f, 0xf5, 0x30, 0x13, 0x30, 0xd7, 0x47 } };
const GUID SVDllToolVersionGuid = { 0x794ca194, 0xeb23, 0x4646,{ 0x83, 0xfb, 0xa5, 0x7d, 0x94, 0x44, 0x85, 0x7f } };
const GUID SVShowAllEdgeAOverlaysGuid = { 0xfbfda01f, 0x66af, 0x4d4f,{ 0xb5, 0xe1, 0x50, 0xa1, 0xaf, 0xad, 0xbf, 0x59 } };
const GUID SVShowAllEdgeBOverlaysGuid = { 0xfbfda01e, 0x66ae, 0x4d4e,{ 0xb5, 0xe1, 0x50, 0xa1, 0xaf, 0xad, 0xbf, 0x59 } };
const GUID SVSourceImageNamesGuid = { 0x48141aaa, 0x45e2, 0x4de3,{ 0x8c, 0x1b, 0x60, 0x26, 0xb9, 0xa8, 0xc8, 0x50 } };
const GUID SVBCRawDataGuid = { 0x307e8d8c, 0x3d3d, 0x458e,{ 0xab, 0x37, 0xfa, 0xad, 0x8a, 0x31, 0xaf, 0x43 } };
const GUID SVBCStringFormatGuid = { 0xb15ac4e5, 0xbea7, 0x4053,{ 0xab, 0xe0, 0xa3, 0x30, 0x48, 0x1a, 0x18, 0xbd } };
const GUID SVBCThresholdTypeGuid = { 0xe3e2f549, 0x7e4e, 0x4fba,{ 0x98, 0x3c, 0xbc, 0x27, 0xf0, 0xf1, 0xd8, 0xe3 } };
const GUID SVToolCommentTypeObjectGuid = { 0x1c6d596a, 0xbb70, 0x4406,{ 0x9a, 0x62, 0xce, 0x40, 0xe4, 0xdc, 0x5e, 0x45 } };
const GUID SVCameraTriggerTimestampGuid = { 0x4b916de5, 0xbe32, 0x423c,{ 0xb3, 0xd4, 0xfd, 0x2a, 0x52, 0xf, 0x24, 0x4f } };
const GUID ToolSizeAdjustSizeWidthModeGuid = { 0x6f293155, 0xb84, 0x4a9a,{ 0x9b, 0x21, 0x4c, 0xcd, 0x9a, 0x46, 0x2e, 0x26 } };
const GUID ToolSizeAdjustSizeHeightModeGuid = { 0xf227b7e4, 0x1ddc, 0x46e6,{ 0x9f, 0x25, 0xeb, 0x63, 0x94, 0xf9, 0xe, 0x15 } };
const GUID ToolSizeAdjustSizePositionXModeGuid = { 0xf779a438, 0xe6ab, 0x42b6,{ 0xae, 0x4e, 0x6c, 0x13, 0xf1, 0x19, 0xde, 0x32 } };
const GUID ToolSizeAdjustSizePositionYModeGuid = { 0xa1829a34, 0x1449, 0x4408,{ 0x95, 0xa9, 0xb0, 0xe9, 0xef, 0x6f, 0x77, 0x40 } };
const GUID EQAdjustSizeWidthResultGuid = { 0x2602587f, 0x5b43, 0x427e,{ 0x9a, 0x23, 0xba, 0x2d, 0x30, 0xd0, 0x40, 0xa6 } };
const GUID EQAdjustSizeHeightResultGuid = { 0x4e5602fa, 0x69be, 0x44e2,{ 0x9a, 0x3f, 0x5e, 0x78, 0xcd, 0x9d, 0xea, 0x2d } };
const GUID EQAdjustSizePositionXResultGuid = { 0x45118e1a, 0x274a, 0x4b0d,{ 0x91, 0x8b, 0xef, 0x32, 0xaf, 0x29, 0xe5, 0xae } };
const GUID EQAdjustSizePositionYResultGuid = { 0x82bb04a9, 0x16af, 0x4710,{ 0x94, 0xba, 0x92, 0x2, 0x85, 0x71, 0xb0, 0x71 } };
const GUID TableTool_MaxRowGuid = { 0x8d4ee252, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3b } };
const GUID TableObject_NumberOfRowsGuid = { 0x8d4ee252, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3f } };
const GUID TableAnaylzerSortIsASCGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1C } };
const GUID TableAnaylzerExcludeHighGuid = { 0xb74bc931, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1C } };
const GUID TableAnaylzerExcludeHigh_LinkGuid = { 0xb74bc932, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1C } };
const GUID TableAnaylzerExcludeLowGuid = { 0xb74bc933, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1C } };
const GUID TableAnaylzerExcludeLow_LinkGuid = { 0xb74bc934, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1C } };
const GUID TableAnaylzerLimitValueGuid = { 0xb74bc935, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1C } };
const GUID TableAnaylzerLimitValue_LinkGuid = { 0xb74bc936, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1C } };
const GUID MaxLoopsGuid = { 0x4168f25e, 0x9ed6, 0x48f0,{ 0x92, 0xf6, 0x6b, 0x44, 0x47, 0xf3, 0x39, 0xd1 } };
const GUID LoopCounterGuid = { 0xdc46936f, 0x356f, 0x4b76,{ 0xa5, 0x42, 0xfb, 0x85, 0x71, 0xc, 0x77, 0xe1 } };
const GUID LinkedLoopsGuid = { 0xf158263c, 0x62f9, 0x4b6b,{ 0x91, 0xf1, 0x4a, 0x71, 0xc3, 0xc, 0x8, 0x35 } };
const GUID  LinkedLoops_LinkedGuid = { 0xe1091e47, 0x1ea5, 0x4730,{ 0xa4, 0x9d, 0xce, 0x65, 0xb3, 0xd5, 0xb6, 0x5a } };
const GUID LoopBreakGuid = { 0x27bca0a7, 0xce65, 0x4119,{ 0xaa, 0x7b, 0x8a, 0x9a, 0x9e, 0xb4, 0x9a, 0x1c } };
const GUID LoopBreak_LinkedGuid = { 0x62536023, 0x7e5, 0x4500,{ 0xa6, 0x9f, 0x56, 0x8b, 0x7a, 0x18, 0x50, 0xe6 } };
const GUID SVTriggerTimeGuid = { 0x5237c912, 0x30c1, 0x4870,{ 0x93, 0x82, 0x56, 0xf0, 0x8b, 0x0, 0x70, 0x37 } };
const GUID SVOutputImageObjectGuid = { 0xcc5c6f69, 0xc2d7, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVOutputImage2ObjectGuid = { 0xc55bc602, 0x3239, 0x4e28,{ 0x9d, 0x6b, 0xed, 0x43, 0xdc, 0x58, 0x57, 0xde } };
const GUID SVOutputImage3ObjectGuid = { 0xc55bc603, 0x3239, 0x4e28,{ 0x9d, 0x6b, 0xed, 0x43, 0xdc, 0x58, 0x57, 0xde } };
const GUID SVOutputImage4ObjectGuid = { 0xc55bc604, 0x3239, 0x4e28,{ 0x9d, 0x6b, 0xed, 0x43, 0xdc, 0x58, 0x57, 0xde } };
const GUID RingBuffer_IndexGuid[] = { { 0xe5558f21, 0x9093, 0x4478,{ 0x87, 0xdc, 0x57, 0xc0, 0x7e, 0x38, 0xed, 0xcf } },
{ 0xea46fb33, 0x6383, 0x4bee,{ 0x93, 0x1c, 0x87, 0x45, 0x12, 0xcb, 0xfd, 0x9b } } };
const GUID RingBufferLink_IndexGuid[] = { { 0x5281c862, 0x9644, 0x4cec,{ 0xbd, 0xd4, 0x76, 0x6a, 0xcf, 0xd4, 0xca, 0x7f } },
{ 0x58677f30, 0xbcdd, 0x4bae,{ 0xaa, 0xcb, 0xba, 0x07, 0xa8, 0xd4, 0x7a, 0x75 } } };
const GUID SVCustomFilterCell01Guid = { 0x665b5b03, 0x19e8, 0x4d71,{ 0x87, 0x52, 0x84, 0x30, 0x78, 0x6, 0xd0, 0xcd } };
const GUID SVRankingFilterCell01Guid = { 0x665b5b53, 0x19e8, 0x4d71,{ 0x87, 0x52, 0x84, 0x30, 0x78, 0x6, 0xd0, 0xcd } };
const GUID aInputObjectGUID = { 0x33d7b01, 0x7d4d, 0x4a77,{ 0x90, 0xbb, 0x22, 0xb9, 0xcf, 0x80, 0xff, 0x90 } };
const GUID aInputObject_LinkedGUID = { 0x33d7b01, 0x7d4d, 0x4a78,{ 0x90, 0xbb, 0x22, 0xb9, 0xcf, 0x80, 0xff, 0x90 } };
const GUID aSVVariantResultObjectGuid = { 0x6f882e01, 0xb062, 0x4b38,{ 0xa6, 0x1d, 0x10, 0x46, 0x67, 0xd8, 0xdf, 0xe4 } };
const GUID aSVDllDependencyFileNameGuid = { 0x50f86101, 0x12da, 0x422c,{ 0x9b, 0x95, 0x28, 0xc8, 0x20, 0xa7, 0xf4, 0x38 } };
const GUID TableColumnValueObjectGuid = { 0x8d4ee253, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3e } };
constexpr std::array<GUID, 49> SVBlobFeatureGuids =
{
	GUID { 0x86dcf5da, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5db, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5dc, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5dd, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5de, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5df, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5e0, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5e1, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5e2, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5e3, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5e4, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5e5, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5e6, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5e7, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5e8, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5e9, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5ea, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5eb, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5ec, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5ed, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5ee, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5ef, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5f0, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5f1, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5f2, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5f4, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5f8, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5f9, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5fa, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5fb, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5fc, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5fd, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5fe, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf5ff, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf600, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf601, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf602, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf603, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf604, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf605, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf606, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf607, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf608, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf609, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf60a, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf60b, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0x86dcf60c, 0xc2de, 0x11d2,{ 0x31, 0xbd, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } },
	{ 0xde0c35ab, 0x65c6, 0x4836,{ 0x95, 0x29, 0xd6, 0x99, 0x73, 0x28, 0x7, 0x5d } },
	{ 0xdd3c531e, 0xeb45, 0x475c,{ 0xa8, 0xbb, 0xab, 0xaf, 0x34, 0x54, 0xa, 0x44 } },
};
#pragma endregion EmbeddedGuids

std::unordered_map<GUID, SvPb::EmbeddedIdEnum> g_ExchangeEmbeddedID = {
	{ SVStringValueObjectClassGuid, SvPb::StringValueEId },
	{ SVTaskObjectClassIsObjectValidGuid, SvPb::TaskObjectClassIsObjectValidEId },
	{ SVToolSetEnabledObjectGuid, SvPb::ToolSetEnabledEId },
	{ SVToolEnabledObjectGuid, SvPb::ToolEnabledEId },
	{ SVToolSelectedForOperatorMoveObjectGuid, SvPb::ToolSelectedForOperatorMoveEId },
	{ SVToolPositionGuid, SvPb::ToolPositionEId },
	{ SVToolTimeGuid, SvPb::ToolTimeEId },
	{ SVMinToolSetTimeGuid, SvPb::MinToolSetTimeEId },
	{ SVMaxToolSetTimeGuid, SvPb::MaxToolSetTimeEId },
	{ SVResetInspectionCountsGuid, SvPb::ResetInspectionCountsEId },
	{ SVTriggerCountGuid, SvPb::TriggerCountEId },
	{ SVPPQIndexGuid, SvPb::PPQIndexEId },
	{ SVTriggerDeltaGuid, SvPb::TriggerDeltaEId },
	{ SVTriggerToCompletionGuid, SvPb::TriggerToCompletionEId },
	{ SVTriggerToStartGuid, SvPb::TriggerToStartEId },
	{ SVTriggerToAcquisitionStartGuid, SvPb::TriggerToAcquisitionStartEId },
	{ SVAcquisitionTimeGuid, SvPb::AcquisitionTimeEId },
	{ EnableAuxiliaryExtentsObjectGuid, SvPb::EnableAuxiliaryExtentsEId },
	{ ObjectIDGuid, SvPb::ObjectIDEId },
	{ TriggerIndexGuid, SvPb::TriggerIndexEId },
	{ InspectedObjectIDGuid, SvPb::InspectedObjectIDEId },
	{ InspectedObjectIDLinkGuid, SvPb::InspectedObjectIDLinkEId },
	{ SVLuminanceValueObjectGuid, SvPb::LuminanceValueEId },
	{ SVHistogramValueObjectGuid, SvPb::HistogramValueEId },
	{ SVHistogramMeanObjectGuid, SvPb::HistogramMeanEId },
	{ SVHistogramStdDevObjectGuid, SvPb::HistogramStdDevEId },
	{ SVHistogramRangeStartObjectGuid, SvPb::HistogramRangeStartEId },
	{ SVHistogramRangeEndObjectGuid, SvPb::HistogramRangeEndEId },
	{ SVHistogramRangeSizeObjectGuid, SvPb::HistogramRangeSizeEId },
	{ SVHistogramMaxPixelObjectGuid, SvPb::HistogramMaxPixelEId },
	{ SVHistogramScaleObjectGuid, SvPb::HistogramScaleEId },
	{ SVHistogramMinPixelObjectGuid, SvPb::HistogramMinPixelEId },
	{ SVHistogramPixelCountObjectGuid, SvPb::HistogramPixelCountEId },
	{ SVHistogramImageObjectGuid, SvPb::HistogramImageEId },
	{ SVHistogramHighPeakObjectGuid, SvPb::HistogramHighPeakEId },
	{ SVHistogramLowPeakObjectGuid, SvPb::HistogramLowPeakEId },
	{ SVHistogramValleyObjectGuid, SvPb::HistogramValleyEId },
	{ SVHistogramPeakThresholdObjectGuid, SvPb::HistogramPeakThresholdEId },
	{ SVHistogramDefaultPeakObjectGuid, SvPb::HistogramDefaultPeakEId },
	{ SVHistogramAccumulateObjectGuid, SvPb::HistogramAccumulateEId },
	{ SVHistogramMinPeakHeightObjectGuid, SvPb::HistogramMinPeakHeightEId },
	{ SVHistogramValleyLowerBoundObjectGuid, SvPb::HistogramValleyLowerBoundEId },
	{ SVHistogramValleyUpperBoundObjectGuid, SvPb::HistogramValleyUpperBoundEId },
	{ SVHistogramValleyDefaultObjectGuid, SvPb::HistogramValleyDefaultEId },
	{ SVHistogramFixedHeightValueObjectGuid, SvPb::HistogramFixedHeightValueEId },
	{ SVHistogramDynamicHeightObjectGuid, SvPb::HistogramDynamicHeightEId },
	{ SVCalcStdDevObjectGuid, SvPb::CalcStdDevEId },
	{ SVPixelColorIndexObjectGuid, SvPb::PixelColorIndexEId },
	{ SVPixelCountObjectGuid, SvPb::PixelCountEId },
	{ SVBlobEnabledFeaturesObjectGuid, SvPb::BlobEnabledFeaturesEId },
	{ SVNbrOfBlobsObjectGuid, SvPb::NbrOfBlobsEId },
	{ SVMaxBlobDataArraySizeObjectGuid, SvPb::MaxBlobDataArraySizeEId },
	{ SVSortFeatureObjectGuid, SvPb::SortFeatureEId },
	{ SVNbrOfBlobsFoundObjectGuid, SvPb::NbrOfBlobsFoundEId },
	{ SVSortAscendingObjectGuid, SvPb::SortAscendingEId },
	{ SVExcludeFailedObjectGuid, SvPb::ExcludeFailedEId },
	{ SVBlobColorGuid, SvPb::BlobColorEId },
	{ SVBlobUseFillGuid, SvPb::BlobUseFillEId },
	{ SVBlobFillColorGuid, SvPb::BlobFillColorEId },
	{ SVBlobFillTypeGuid, SvPb::BlobFillTypeEId },
	{ SVStatMinObjectGuid, SvPb::StatMinEId },
	{ SVStatMaxObjectGuid, SvPb::StatMaxEId },
	{ SVStatAverageObjectGuid, SvPb::StatAverageEId },
	{ SVStatStdDevObjectGuid, SvPb::StatStdDevEId },
	{ SVStatVarianceObjectGuid, SvPb::StatVarianceEId },
	{ SVStatTestValueObjectGuid, SvPb::StatTestValueEId },
	{ SVStatNbrOfOccurancesObjectGuid, SvPb::StatNbrOfOccurancesEId },
	{ SVStatPercentOfOccurancesObjectGuid, SvPb::StatPercentOfOccurancesEId },
	{ SVStatNumberOfValidSamplesObjectGuid, SvPb::StatNumberOfValidSamplesEId},
	{ SVStatEnabledFeaturesObjectGuid, SvPb::StatEnabledFeaturesEId },
	{ SVStatVariableNameToMonitorObjectGuid, SvPb::StatVariableNameToMonitorEId },
	{ SVUpperThresholdObjectGuid, SvPb::UpperThresholdEId },
	{ SVLowerThresholdObjectGuid, SvPb::LowerThresholdEId },
	{ SVThresholdActivateObjectGuid, SvPb::ThresholdActivateEId },
	{ SVUpperThresholdActivateObjectGuid, SvPb::UpperThresholdActivateEId },
	{ SVLowerThresholdActivateObjectGuid, SvPb::LowerThresholdActivateEId },
	{ SVAutoThresholdObjectGuid, SvPb::AutoThresholdEId },
	{ SVBlackBackgroundObjectGuid, SvPb::BlackBackgroundEId },
	{ SVAutoThresholdMultiplierObjectGuid, SvPb::AutoThresholdMultiplierEId },
	{ RingBuffer_FlagOfOutputImagesGuid, SvPb::RingBuffer_FlagOfOutputImagesEId },
	{ FilterKernelGuid, SvPb::FilterKernelEId },
	{ SVCustomFilterKernelWidthGuid, SvPb::FilterKernelWidthEId },
	{ SVCustomFilterKernelHeightGuid, SvPb::FilterKernelHeightEId },
	{ SVCustomFilterClippingGuid, SvPb::CustomFilterClippingEId },
	{ SVCustomFilterAbsoluteGuid, SvPb::CustomFilterAbsoluteEId },
	{ SVCustomFilterTransformGuid, SvPb::CustomFilterTransformEId },
	{ RingBuffer_DepthGuid, SvPb::RingBuffer_DepthEId },
	{ RingBufferLink_DepthGuid, SvPb::RingBufferLink_DepthEId },
	{ SVRangeClassFailHighObjectGuid, SvPb::RangeClassFailHighEId },
	{ SVRangeClassFailLowObjectGuid, SvPb::RangeClassFailLowEId },
	{ SVRangeClassWarnHighObjectGuid, SvPb::RangeClassWarnHighEId },
	{ SVRangeClassWarnLowObjectGuid, SvPb::RangeClassWarnLowEId },
	{ SVRangeClassFailHighIndirectObjectGuid, SvPb::RangeClassFailHighIndirectEId },
	{ SVRangeClassFailLowIndirectObjectGuid, SvPb::RangeClassFailLowIndirectEId },
	{ SVRangeClassWarnHighIndirectObjectGuid, SvPb::RangeClassWarnHighIndirectEId },
	{ SVRangeClassWarnLowIndirectObjectGuid, SvPb::RangeClassWarnLowIndirectEId },
	{ SVOCVPerformOCRGuid, SvPb::OCVPerformOCREId },
	{ SVOCVMatchLineNumberGuid, SvPb::OCVMatchLineNumberEId },
	{ SVOCVHighestMatchScoreGuid, SvPb::OCVHighestMatchScoreEId },
	{ SVOCVLowestMatchScoreGuid, SvPb::OCVLowestMatchScoreEId },
	{ SVOCVAverageMatchScoreGuid, SvPb::OCVAverageMatchScoreEId },
	{ SVOCVFontFileNameGuid, SvPb::OCVFontFileNameEId },
	{ SVOCVMatchStringFileNameGuid, SvPb::OCVMatchStringFileNameEId },
	{ SVOCVConstraintsFileNameGuid, SvPb::OCVConstraintsFileNameEId },
	{ SVOCVControlsFileNameGuid, SvPb::OCVControlsFileNameEId },
	{ SVOCVUseMatchFileGuid, SvPb::OCVUseMatchFileEId },
	{ SVOCVMatchStringGuid, SvPb::OCVMatchStringEId },
	{ SVOCVFoundStringGuid, SvPb::OCVFoundStringEId },
	{ SVOCVCharacterValueGuid, SvPb::OCVCharacterValueEId },
	{ SVOCVExtentLeftGuid, SvPb::OCVExtentLeftEId },
	{ SVOCVExtentTopGuid, SvPb::OCVExtentTopEId },
	{ SVOCVExtentWidthGuid, SvPb::OCVExtentWidthEId },
	{ SVOCVExtentHeightGuid, SvPb::OCVExtentHeightEId },
	{ SVOCVMatchScoreGuid, SvPb::OCVMatchScoreEId },
	{ SVArchiveFilePathObjectGuid, SvPb::ArchiveFilePathEId },
	{ SVArchiveImageGuidsObjectGuid, SvPb::ArchiveImageGuids_OBSOLETE_EId },
	{ SVArchiveImageFileRootPathGuid, SvPb::ArchiveImageFileRootPart1EId },
	{ SVArchiveResultGuidsObjectGuid, SvPb::ArchiveResultGuids_OBSOLETE_EId },
	{ SVArchiveAppendArchiveFileGuid, SvPb::ArchiveAppendArchiveFileEId },
	{ SVArchiveStopAtMaxImagesGuid, SvPb::ArchiveStopAtMaxImagesEId },
	{ SVArchiveUseTriggerCountForImagesGuid, SvPb::ArchiveUseTriggerCountForImages_obsolete_EId },
	{ SVArchiveMaxImagesCountGuid, SvPb::ArchiveMaxImagesCountEId },
	{ SVArchiveMethodGuid, SvPb::ArchiveMethodEId },
	{ SVArchiveUseHeadersGUID, SvPb::ArchiveUseHeadersEId },
	{ SVArchiveHeaderLabelGUID, SvPb::ArchiveHeaderLabelEId },
	{ SVArchiveHeaderObjectGUID, SvPb::ArchiveHeaderEId },
	{ SVArchiveResultNamesObjectGuid, SvPb::ArchiveResultNamesEId },
	{ SVArchiveImageNamesObjectGuid, SvPb::ArchiveImageNamesEId },
	{ SVEquationEnabledObjectGuid, SvPb::EquationEnabledEId },
	{ SVConditionalResultObjectGuid, SvPb::ConditionalResultEId },
	{ SVMathEquationResultObjectGuid, SvPb::MathEquationResultEId },
	{ SVLinearEdgesClassGuid, SvPb::LinearEdgesEId },
	{ SVDPEdgeAObjectGuid, SvPb::DPEdgeAEId },
	{ SVDPEdgeBObjectGuid, SvPb::DPEdgeBEId },
	{ SVDPCenterObjectGuid, SvPb::DPCenterEId },
	{ SVDWidthObjectGuid, SvPb::DWidthEId },
	{ SVLinearDistanceEdgeAObjectGuid, SvPb::LinearDistanceEdgeAEId },
	{ SVLinearDistanceEdgeBObjectGuid, SvPb::LinearDistanceEdgeBEId },
	{ SVXObjectGuid, SvPb::XEId },
	{ SVDXObjectGuid, SvPb::DXEId },
	{ SVYObjectGuid, SvPb::YEId },
	{ SVDYObjectGuid, SvPb::DYEId },
	{ SVValueObjectGuid, SvPb::ValueEId },
	{ SVFailedObjectGuid, SvPb::FailedEId },
	{ SVWarnedObjectGuid, SvPb::WarnedEId },
	{ SVPassedObjectGuid, SvPb::PassedEId },
	{ SVExplicitFailedObjectGuid, SvPb::ExplicitFailedEId },
	{ SVPassedCountObjectGuid, SvPb::PassedCountEId },
	{ SVFailedCountObjectGuid, SvPb::FailedCountEId },
	{ SVWarnedCountObjectGuid, SvPb::WarnedCountEId },
	{ SVEnabledCountObjectGuid, SvPb::EnabledCountEId },
	{ SVProcessedCountObjectGuid, SvPb::ProcessedCountEId },
	{ SVBlackPixelObjectGuid, SvPb::BlackPixelEId },
	{ SVWhitePixelObjectGuid, SvPb::WhitePixelEId },
	{ SVEdgeCountObjectGuid, SvPb::EdgeCountEId },
	{ SVColorObjectGuid, SvPb::ColorEId },
	{ SVStatusObjectGuid, SvPb::StatusEId },
	{ SVRotationAngleObjectGuid, SvPb::RotationAngleEId },
	{ SVRotationPointXObjectGuid, SvPb::RotationPointXEId },
	{ SVRotationPointYObjectGuid, SvPb::RotationPointYEId },
	{ SVProfileOrientationGuid, SvPb::ProfileOrientationEId },
	{ SVLinearToolUseRotationGuid, SvPb::LinearToolUseRotationEId },
	{ SVTranslationXOffsetObjectGuid, SvPb::TranslationXOffsetEId },
	{ SVTranslationYOffsetObjectGuid, SvPb::TranslationYOffsetEId },
	{ SVWarpTypeObjectGuid, SvPb::WarpTypeEId },
	{ SVWarpAngleObjectGuid, SvPb::WarpAngleEId },
	{ SVEnableOffsetAObjectGuid, SvPb::EnableOffsetAEId },
	{ SVOffsetAPointObjectGuid, SvPb::OffsetAPointEId },
	{ SVEnableOffsetBObjectGuid, SvPb::EnableOffsetBEId },
	{ SVOffsetBPointObjectGuid, SvPb::OffsetBPointEId },
	{ SVArithmeticOperatorObjectGuid, SvPb::ArithmeticOperatorEId },
	{ SVMaskEnabledObjectGuid, SvPb::MaskEnabledEId },
	{ SVMaskUseImageMaskGuid, SvPb::MaskUseImageMaskEId },
	{ SVMaskOperatorGuid, SvPb::MaskOperatorEId },
	{ SVMaskFillAreaGuid, SvPb::MaskFillAreaEId },
	{ SVMaskFillColorGuid, SvPb::MaskFillColorEId },
	{ SVShapeMaskTypeGuid, SvPb::ShapeMaskTypeEId },
	{ SVShapeMaskMaskAreaGuid, SvPb::ShapeMaskMaskAreaEId },
	{ SVShapeMaskPropertyCenterXGuid, SvPb::CenterXEId },
	{ SVShapeMaskPropertyCenterYGuid, SvPb::CenterYEId },
	{ SVShapeMaskPropertyWidthGuid, SvPb::WidthEId },
	{ SVShapeMaskPropertyHeightGuid, SvPb::HeightEId },
	{ SVShapeMaskPropertySideThicknessGuid, SvPb::ShapeMaskPropertySideThicknessEId },
	{ SVShapeMaskPropertyTopBottomThicknessGuid, SvPb::ShapeMaskPropertyTopBottomThicknessEId },
	{ SVShapeMaskPropertyOffsetGuid, SvPb::ShapeMaskPropertyOffsetEId },
	{ SVShapeMaskPropertySymmetryOrientationGuid, SvPb::ShapeMaskPropertySymmetryOrientationEId },
	{ SVShapeMaskAutoResizeGuid, SvPb::ShapeMaskAutoResizeEId },
	{ SVPathNameObjectGuid, SvPb::PathNameEId },
	{ SVContinuousReloadObjectGuid, SvPb::ContinuousReloadEId },
	{ SVBarCodeObjectGuid, SvPb::BarCodeEId },
	{ SVRegExpressionObjectGuid, SvPb::RegExpressionEId },
	{ SVBCTypeObjectGuid, SvPb::BCTypeEId },
	{ SVBCOrientationObjectGuid, SvPb::BCOrientationEId },
	{ SVBCSkewNegativeObjectGuid, SvPb::BCSkewNegativeEId },
	{ SVBCSkewPositiveObjectGuid, SvPb::BCSkewPositiveEId },
	{ SVBCCellMinSizeObjectGuid, SvPb::BCCellMinSizeEId },
	{ SVBCCellMaxSizeObjectGuid, SvPb::BCCellMaxSizeEId },
	{ SVBCCellNumberXObjectGuid, SvPb::BCCellNumberXEId },
	{ SVBCCellNumberYObjectGuid, SvPb::BCCellNumberYEId },
	{ SVBCSpeedObjectGuid, SvPb::BCSpeedEId },
	{ SVBCThresholdObjectGuid, SvPb::BCThresholdEId },
	{ SVBCStringSizeObjectGuid, SvPb::BCStringSizeEId },
	{ SVBCErrorCorrectionObjectGuid, SvPb::BCErrorCorrectionEId },
	{ SVBCEncodingObjectGuid, SvPb::BCEncodingEId },
	{ SVBCForegroundColorObjectGuid, SvPb::BCForegroundColorEId },
	{ SVBCSaveStringInFileObjectGuid, SvPb::BCSaveStringInFileEId },
	{ SVBCStringFileNameObjectGuid, SvPb::BCStringFileNameEId },
	{ SVBCWarnOnFailedReadObjectGuid, SvPb::BCWarnOnFailedReadEId },
	{ SVWatershedFilterMinVariationGuid, SvPb::WatershedFilterMinVariationEId },
	{ SVWatershedFilterControlFlagGuid, SvPb::WatershedFilterControlFlagEId },
	{ SVWatershedFilterUseMarkerGuid, SvPb::WatershedFilterUseMarkerEId },
	{ SVThickeningFilterItterationsGuid, SvPb::ThickeningFilterItterationsEId },
	{ SVThickeningFilterGrayOnGuid, SvPb::ThickeningFilterGrayOnEId },
	{ SVThinningFilterItterationsGuid, SvPb::ThinningFilterItterationsEId },
	{ SVGrayOnGuid, SvPb::GrayOnEId },
	{ SVBCUseSingleMatchStringGuid, SvPb::BCUseSingleMatchStringEId },
	{ SVBCUseMatchStringFileGuid, SvPb::BCUseMatchStringFileEId },
	{ SVBCMatchStringFileNameObjectGuid, SvPb::BCMatchStringFileNameEId },
	{ SVBCMatchStringLineGuid, SvPb::BCMatchStringLineEId },
	{ SVBCMatchScoreGuid, SvPb::BCMatchScoreEId },
	{ SVBCTimeoutGuid, SvPb::BCTimeoutEId },
	{ SVBCUnevenGridGuid, SvPb::BCUnevenGridEId },
	{ SVUpperThresholdEquationResultObjectGuid, SvPb::UpperThresholdEquationResultEId },
	{ SVLowerThresholdEquationResultObjectGuid, SvPb::LowerThresholdEquationResultEId },
	{ SVAutoThresholdEquationResultObjectGuid, SvPb::AutoThresholdEquationResultEId },
	{ SVUseExternalATMObjectGuid, SvPb::UseExternalATMEId },
	{ SVUseExternalLTObjectGuid, SvPb::UseExternalLTEId },
	{ SVUseExternalUTObjectGuid, SvPb::UseExternalUTEId },
	{ SVRegressionTestModeGuid, SvPb::RegressionTestModeEId },
	{ SVUseLowerThresholdSelectableObjectGuid, SvPb::UseLowerThresholdSelectableEId },
	{ SVUseLowerThresholdMaxMinusPercentDiffObjectGuid, SvPb::UseLowerThresholdMaxMinusPercentDiffEId },
	{ SVUseLowerThresholdMaxMinusOffsetObjectGuid, SvPb::UseLowerThresholdMaxMinusOffsetEId },
	{ SVUseLowerThresholdMinPlusOffsetObjectGuid, SvPb::UseLowerThresholdMinPlusOffsetEId },
	{ SVLowerThresholdMaxMinusPercentDiffObjectGuid, SvPb::LowerThresholdMaxMinusPercentDiffEId },
	{ SVLowerThresholdMaxMinusOffsetObjectGuid, SvPb::LowerThresholdMaxMinusOffsetEId },
	{ SVLowerThresholdMinPlusOffsetObjectGuid, SvPb::LowerThresholdMinPlusOffsetEId },
	{ SVUseUpperThresholdSelectableObjectGuid, SvPb::UseUpperThresholdSelectableEId },
	{ SVUseUpperThresholdMaxMinusPercentDiffObjectGuid, SvPb::UseUpperThresholdMaxMinusPercentDiffEId },
	{ SVUseUpperThresholdMaxMinusOffsetObjectGuid, SvPb::UseUpperThresholdMaxMinusOffsetEId },
	{ SVUseUpperThresholdMinPlusOffsetObjectGuid, SvPb::UseUpperThresholdMinPlusOffsetEId },
	{ SVUpperThresholdMaxMinusPercentDiffObjectGuid, SvPb::UpperThresholdMaxMinusPercentDiffEId },
	{ SVUpperThresholdMaxMinusOffsetObjectGuid, SvPb::UpperThresholdMaxMinusOffsetEId },
	{ SVUpperThresholdMinPlusOffsetObjectGuid, SvPb::UpperThresholdMinPlusOffsetEId },
	{ SVUseLowerThresholdSelectableBObjectGuid, SvPb::UseLowerThresholdSelectableBEId },
	{ SVUseLowerThresholdMaxMinusPercentDiffBObjectGuid, SvPb::UseLowerThresholdMaxMinusPercentDiffBEId },
	{ SVUseLowerThresholdMaxMinusOffsetBObjectGuid, SvPb::UseLowerThresholdMaxMinusOffsetBEId },
	{ SVUseLowerThresholdMinPlusOffsetBObjectGuid, SvPb::UseLowerThresholdMinPlusOffsetBEId },
	{ SVLowerThresholdMaxMinusPercentDiffBObjectGuid, SvPb::LowerThresholdMaxMinusPercentDiffBEId },
	{ SVLowerThresholdMaxMinusOffsetBObjectGuid, SvPb::LowerThresholdMaxMinusOffsetBEId },
	{ SVLowerThresholdMinPlusOffsetBObjectGuid, SvPb::LowerThresholdMinPlusOffsetBEId },
	{ SVUseUpperThresholdSelectableBObjectGuid, SvPb::UseUpperThresholdSelectableBEId },
	{ SVUseUpperThresholdMaxMinusPercentDiffBObjectGuid, SvPb::UseUpperThresholdMaxMinusPercentDiffBEId },
	{ SVUseUpperThresholdMaxMinusOffsetBObjectGuid, SvPb::UseUpperThresholdMaxMinusOffsetBEId },
	{ SVUseUpperThresholdMinPlusOffsetBObjectGuid, SvPb::UseUpperThresholdMinPlusOffsetBEId },
	{ SVUpperThresholdMaxMinusPercentDiffBObjectGuid, SvPb::UpperThresholdMaxMinusPercentDiffBEId },
	{ SVUpperThresholdMaxMinusOffsetBObjectGuid, SvPb::UpperThresholdMaxMinusOffsetBEId },
	{ SVUpperThresholdMinPlusOffsetBObjectGuid, SvPb::UpperThresholdMinPlusOffsetBEId },
	{ SVLinearThresholdMaxObjectGuid, SvPb::LinearThresholdMaxEId },
	{ SVLinearThresholdMinObjectGuid, SvPb::LinearThresholdMinEId },
	{ SVLinearThresholdDeltaObjectGuid, SvPb::LinearThresholdDeltaEId },
	{ SVShiftToolModeGuid, SvPb::ShiftToolModeEId },
	{ SVShiftToolReferenceXObjectGuid, SvPb::ShiftToolReferenceXEId },
	{ SVShiftToolReferenceYObjectGuid, SvPb::ShiftToolReferenceYEId },
	{ SVImageTransformDisplacementXGuid, SvPb::ImageTransformDisplacementXEId },
	{ SVImageTransformDisplacementYGuid, SvPb::ImageTransformDisplacementYEId },
	{ SVTopResultObjectGuid, SvPb::TopResultEId },
	{ SVLeftResultObjectGuid, SvPb::LeftResultEId },
	{ SVImageTransformSourceXGuid, SvPb::ImageTransformSourceXEId },
	{ SVImageTransformSourceYGuid, SvPb::ImageTransformSourceYEId },
	{ SVOutputEvaluateTranslationXResultObjectGuid, SvPb::OutputEvaluateTranslationXResultEId },
	{ SVOutputEvaluateTranslationYResultObjectGuid, SvPb::OutputEvaluateTranslationYResultEId },
	{ SVOutputEvaluateRotationXResultObjectGuid, SvPb::OutputEvaluateRotationXResultEId },
	{ SVOutputEvaluateRotationYResultObjectGuid, SvPb::OutputEvaluateRotationYResultEId },
	{ SVOutputEvaluateRotationAngleResultObjectGuid, SvPb::OutputEvaluateRotationAngleResultEId },
	{ SVPerformTranslationObjectGuid, SvPb::PerformTranslationEId },
	{ SVTranslationXObjectGuid, SvPb::TranslationXEId },
	{ SVTranslationYObjectGuid, SvPb::TranslationYEId },
	{ SVPerformRotationObjectGuid, SvPb::PerformRotationEId },
	{ SVLearnedTranslationXObjectGuid, SvPb::LearnedTranslationXEId },
	{ SVLearnedTranslationYObjectGuid, SvPb::LearnedTranslationYEId },
	{ SVLearnedRotationXObjectGuid, SvPb::LearnedRotationXEId },
	{ SVLearnedRotationYObjectGuid, SvPb::LearnedRotationYEId },
	{ SVLearnedRotationAngleObjectGuid, SvPb::LearnedRotationAngleEId },
	{ SVUseExtentsOnlyObjectGuid, SvPb::UseExtentsOnlyEId },
	{ SVConditionalToolSetDrawFlagObjectGuid, SvPb::ConditionalToolSetDrawFlagEId },
	{ SVConditionalToolDrawFlagObjectGuid, SvPb::ConditionalToolDrawFlagEId },
	{ SVOutputCenterXObjectGuid, SvPb::OutputCenterXEId },
	{ SVOutputCenterYObjectGuid, SvPb::OutputCenterYEId },
	{ SVOutputStartRadiusObjectGuid, SvPb::OutputStartRadiusEId },
	{ SVOutputEndRadiusObjectGuid, SvPb::OutputEndRadiusEId },
	{ SVOutputStartAngleObjectGuid, SvPb::OutputStartAngleEId },
	{ SVOutputEndAngleObjectGuid, SvPb::OutputEndAngleEId },
	{ SVOutputInterpolationModeObjectGuid, SvPb::OutputInterpolationModeEId },
	{ SVOutputUseFormulaObjectGuid, SvPb::OutputUseFormulaEId },
	{ SVOutputAngularMethodObjectGuid, SvPb::OutputAngularMethodEId },
	{ SVOutputEvaluateCenterXResultObjectGuid, SvPb::OutputEvaluateCenterXResultEId },
	{ SVOutputEvaluateCenterYResultObjectGuid, SvPb::OutputEvaluateCenterYResultEId },
	{ SVOutputEvaluateStartRadiusResultObjectGuid, SvPb::OutputEvaluateStartRadiusResultEId },
	{ SVOutputEvaluateEndRadiusResultObjectGuid, SvPb::OutputEvaluateEndRadiusResultEId },
	{ SVOutputEvaluateStartAngleResultObjectGuid, SvPb::OutputEvaluateStartAngleResultEId },
	{ SVOutputEvaluateEndAngleResultObjectGuid, SvPb::OutputEvaluateEndAngleResultEId },
	{ SVExtentRelativeLeftPositionObjectGuid, SvPb::ExtentRelativeLeftPositionEId },
	{ SVExtentRelativeTopPositionObjectGuid, SvPb::ExtentRelativeTopPositionEId },
	{ SVExtentRelativeRightPositionObjectGuid, SvPb::ExtentRelativeRightPositionEId },
	{ SVExtentRelativeBottomPositionObjectGuid, SvPb::ExtentRelativeBottomPositionEId },
	{ SVExtentWidthObjectGuid, SvPb::ExtentWidthEId },
	{ SVExtentHeightObjectGuid, SvPb::ExtentHeightEId },
	{ SVExtentWidthScaleFactorObjectGuid, SvPb::ExtentWidthFactorContentEId },
	{ SVExtentHeightScaleFactorObjectGuid, SvPb::ExtentHeightFactorContentEId },
	{ SVUpdateAuxiliaryExtentsObjectGuid, SvPb::UpdateAuxiliaryExtentsEId },
	{ SVAuxiliarySourceXObjectGuid, SvPb::AuxiliarySourceXEId },
	{ SVAuxiliarySourceYObjectGuid, SvPb::AuxiliarySourceYEId },
	{ SVAuxiliarySourceAngleObjectGuid, SvPb::AuxiliarySourceAngleEId },
	{ SVAuxiliarySourceImageNameObjectGuid, SvPb::AuxiliarySourceImageNameEId },
	{ SVAuxiliaryDrawTypeObjectGuid, SvPb::AuxiliaryDrawTypeEId },
	{ SVLUTEquationResultObjectGuid, SvPb::LUTEquationResultEId },
	{ SVLUTEquationClipFlagObjectGuid, SvPb::LUTEquationClipFlagEId },
	{ SVOutputLUTVectorObjectGuid, SvPb::OutputLUTVectorEId },
	{ SVUseLUTObjectGuid, SvPb::UseLUTEId },
	{ SVContinuousRecalcLUTObjectGuid, SvPb::ContinuousRecalcLUTEId },
	{ SVLUTModeObjectGuid, SvPb::LUTModeEId },
	{ SVLUTUpperClipObjectGuid, SvPb::LUTUpperClipEId },
	{ SVLUTLowerClipObjectGuid, SvPb::LUTLowerClipEId },
	{ SVLUTMinInputObjectGuid, SvPb::LUTMinInputEId },
	{ SVLUTMaxInputObjectGuid, SvPb::LUTMaxInputEId },
	{ SVLUTMinOutputObjectGuid, SvPb::LUTMinOutputEId },
	{ SVLUTMaxOutputObjectGuid, SvPb::LUTMaxOutputEId },
	{ SVpatAcceptThresholdObjectGuid, SvPb::PatAcceptThresholdEId },
	{ SVpatCertainThresholdObjectGuid, SvPb::PatCertainThresholdEId },
	{ SVpatAccuracyObjectGuid, SvPb::PatAccuracyEId },
	{ SVpatMaxOccurancesObjectGuid, SvPb::PatMaxOccurancesEId },
	{ SVpatSearchAngleModeObjectGuid, SvPb::PatSearchAngleModeEId },
	{ SVpatSpeedObjectGuid, SvPb::PatSpeedEId },
	{ SVpatModelImageFileGuid, SvPb::PatModelImageFileEId },
	{ SVpatSearchAngleObjectGuid, SvPb::PatSearchAngleEId },
	{ SVpatAngleDeltaNegObjectGuid, SvPb::PatAngleDeltaNegEId },
	{ SVpatAngleDeltaPosObjectGuid, SvPb::PatAngleDeltaPosEId },
	{ SVpatAngleToleranceObjectGuid, SvPb::PatAngleToleranceEId },
	{ SVpatAngleAccuracyObjectGuid, SvPb::PatAngleAccuracyEId },
	{ SVpatAngleInterpolationObjectGuid, SvPb::PatAngleInterpolationEId },
	{ SVpatCircularOverscanObjectGuid, SvPb::PatCircularOverscanEId },
	{ SVpatDontCareObjectGuid, SvPb::PatDontCareEId },
	{ SVpatDontCareImageFileGuid, SvPb::PatDontCareImageFileEId },
	{ SVpatPreliminaryAcceptanceThresholdObjectGuid, SvPb::PatPreliminaryAcceptanceThresholdEId },
	{ SVpatFastFindObjectGuid, SvPb::PatFastFindEId },
	{ SVpatModelStepObjectGuid, SvPb::PatModelStepEId },
	{ SVpatModelWidthObjectGuid, SvPb::PatModelWidthEId },
	{ SVpatModelHeightObjectGuid, SvPb::PatModelHeightEId },
	{ SVpatModelCenterXObjectGuid, SvPb::PatModelCenterXEId },
	{ SVpatModelCenterYObjectGuid, SvPb::PatModelCenterYEId },
	{ SVpatDontCareWidthObjectGuid, SvPb::PatDontCareWidthEId },
	{ SVpatDontCareHeightObjectGuid, SvPb::PatDontCareHeightEId },
	{ SVpatBeginningResolutionLevelObjectGuid, SvPb::PatBeginningResolutionLevelEId },
	{ SVpatFinalResolutionLevelObjectGuid, SvPb::PatFinalResolutionLevelEId },
	{ SVpatAdditionalCandidatesObjectGuid, SvPb::PatAdditionalCandidatesEId },
	{ SVpatCandidateSpacingXMinObjectGuid, SvPb::PatCandidateSpacingXMinEId },
	{ SVpatCandidateSpacingYMinObjectGuid, SvPb::PatCandidateSpacingYMinEId },
	{ SVpatResultMatchScoreObjectGuid, SvPb::PatResultMatchScoreEId },
	{ SVpatResultXObjectGuid, SvPb::PatResultXEId },
	{ SVpatResultYObjectGuid, SvPb::PatResultYEId },
	{ SVpatResultAngleObjectGuid, SvPb::PatResultAngleEId },
	{ SVpatResultNumFoundOccurancesObjectGuid, SvPb::PatResultNumFoundOccurancesEId },
	{ SVLinearDataClassGuid, SvPb::LinearDataClassEId },
	{ SVBand0ImageObjectGuid, SvPb::Band0ImageEId },
	{ SVBand1ImageObjectGuid, SvPb::Band1ImageEId },
	{ SVBand2ImageObjectGuid, SvPb::Band2ImageEId },
	{ SVConvertToHSIObjectGuid, SvPb::ConvertToHSIEId },
	{ SVHasROIObjectGuid, SvPb::HasROIEId },
	{ SVColorThresholdEnabledObjectGuid, SvPb::ColorThresholdEnabledEId },
	{ SVBand0UpperThresholdObjectGuid, SvPb::Band0UpperThresholdEId },
	{ SVBand0LowerThresholdObjectGuid, SvPb::Band0LowerThresholdEId },
	{ SVBand0ThresholdExcludeObjectGuid, SvPb::Band0ThresholdExcludeEId },
	{ SVBand0ThresholdEnabledObjectGuid, SvPb::Band0ThresholdEnabledEId },
	{ SVBand1UpperThresholdObjectGuid, SvPb::Band1UpperThresholdEId },
	{ SVBand1LowerThresholdObjectGuid, SvPb::Band1LowerThresholdEId },
	{ SVBand1ThresholdExcludeObjectGuid, SvPb::Band1ThresholdExcludeEId },
	{ SVBand1ThresholdEnabledObjectGuid, SvPb::Band1ThresholdEnabledEId },
	{ SVBand2UpperThresholdObjectGuid, SvPb::Band2UpperThresholdEId },
	{ SVBand2LowerThresholdObjectGuid, SvPb::Band2LowerThresholdEId },
	{ SVBand2ThresholdExcludeObjectGuid, SvPb::Band2ThresholdExcludeEId },
	{ SVBand2ThresholdEnabledObjectGuid, SvPb::Band2ThresholdEnabledEId },
	{ SVEdgeUpperThresholdValueGuid, SvPb::EdgeUpperThresholdValueEId },
	{ SVEdgeADirectionGuid, SvPb::EdgeADirectionEId },
	{ SVEdgeAPolarisationGuid, SvPb::EdgeAPolarisationEId },
	{ SVEdgeAEdgeSelectGuid, SvPb::EdgeAEdgeSelectEId },
	{ SVEdgeAEdgeSelectThisValueGuid, SvPb::EdgeAEdgeSelectThisValueEId },
	{ SVEdgeAIsFixedEdgeMarkerGuid, SvPb::EdgeAIsFixedEdgeMarkerEId },
	{ SVEdgeAPositionGuid, SvPb::EdgeAPositionEId },
	{ SVEdgeAPositionOffsetGuid, SvPb::EdgeAPositionOffsetEId },
	{ SVEdgeALowerThresholdValueGuid, SvPb::EdgeALowerThresholdValueEId },
	{ SVEdgeBDirectionGuid, SvPb::EdgeBDirectionEId },
	{ SVEdgeBPolarisationGuid, SvPb::EdgeBPolarisationEId },
	{ SVEdgeBEdgeSelectGuid, SvPb::EdgeBEdgeSelectEId },
	{ SVEdgeBEdgeSelectThisValueGuid, SvPb::EdgeBEdgeSelectThisValueEId },
	{ SVEdgeBIsFixedEdgeMarkerGuid, SvPb::EdgeBIsFixedEdgeMarkerEId },
	{ SVEdgeBPositionGuid, SvPb::EdgeBPositionEId },
	{ SVEdgeBPositionOffsetGuid, SvPb::EdgeBPositionOffsetEId },
	{ SVEdgeBLowerThresholdValueGuid, SvPb::EdgeBLowerThresholdValueEId },
	{ SVEdgeBUpperThresholdValueGuid, SvPb::EdgeBUpperThresholdValueEId },
	{ SVDrawCriteriaObjectGuid, SvPb::DrawCriteriaEId },
	{ SVResizeInterpolationModeGuid, SvPb::ResizeInterpolationModeEId },
	{ SVResizeOverscanGuid, SvPb::ResizeOverscanEId },
	{ SVResizePerformanceGuid, SvPb::ResizePerformanceEId },
	{ SVLogicalROIImageGuid, SvPb::LogicalROIImageEId },
	{ SVDllFileNameGuid, SvPb::DllFileNameEId },
	{ SVDllToolNameGuid, SvPb::DllToolNameEId },
	{ SVDllToolVersionGuid, SvPb::DllToolVersionEId },
	{ SVShowAllEdgeAOverlaysGuid, SvPb::ShowAllEdgeAOverlaysEId },
	{ SVShowAllEdgeBOverlaysGuid, SvPb::ShowAllEdgeBOverlaysEId },
	{ SVSourceImageNamesGuid, SvPb::SourceImageNamesEId },
	{ SVBCRawDataGuid, SvPb::BCRawDataEId },
	{ SVBCStringFormatGuid, SvPb::BCStringFormatEId },
	{ SVBCThresholdTypeGuid, SvPb::BCThresholdTypeEId },
	{ SVToolCommentTypeObjectGuid, SvPb::ToolCommentTypeEId },
	{ ToolSizeAdjustSizeWidthModeGuid, SvPb::ToolSizeAdjustSizeWidthModeEId },
	{ ToolSizeAdjustSizeHeightModeGuid, SvPb::ToolSizeAdjustSizeHeightModeEId },
	{ ToolSizeAdjustSizePositionXModeGuid, SvPb::ToolSizeAdjustSizePositionXModeEId },
	{ ToolSizeAdjustSizePositionYModeGuid, SvPb::ToolSizeAdjustSizePositionYModeEId },
	{ EQAdjustSizeWidthResultGuid, SvPb::EQAdjustSizeWidthResultEId },
	{ EQAdjustSizeHeightResultGuid, SvPb::EQAdjustSizeHeightResultEId },
	{ EQAdjustSizePositionXResultGuid, SvPb::EQAdjustSizePositionXResultEId },
	{ EQAdjustSizePositionYResultGuid, SvPb::EQAdjustSizePositionYResultEId },
	{ TableTool_MaxRowGuid, SvPb::TableTool_MaxRowEId },
	{ TableObject_NumberOfRowsGuid, SvPb::TableObject_NumberOfRowsEId },
	{ TableAnaylzerSortIsASCGuid, SvPb::TableAnaylzerSortIsASCEId },
	{ TableAnaylzerExcludeHighGuid, SvPb::TableAnaylzerExcludeHighEId },
	{ TableAnaylzerExcludeHigh_LinkGuid, SvPb::TableAnaylzerExcludeHigh_LinkEId },
	{ TableAnaylzerExcludeLowGuid, SvPb::TableAnaylzerExcludeLowEId },
	{ TableAnaylzerExcludeLow_LinkGuid, SvPb::TableAnaylzerExcludeLow_LinkEId },
	{ TableAnaylzerLimitValueGuid, SvPb::TableAnaylzerLimitValueEId },
	{ TableAnaylzerLimitValue_LinkGuid, SvPb::TableAnaylzerLimitValue_LinkEId },
	{ MaxLoopsGuid, SvPb::MaxLoopsEId },
	{ LoopCounterGuid, SvPb::LoopCounterEId },
	{ LinkedLoopsGuid, SvPb::LinkedLoopsEId },
	{ LinkedLoops_LinkedGuid, SvPb::LinkedLoops_LinkedEId },
	{ LoopBreakGuid, SvPb::LoopBreakEId },
	{ LoopBreak_LinkedGuid, SvPb::LoopBreak_LinkedEId },
	{ SVTriggerTimeGuid, SvPb::TriggerTimeEId },

	{ SVOutputImageObjectGuid, SvPb::OutputImageEId },
	{ SVOutputImage2ObjectGuid, SvPb::OutputImageEId+1 },
	{ SVOutputImage3ObjectGuid, SvPb::OutputImageEId+2 },
	{ SVOutputImage4ObjectGuid, SvPb::OutputImageEId+3 },
	{ RingBuffer_IndexGuid[0], SvPb::RingBufferIndexEId },
	{ RingBuffer_IndexGuid[1], SvPb::RingBufferIndexEId+1 },
	{ RingBufferLink_IndexGuid[0], SvPb::RingBufferIndexLinkEId },
	{ RingBufferLink_IndexGuid[1], SvPb::RingBufferIndexLinkEId+1 },

};

void fillExchangeEmbedded(GUID guid, int numbers, SvPb::EmbeddedIdEnum eId, bool dontUseLetterNumbers = false)
{
	for (int i = 0; i < numbers; ++i)
	{
		g_ExchangeEmbeddedID[guid] = (eId + i);
		guid.Data1 += 1;
		if (dontUseLetterNumbers && 9 < (guid.Data1 & 0xF) )
		{
			guid.Data1 = (guid.Data1 & (~0xF)) + 0x10;
		}
	}
}

void fillExchangeEmbedded()
{
	fillExchangeEmbedded(SVCustomFilterCell01Guid, c_NumberOfFilterCells, SvPb::FilterCellEId);
	fillExchangeEmbedded(SVRankingFilterCell01Guid, c_NumberOfFilterCells, SvPb::FilterCellEId);
	fillExchangeEmbedded(aInputObjectGUID, COUNT_OF_INPUT_OUTPUT_IDs, SvPb::ExternalInputEId, true);
	fillExchangeEmbedded(aInputObject_LinkedGUID, COUNT_OF_INPUT_OUTPUT_IDs, SvPb::ExternalInputLinkedEId, true);
	fillExchangeEmbedded(aSVVariantResultObjectGuid, COUNT_OF_INPUT_OUTPUT_IDs, SvPb::ExternalResultEId, true);
	fillExchangeEmbedded(aSVDllDependencyFileNameGuid, COUNT_OF_INPUT_OUTPUT_IDs, SvPb::DllDependencyFileNameEId, true);
	fillExchangeEmbedded(TableColumnValueObjectGuid, SvDef::c_maxTableColumn, SvPb::TableColumnValueEId);

	for (int i = 0; i < SVBlobFeatureGuids.size(); ++i)
	{
		g_ExchangeEmbeddedID[SVBlobFeatureGuids[i]] = (SvPb::BlobFeatureEId + i);
	}
}

SvPb::EmbeddedIdEnum calcEmbeddedId(const _variant_t& rEmbeddedIdVariant, const _variant_t& rObjectName)
{
	SvPb::EmbeddedIdEnum embeddedId;
	switch (rEmbeddedIdVariant.vt)
	{
	case VT_BSTR:
	{
		SVGUID guidId(rEmbeddedIdVariant);
		const auto& iter = g_ExchangeEmbeddedID.find(guidId);
		if (g_ExchangeEmbeddedID.end() != iter)
		{
			embeddedId = iter->second;
			if (SvPb::CustomFilterClippingEId == embeddedId)
			{	//This code is needed, because in the old version the GUID for Rank of the Ranking filter and Clipping of the Custom filter was identically.
				std::string rankName = SvUl::LoadStdString(IDS_OBJECTNAME_RANKINGFILTER_RANKINGRANK);
				if (rankName == SvUl::createStdString(rObjectName))
				{
					embeddedId = SvPb::RankingFilterRankingRankEId;
				}
			}
		}
		else
		{
			embeddedId = SvPb::NoEmbeddedId;
		}
		break;
	}
	case VT_I4:
	case VT_INT:
		embeddedId = static_cast<SvPb::EmbeddedIdEnum>(static_cast<int>(rEmbeddedIdVariant));
		break;
	default:
		embeddedId = SvPb::NoEmbeddedId;
		break;
	}
	return embeddedId;
}

std::unordered_map<std::string, SvPb::EmbeddedIdEnum> g_ExchangeInputEmbeddedID =
{
	{"LUTOperator", SvPb::LUTOperatorInputEId },
	{SvDef::ImageAnalyzerImageName, SvPb::ImageInputEId},
	{"ExternalToolTaskImage0", SvPb::ImageInputEId},
	{"ExternalToolTaskImage1", SvPb::ImageInputEId + 1},
	{"ExternalToolTaskImage2", SvPb::ImageInputEId + 2},
	{"ExternalToolTaskImage3", SvPb::ImageInputEId + 3},
	{"LinearEdgeProcessingImage", SvPb::ImageInputEId},
	{"LinearAnalyzerImage", SvPb::ImageInputEId},
	{"ImagePolarTransformImage", SvPb::ImageInputEId},
	{"UnaryImageOperatorListImage", SvPb::ImageInputEId},
	{"ImageTransformImage", SvPb::ImageInputEId},
	{"PerspectiveToolImage", SvPb::ImageInputEId},
	{"InputImage", SvPb::ImageInputEId},
	{"ShiftToolImage", SvPb::ImageInputEId},
	{SvDef::cColorToolInputImage, SvPb::ImageInputEId},
	{"CylindricalWarpImage", SvPb::ImageInputEId},
	{"ResizeImage", SvPb::ImageInputEId},
	{SvDef::GrayImageConnectionName, SvPb::GrayImageInputEId},
	{SvDef::cInputTag_NewColumn, SvPb::NewColumnInputEId},
	{"LinearAnalyzerOrientation", SvPb::ProfileOrientationInputEId},
	{"LinearImageOperatorListProfileOrientation", SvPb::ProfileOrientationInputEId},
	{"LinearAnalyzerUseRotationAngle", SvPb::UseRoationAngleInputEId},
	{"LinearImageOperatorListUseRotationAngle", SvPb::UseRoationAngleInputEId},
	{SvDef::cInputTag_ExcludeColumn, SvPb::ExcludeColumnInputEId},
	{SvDef::cInputTag_SortColumn, SvPb::SortColumnInputEId},
	{SvDef::WatershedMarkerImageConnectionName, SvPb::MarkerImageInputEId},
	{SvDef::SeedImageConnectionName, SvPb::SeedImageInputEId},
	{"LinearEdgeProcessingMinThreshold", SvPb::MinThresholdInputEId},
	{"LinearEdgeProcessingMaxThreshold", SvPb::MaxThresholdInputEId},
	{"LinearEdgeProcessingDeltaThreshold", SvPb::DeltaThresholdInputEId},
	{"LinearEdgeProcessingInputLinearData", SvPb::LinearDataInputEId},
	{"StringResultValue", SvPb::ResultInputEId},
	{"BarCodeResultString", SvPb::BarCodeResultEId},
	{"DPointXResult", SvPb::ResultInputEId},
	{"MathResult", SvPb::ResultInputEId},
	{"DPointYResult", SvPb::ResultInputEId},
	{"VariantResultValue", SvPb::ResultInputEId},
	{"OCVAnalyzerResultImage", SvPb::ResultInputEId},
	{"DoubleResultValue", SvPb::ResultInputEId},
	{SvDef::cInputTag_LongResultValue, SvPb::ResultInputEId},
	{"PointXResultValue", SvPb::ResultInputEId},
	{"PointYResultValue", SvPb::ResultInputEId},
	{"StatisticsToolValue", SvPb::ResultInputEId},
	{"UpperThreshold", SvPb::UpperThresholdInputEId},
	{"LowerThreshold", SvPb::LowerThresholdInputEId},
	{"AutoThreshold", SvPb::AutoThresholdInputEId},
	{"TransformTranslationXResult",  SvPb::TranslationXResultInputEId},
	{"TransformTranslationYResult",  SvPb::TranslationYResultInputEId},
	{"TransformRotationXResult",  SvPb::RotationXResultInputEId},
	{"TransformRotationYResult",  SvPb::RotationYResultInputEId},
	{"TransformRotationAngleResult",  SvPb::RotationAngleResultInputEId},
	{"PolarTransformCenterXResult",  SvPb::CenterXResultInputEId},
	{"PolarTransformCenterYResult",  SvPb::CenterYResultInputEId},
	{"PolarTransformStartRadiusResult",  SvPb::StartRadiusResultInputEId},
	{"PolarTransformEndRadiusResult",  SvPb::EndRadiusResultInputEId},
	{"PolarTransformStartAngleResult",  SvPb::StartAngleResultInputEId},
	{"PolarTransformEndAngleResult",  SvPb::EndAngleResultInputEId},
	{"ImageArithmeticAImage",  SvPb::ImageArithmeticAImageInputEId},
	{"ImageArithmeticAEnableOffset",  SvPb::ImageArithmeticAEnableOffsetInputEId},
	{"ImageArithmeticAOffsetPoint",  SvPb::ImageArithmeticAOffsetPointInputEId},
	{"ImageArithmeticBImage",  SvPb::ImageArithmeticBImageInputEId},
	{"ImageArithmeticBEnableOffset",  SvPb::ImageArithmeticBEnableOffsetInputEId},
	{"ImageArithmeticBOffsetPoint",  SvPb::ImageArithmeticBOffsetPointInputEId},
	{"ImageArithmeticOperator",  SvPb::ImageArithmeticOperatorInputEId},
	{"ToolSizeAdjustWidth",  SvPb::WidthInputEId},
	{"ToolSizeAdjustHeight",  SvPb::HeightInputEId},
	{"ToolSizeAdjustPositionX",  SvPb::PositionXInputEId},
	{"ToolSizeAdjustPositionY",  SvPb::PositionYInputEId},
	{"RangeValue",  SvPb::RangeValueInputEId},
	{"ColorThresholdBand0Image",  SvPb::Band0ImageInputEId},
	{"ColorThresholdBand1Image",  SvPb::Band1ImageInputEId},
	{"ColorThresholdBand2Image",  SvPb::Band2ImageInputEId},
	{"UserMaskImage",  SvPb::UserMaskImageInputEId},
	{"ToolSetConditionalValue",  SvPb::ToolSetConditionalInputEId},
	{"UserMaskImage",  SvPb::UserMaskImageInputEId},
	{SvDef::cInputTag_SourceTable, SvPb::SourceTableInputEId},
	{"ShiftToolTranslationX",  SvPb::TranslationXInputEId},
	{"ShiftToolTranslationY",  SvPb::TranslationYInputEId},
	{"ToolAuxSourceImage", SvPb::AuxImageInputEId},
	{"ToolConditionalValue", SvPb::ToolConditionalInputEId},
	{"OverlayColor_Tool", SvPb::OverlayColorInputEId},
	{"ImageArithmeticGainEnabled", SvPb::ImageArithmeticGainEnabledEId},
	{"ImageArithmeticOffset", SvPb::ImageArithmeticOffsetEId },
	{"ImageArithmeticGain", SvPb::ImageArithmeticGainEId },
	{"ImageArithmeticUseLut", SvPb::ImageArithmeticUseLutEId },
};

SvPb::EmbeddedIdEnum calcInputEmbeddedId(const _variant_t& rObjectName)
{
	auto iter = g_ExchangeInputEmbeddedID.find(SvUl::createStdString(rObjectName));
	if (g_ExchangeInputEmbeddedID.end() != iter)
	{
		return iter->second;
	}
	return SvPb::NoEmbeddedId;
}


std::unordered_map<SvPb::EmbeddedIdEnum, SvPb::EmbeddedIdEnum> g_EmbeddedIdFromIndirectMap = {{SvPb::InspectedObjectIDLinkEId, SvPb::InspectedObjectIDEId},
		{SvPb::RingBufferLink_DepthEId, SvPb::RingBuffer_DepthEId},
		{SvPb::ExcludeLowerBoundIndirectEId, SvPb::ExcludeLowerBoundEId},
		{SvPb::ExcludeUpperBoundIndirectEId, SvPb::ExcludeUpperBoundEId},
		{SvPb::ExtentWidthFactorContentLinkEId, SvPb::ExtentWidthFactorContentEId},
		{SvPb::ExtentHeightFactorContentLinkEId, SvPb::ExtentHeightFactorContentEId},
		{SvPb::ExtentWidthFactorFormatLinkEId, SvPb::ExtentWidthFactorFormatEId},
		{SvPb::ExtentHeightFactorFormatLinkEId, SvPb::ExtentHeightFactorFormatEId},
		{SvPb::RangeClassFailHighIndirectEId, SvPb::RangeClassFailHighEId},
		{SvPb::RangeClassFailLowIndirectEId, SvPb::RangeClassFailLowEId},
		{SvPb::RangeClassWarnHighIndirectEId, SvPb::RangeClassWarnHighEId},
		{SvPb::RangeClassWarnLowIndirectEId, SvPb::RangeClassWarnLowEId},
		{SvPb::ShapeMaskPropertyCenterXLinkEId, SvPb::CenterXEId},
		{SvPb::ShapeMaskPropertyCenterYLinkEId, SvPb::CenterYEId},
		{SvPb::ShapeMaskPropertyWidthLinkEId, SvPb::WidthEId},
		{SvPb::ShapeMaskPropertyHeightLinkEId, SvPb::HeightEId},
		{SvPb::ShapeMaskPropertySideThicknessLinkEId, SvPb::ShapeMaskPropertySideThicknessEId},
		{SvPb::ShapeMaskPropertyTopBottomThicknessLinkEId, SvPb::ShapeMaskPropertyTopBottomThicknessEId},
		{SvPb::ShapeMaskPropertyOffsetLinkEId, SvPb::ShapeMaskPropertyOffsetEId},
		{SvPb::RingBufferIndexLinkEId, SvPb::RingBufferIndexEId},
		{SvPb::RingBufferIndexLinkEId + 1, SvPb::RingBufferIndexEId + 1},
		{SvPb::FilenameIndex1LinkEId, SvPb::FilenameIndex1EId},
		{SvPb::FilenameIndex2LinkEId, SvPb::FilenameIndex2EId},
		{SvPb::SubfolderSelectionLinkEId, SvPb::SubfolderSelectionEId},
		{SvPb::DirectorynameIndexLinkEId, SvPb::DirectorynameIndexEId},
		{SvPb::SubfolderLocationLinkEId, SvPb::SubfolderLocationEId},
		{SvPb::ArchiveImageFileRootPart1LinkEId, SvPb::ArchiveImageFileRootPart1EId},
		{SvPb::ArchiveImageFileRootPart2LinkEId, SvPb::ArchiveImageFileRootPart2EId},
		{SvPb::ArchiveImageFileRootPart3LinkEId, SvPb::ArchiveImageFileRootPart3EId},
		{SvPb::TableAnaylzerExcludeHigh_LinkEId, SvPb::TableAnaylzerExcludeHighEId},
		{SvPb::TableAnaylzerExcludeLow_LinkEId, SvPb::TableAnaylzerExcludeLowEId},
		{SvPb::TableAnaylzerLimitValue_LinkEId, SvPb::TableAnaylzerLimitValueEId},
		{SvPb::LinkedLoops_LinkedEId, SvPb::LinkedLoopsEId},
		{SvPb::LoopBreak_LinkedEId, SvPb::LoopBreakEId},

};

void fillEmbeddedIdFromIndirectLinked()
{
	for (int i = 0; i < COUNT_OF_INPUT_OUTPUT_IDs; ++i)
	{
		g_EmbeddedIdFromIndirectMap[SvPb::ExternalInputLinkedEId + i] = SvPb::ExternalInputEId + i;
	}
	for (int i = 0; i < COUNT_OF_INPUT_OUTPUT_IDs; ++i)
	{
		g_EmbeddedIdFromIndirectMap[SvPb::ResultObjectLinkedEId + i] = SvPb::ResultObjectValueEId + i;
	}
}
SvPb::EmbeddedIdEnum getEmbeddedIdFromIndirectLinked(SvPb::EmbeddedIdEnum indirectLinkedEmbeddedId)
{
	auto iter = g_EmbeddedIdFromIndirectMap.find(indirectLinkedEmbeddedId);
	if (g_EmbeddedIdFromIndirectMap.end() != iter)
	{
		return iter->second;
	}
	return SvPb::NoEmbeddedId;
}

#pragma region ObjectIdGuids
const GUID RootUidGuid = { 0xa5c94500, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID GlobalUidGuid = { 0xa5c94501, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentUidGuid = { 0xa5c94502, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentModelNumberUidGuid = { 0xa5c94503, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentWinKeyUidGuid = { 0xa5c94504, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentImageUpdateUidGuid = { 0xa5c94505, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentResultUpdateUidGuid = { 0xa5c94506, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentModeIsRunUidGuid = { 0xa5c94507, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentModeIsStopUidGuid = { 0xa5c94508, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentModeIsRegressionTestUidGuid = { 0xa5c94509, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentModeIsTestUidGuid = { 0xa5c9450a, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentModeIsEditUidGuid = { 0xa5c9450b, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentModeValueUidGuid = { 0xa5c9450c, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentModeUidGuid = { 0xa5c9450d, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentAutoSaveUidGuid = { 0xa5c9450e, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentDiskProtectionUidGuid = { 0xa5c9450f, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentStartLastConfigUidGuid = { 0xa5c94510, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentConfigurationName = { 0xa5c94511, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentConfigurationFileName = { 0xa5c94512, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentCurrentDate = { 0xa5c94513, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };
const GUID EnvironmentCurrentTime = { 0xa5c94514, 0xf204, 0x469d,{ 0x8f, 0xff, 0x48, 0x26, 0xef, 0x33, 0x18, 0x51 } };

// Leave 0x100 GUID's free after base to increment in the program
const GUID CameraBaseSerialNumberUidGuid = { 0x80c6a000, 0x6ae8, 0x4733,{ 0x99, 0x68, 0x1d, 0x1, 0xc7, 0x16, 0xc4, 0x60 } };
const GUID CameraBaseGainUidGuid = { 0x80c6a100, 0x6ae8, 0x4733,{ 0x99, 0x68, 0x1d, 0x1, 0xc7, 0x16, 0xc4, 0x60 } };
const GUID CameraBaseShutterUidGuid = { 0x80c6a200, 0x6ae8, 0x4733,{ 0x99, 0x68, 0x1d, 0x1, 0xc7, 0x16, 0xc4, 0x60 } };
const GUID CameraBaseRegPathUidGuid = { 0x80c6a300, 0x6ae8, 0x4733,{ 0x99, 0x68, 0x1d, 0x1, 0xc7, 0x16, 0xc4, 0x60 } };
const GUID CameraBaseRegFileUidGuid = { 0x80c6a400, 0x6ae8, 0x4733,{ 0x99, 0x68, 0x1d, 0x1, 0xc7, 0x16, 0xc4, 0x60 } };
const GUID PpqBaseLengthUidGuid = { 0x6ce19000, 0xce64, 0x4b64,{ 0x90, 0xf1, 0x2a, 0xc7, 0x58, 0xc0, 0x4c, 0x4c } };
const GUID PpqBaseTriggerCountUidGuid = { 0xed697000, 0x546f, 0x4832,{ 0xb6, 0x73, 0xf0, 0xe0, 0xd5, 0x37, 0xec, 0x00 } };
const GUID DigitalInputUidGuid = { 0x6ce19100, 0xce64, 0x4b64,{ 0x90, 0xf1, 0x2a, 0xc7, 0x58, 0xc0, 0x4c, 0x4c } };
const GUID DigitalOutputUidGuid = { 0x6ce19200, 0xce64, 0x4b64,{ 0x90, 0xf1, 0x2a, 0xc7, 0x58, 0xc0, 0x4c, 0x4c } };
const GUID RemoteInputUidGuid = { 0x6ce19300, 0xce64, 0x4b64,{ 0x90, 0xf1, 0x2a, 0xc7, 0x58, 0xc0, 0x4c, 0x4c } };
#pragma endregion ObjectIdGuids

std::unordered_map<GUID, uint32_t> g_ExchangeObjectID;

void fillExchangeObjectId(GUID guid, uint32_t id, int numbers = 0x100)
{
	for (int i = 0; i < numbers; ++i)
	{
		g_ExchangeObjectID[guid] = (id + i);
		guid.Data1 += 1;
	}
}

void fillExchangeObjectId()
{
	g_ExchangeObjectID = {
		{ RootUidGuid, ObjectIdEnum::RootId },
		{ GlobalUidGuid, ObjectIdEnum::GlobalId },
		{ EnvironmentUidGuid, ObjectIdEnum::EnvironmentId },
		{ EnvironmentModelNumberUidGuid, ObjectIdEnum::EnvironmentModelNumberId },
		{ EnvironmentWinKeyUidGuid, ObjectIdEnum::EnvironmentWinKeyId },
		{ EnvironmentImageUpdateUidGuid, ObjectIdEnum::EnvironmentImageUpdateId },
		{ EnvironmentResultUpdateUidGuid, ObjectIdEnum::EnvironmentResultUpdateId },
		{ EnvironmentModeIsRunUidGuid, ObjectIdEnum::EnvironmentModeIsRunId },
		{ EnvironmentModeIsStopUidGuid, ObjectIdEnum::EnvironmentModeIsStopId },
		{ EnvironmentModeIsRegressionTestUidGuid, ObjectIdEnum::EnvironmentModeIsRegressionTestId },
		{ EnvironmentModeIsTestUidGuid, ObjectIdEnum::EnvironmentModeIsTestId },
		{ EnvironmentModeIsEditUidGuid, ObjectIdEnum::EnvironmentModeIsEditId },
		{ EnvironmentModeValueUidGuid, ObjectIdEnum::EnvironmentModeValueId },
		{ EnvironmentModeUidGuid, ObjectIdEnum::EnvironmentModeId },
		{ EnvironmentAutoSaveUidGuid, ObjectIdEnum::EnvironmentAutoSaveId },
		{ EnvironmentDiskProtectionUidGuid, ObjectIdEnum::EnvironmentDiskProtectionId },
		{ EnvironmentStartLastConfigUidGuid, ObjectIdEnum::EnvironmentStartLastConfigId },
		{ EnvironmentConfigurationName, ObjectIdEnum::EnvironmentConfigurationNameId },
		{ EnvironmentConfigurationFileName, ObjectIdEnum::EnvironmentConfigurationFileNameId },
		{ EnvironmentCurrentDate, ObjectIdEnum::EnvironmentCurrentDateId },
		{ EnvironmentCurrentTime, ObjectIdEnum::EnvironmentCurrentTimeId },
	};

	fillExchangeObjectId(CameraBaseSerialNumberUidGuid, ObjectIdEnum::CameraBaseSerialNumberId);
	fillExchangeObjectId(CameraBaseGainUidGuid, ObjectIdEnum::CameraBaseGainId);
	fillExchangeObjectId(CameraBaseShutterUidGuid, ObjectIdEnum::CameraBaseShutterId);
	fillExchangeObjectId(CameraBaseRegPathUidGuid, ObjectIdEnum::CameraBaseRegPathId);
	fillExchangeObjectId(CameraBaseRegFileUidGuid, ObjectIdEnum::CameraBaseRegFileId);
	fillExchangeObjectId(PpqBaseLengthUidGuid, ObjectIdEnum::PpqBaseLengthId);
	fillExchangeObjectId(PpqBaseTriggerCountUidGuid, ObjectIdEnum::PpqBaseTriggerCountId);
	fillExchangeObjectId(DigitalInputUidGuid, ObjectIdEnum::DigitalInputId);
	fillExchangeObjectId(DigitalOutputUidGuid, ObjectIdEnum::DigitalOutputId);
	fillExchangeObjectId(RemoteInputUidGuid, ObjectIdEnum::RemoteInputId);
}

uint32_t calcObjectId(const std::string& objectIdString)
{
	uint32_t objectId = SvDef::InvalidObjectId;
	int ret = std::sscanf(objectIdString.c_str(), "{#%u}", &objectId);
	if (1 == ret)
	{
		SVObjectManagerClass::Instance().fitNextObjectId(objectId+1);
	}
	else
	{	//if objectId-syntax not found, look for old guid style.
		SVGUID guidId(objectIdString);
		if (GUID_NULL != guidId)
		{
			const auto& iter = g_ExchangeObjectID.find(guidId);
			if (g_ExchangeObjectID.end() != iter)
			{
				objectId = iter->second;
			}
			else
			{
				objectId = SVObjectManagerClass::Instance().getNextObjectId();
				g_ExchangeObjectID[guidId] = objectId;
			}
		}
	}
	return objectId;
}

uint32_t calcObjectId(const _variant_t& rObjectIdVariant)
{
	if (VT_BSTR == rObjectIdVariant.vt)
	{
		return calcObjectId(SvUl::createStdString(rObjectIdVariant));
	}
	else
	{
		return SvDef::InvalidObjectId;
	}
}

std::string convertObjectIdToString(uint32_t objectId)
{
	return SvUl::Format("{#%u}", objectId);
}

_variant_t convertObjectIdToVariant(uint32_t objectId)
{
	_variant_t svVariant;
	svVariant.SetString(convertObjectIdToString(objectId).c_str());
	return svVariant;
}

uint32_t getNextAcquisitionId()
{
	static uint32_t nextPos = 0;
	if (0x100 > nextPos)
	{
		//add nextPos and post increase the pos.
		return ObjectIdEnum::AcquisitionId + (nextPos++);
	}
	return SvDef::InvalidObjectId;
}

bool isSafeToDeleteWebAppIdsJson()
{
	const auto& path = SvStl::GlobalPath::Inst().GetRunPath("WebApp.json");

	std::ifstream ifs(path.c_str(), std::fstream::in);
	if (!ifs.is_open())
	{
		// WebApp.json does not even exist
		return true;
	}

	rapidjson::Document doc;
	rapidjson::IStreamWrapper isw(ifs);
	doc.ParseStream(isw);

	if (!doc.IsObject())
	{
		// Unable to parse WebApp.json
		// Let's keep the ids file in place just to be sure
		return true;
	}

	auto it = doc.FindMember("version");
	if (it == doc.MemberEnd())
	{
		// Json does not contain version information, but the files that need
		// the WebAppIds.json for conversion do contain one. So let's just
		// delete the file.
		return true;
	}

	if (!it->value.IsString())
	{
		// With v3.0.0 with switched from int versions to string version.
		// Before, it was just "version":3 and for these old version we
		// do need the file. return false so the file is not deleted.
		return false;
	}

	const auto version = std::string(it->value.GetString());
	const auto prefix = version.substr(0, 2);

	if (prefix == "1." || prefix == "2." || prefix == "3." || prefix == "4.")
	{
		// These are the version where we need the file
		return false;
	}

	// All other version should not need the file, so safe to delete it.
	return true;
}

std::string saveObjectIdMapping()
{
	FILE* file = nullptr;
	fopen_s(&file, SvStl::GlobalPath::Inst().GetRunPath(SvDef::cWebApp).c_str(), _T("r"));
	if (nullptr != file)
	{	//only save IdMapping if WebApp exist.
		fclose(file);
		file = nullptr;

		auto maxIter = std::max_element(g_ExchangeObjectID.begin(), g_ExchangeObjectID.end(), [](auto a, auto b) { return a.second < b.second; });
		if (g_ExchangeObjectID.end() != maxIter && ObjectIdEnum::FirstPossibleObjectId < maxIter->second)
		{
			auto name = SvStl::GlobalPath::Inst().GetRunPath(SvDef::cWebAppIds);
			fopen_s(&file, name.c_str(), _T("w"));
			if (nullptr != file)
			{
				_ftprintf(file, _T("{\n\"guidToObjectIdMapping\": {\n"));
				bool notFirst = false;
				for (auto& rEntry : g_ExchangeObjectID)
				{
					if (notFirst)
					{
						_ftprintf(file, ",\n");
					}
					notFirst = true;
					_ftprintf(file, _T("\"%s\" : %u"), SVGUID(rEntry.first).ToString().c_str(), rEntry.second);
				}
				_ftprintf(file, _T("\n}\n}\n"));
				fclose(file);
			}
			return name;
		}
	}
	return "";
}

void resetExchangeObjectIdMap()
{
	g_ExchangeObjectID.clear();
}

#pragma endregion Declarations

SVClassRegisterListClass& SVClassRegisterListClass::Instance()
{
	static SVClassRegisterListClass Object;

	return Object;
}

SVClassRegisterListClass::SVClassRegisterListClass()
{
}

SVClassRegisterListClass::~SVClassRegisterListClass()
{
	Shutdown();
}

// Construct class by ClassID, 
// returns nullptr, if this class type is not available!
// Otherwise, it returns a SVObjectClass* to the new object.
// You have to destroy this new object by yourself by using delete
SVObjectClass* SVClassRegisterListClass::ConstructNewObject(SvPb::ClassIdEnum classId)
{
	SVObjectClass* pResult(nullptr);
	SVClassRegisterMap::const_iterator Iter = m_Registers.find( classId );

	if( m_Registers.end() != Iter )
	{
		if( nullptr != Iter->second )
		{
			pResult = Iter->second->Construct();
		}
	}

	return pResult;
}

void SVClassRegisterListClass::Add( SVClassRegisterClass* pClass )
{
	if( nullptr != pClass )
	{
		SVClassRegisterMap::const_iterator l_Iter = m_Registers.find( pClass->GetClassID() );

		if( l_Iter == m_Registers.end() )
		{
			m_Registers[ pClass->GetClassID() ] = pClass;
		}
		#ifdef _DEBUG
			else
			{
				std::string Temp = SvUl::Format( _T("Duplicate Class encountered\n ClassName: %s\n ClassID: %d"), pClass->GetClassName(), pClass->GetClassID());
				::OutputDebugString( Temp.c_str() );
				assert(false);
			}
		#endif
	}
	#ifdef _DEBUG
	else
	{
		assert(false);//("Invalid Class encountered\n");
	}
	#endif
}

void SVClassRegisterListClass::Shutdown()
{
	m_Registers.clear();
}

