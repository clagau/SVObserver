//******************************************************************************
//* COPYRIGHT (c) 2003 by SVResearch, Harrisburg
//* All Rights Reserved
//******************************************************************************
//* .Module Name     : SVClassRegisterListClass
//* .File Name       : $Workfile:   SVClassRegisterListClass.cpp  $
//* ----------------------------------------------------------------------------
//* .Current Version : $Revision:   1.0  $
//* .Check In Date   : $Date:   22 Apr 2013 16:35:30  $
//******************************************************************************

#pragma region Includes
#include "stdafx.h"
#include "SVClassRegisterListClass.h"
#include "SVClassRegisterClass.h"
#include "SVObjectClass.h"
#include "SVProtobuf/SVO-Enum.h"
#include "SVUtilityLibrary/StringHelper.h"
#pragma endregion Includes

#pragma region Declarations
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

const GUID SVBoolValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x3e, 0xd, 0xd } };
const GUID SVDWordValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x4e, 0xd, 0xd } };
const GUID SVDoubleValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x5e, 0xd, 0xd } };
const GUID DoubleSortValueObjectGuid = { 0x2182eafb, 0xf354, 0x42f5,{ 0xac, 0x2e, 0x7a, 0x4a, 0x99, 0xc3, 0xb9, 0x4 } };
const GUID SVLongValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x6e, 0xd, 0xd } };
const GUID SVPointValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x7e, 0xd, 0xd } };
const GUID SVDPointValueObjectClassGuid = { 0x71a10856, 0x2b37, 0x4612,{ 0xa4, 0xe3, 0x5d, 0x97, 0x78, 0x2, 0x2c, 0x14 } };
const GUID SVByteValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x8e, 0xd, 0xd } };
const GUID SVStringValueObjectClassGuid = { 0x62fb5910, 0x6528, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x5f, 0xd, 0xd } };
const GUID SVStaticStringValueObjectClassGuid = { 0xe9c59b74, 0x2018, 0x47c0,{ 0xb4, 0xcb, 0x4b, 0x8e, 0x91, 0x87, 0xa6, 0xf } };
const GUID SVFileNameValueObjectClassGuid = { 0x5b48b354, 0x2eb3, 0x11d5,{ 0xa9, 0xb8, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVInt64ValueObjectClassGuid = { 0x7a8535a5, 0xceb, 0x4953,{ 0xb9, 0xb8, 0xea, 0xe, 0x5f, 0x14, 0x14, 0x8c } };
const GUID SVCharValueObjectClassGuid = { 0x7a8535a6, 0xceb, 0x4953,{ 0xb9, 0xb8, 0xea, 0xe, 0x5f, 0x14, 0x14, 0x8c } };
const GUID SVTimerValueObjectClassGuid = { 0x28ecad3e, 0x2325, 0x4795,{ 0x93, 0xe8, 0x78, 0xd5, 0x72, 0xf0, 0xc3, 0x7b } };
const GUID SVVariantValueObjectClassGuid = { 0x8661367d, 0xbf3d, 0x4cac,{ 0xa9, 0xe4, 0x53, 0x35, 0xb8, 0x66, 0x1e, 0x23 } };
const GUID SVEnumerateValueObjectClassGuid = { 0xb038c414, 0xe896, 0x11d3,{ 0xa9, 0x4c, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVImageClassGuid = { 0x6f2b5910, 0x6528, 0x11d1,{ 0x92, 0x51, 0x0, 0x0, 0xf8, 0x45, 0x69, 0x69 } };
const GUID SVInspectionProcessGuid = { 0xbab48424, 0xc2d8, 0x11d2,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x1e, 0xd, 0xd } };
const GUID SVToolSetClassGuid = { 0xd6def5d9, 0xc2de, 0x11d2,{ 0xac, 0x61, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVWindowToolClassGuid = { 0x86ddf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVMathToolClassGuid = { 0x86ddf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc1, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVStatisticsToolClassGuid = { 0x86ddf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc3, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID RingBufferToolGuid = { 0x9ead7f0e, 0xacbe, 0x468f,{ 0x99, 0xf3, 0x93, 0x8, 0x47, 0x1d, 0xf3, 0xf3 } };
const GUID SVArchiveToolClassGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc6, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVAcquisitionToolClassGuid = { 0x45588b9a, 0x7283, 0x1167,{ 0xf8, 0xa3, 0x1f, 0xc4, 0x7, 0x0, 0xfd, 0xa0 } };
const GUID SVTransformationToolClassGuid = { 0xbdf6dc5b, 0xde42, 0x11d3,{ 0xa8, 0x8b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVShiftToolClassGuid = { 0xdd22376e, 0x4d86, 0x4173,{ 0x91, 0x32, 0x65, 0xbb, 0xa5, 0xf4, 0xb9, 0x18 } };
const GUID SVCylindricalWarpToolClassGuid = { 0x93dbf9c1, 0xbcee, 0x4654,{ 0x9c, 0xa5, 0x28, 0x4, 0x47, 0xba, 0x7d, 0x5f } };
const GUID SVPerspectiveToolClassGuid = { 0xb465d824, 0x7e69, 0x4e54,{ 0x89, 0xd6, 0xb6, 0xad, 0xc5, 0x90, 0x9f, 0xb2 } };
const GUID SVImageToolClassGuid = { 0x5cc0b7d3, 0x6964, 0x11d3,{ 0xa8, 0x6f, 0x0, 0x0, 0x2c, 0x0, 0xdd, 0x5 } };
const GUID SVLinearToolClassGuid = { 0x33e8442, 0xcee8, 0x4447,{ 0xb6, 0x6f, 0x7f, 0x97, 0x98, 0x8a, 0x39, 0xcc } };
const GUID SVColorToolClassGuid = { 0x33e41275, 0x45fa, 0x11d4,{ 0xa9, 0x24, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID SVResizeToolGuid = { 0xb7b9c748, 0xbfc4, 0x4863,{ 0x85, 0xb6, 0xe3, 0x37, 0x8a, 0x90, 0xc1, 0x75 } };
const GUID SVLoadImageToolClassGuid = { 0x471d5437, 0x720b, 0x11d3,{ 0xa8, 0x80, 0x22, 0xa9, 0x0, 0x0, 0x51, 0xf0 } };
const GUID TableToolGuid = { 0x8d4ee252, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3a } };
const GUID TableAnalyzerToolGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x17 } };
const GUID SVPolarTransformationToolClassGuid = { 0xd21cced, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID LoopToolClassGuid = { 0xc71e73b5, 0x4822, 0x4e94,{ 0xb6, 0xf8, 0x36, 0x5a, 0xbf, 0x64, 0x98, 0xbf } };
const GUID SVExternalToolGuid = { 0x16dde450, 0x10c5, 0x4926,{ 0xbd, 0xf3, 0x68, 0xd3, 0xf1, 0x59, 0x2c, 0x3f } };
const GUID SVBlobAnalyzerClassGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xbc, 0x0, 0xa2, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVPixelAnalyzerClassGuid = { 0x68dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xbd, 0x0, 0xa3, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVLuminanceAnalyzerClassGuid = { 0xb4cf7400, 0x4454, 0x11d3,{ 0xa7, 0x9b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x76 } };
const GUID SVHistogramAnalyzerClassGuid = { 0x3e5c8100, 0x2e0d, 0x4ab0,{ 0x85, 0x12, 0xd5, 0x7b, 0xcf, 0x47, 0x5d, 0x83 } };
const GUID SVPatternAnalyzerClassGuid = { 0xf929719c, 0xeeab, 0x11d3,{ 0xa8, 0x90, 0x0, 0x10, 0x6f, 0x2, 0x17, 0x42 } };
const GUID SVBarCodeAnalyzerClassGuid = { 0xf52e8df6, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVOCVAnalyzerClassGuid = { 0x70d8f917, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVLinearPixelCountingLineAnalyzerClassGuid = { 0x782d5b52, 0xb548, 0x4e03,{ 0xbd, 0x84, 0xff, 0xf6, 0xae, 0x48, 0x63, 0x39 } };
const GUID SVLinearEdgeCountingLineAnalyzerClassGuid = { 0x31aeeb38, 0x9102, 0x4a50,{ 0xaf, 0x98, 0x7f, 0xaa, 0x2f, 0x60, 0xf8, 0x28 } };
const GUID SVLinearEdgePositionLineAnalyzerClassGuid = { 0x58ab741e, 0x752a, 0x43fd,{ 0x95, 0x86, 0xa3, 0xa6, 0xf9, 0x42, 0x19, 0xb7 } };
const GUID SVLinearMeasurementAnalyzerClassGuid = { 0xe95676cf, 0x3658, 0x4d23,{ 0xbf, 0xee, 0xc5, 0x74, 0xc8, 0xf8, 0x4a, 0x1c } };
const GUID SVLinearMaximumBackgroundObjectLineAnalyzerClassGuid = { 0x96f91065, 0x9ef2, 0x4b80,{ 0x90, 0x39, 0xdf, 0xd1, 0xbe, 0xd6, 0x57, 0x18 } };
const GUID SVLinearMaximumForegroundObjectLineAnalyzerClassGuid = { 0xbb4f2275, 0x6481, 0x4914,{ 0x9d, 0x53, 0x9d, 0x6f, 0x1b, 0x9a, 0xf9, 0xa5 } };
const GUID SVLinearMaximumObjectLineAnalyzerClassGuid = { 0x2d8a0bdc, 0xe0d3, 0x4127,{ 0xae, 0xbf, 0x97, 0x9f, 0xee, 0x42, 0x1a, 0xe5 } };
const GUID TableAnaylzerSortGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x19 } };
const GUID TableAnaylzerExcludeGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1A } };
const GUID TableAnaylzerLimitGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1B } };
const GUID TableAnaylzerAddColumnGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x1D } };
const GUID SVPointXResultClassGuid = { 0x131b613b, 0x5b2d, 0x11d3,{ 0xa8, 0x58, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVPointYResultClassGuid = { 0x131b613c, 0x5b2d, 0x11d3,{ 0xa8, 0x58, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVDPointXResultClassGuid = { 0x567f8706, 0xd394, 0x4a07,{ 0xb5, 0xf1, 0xa9, 0xbb, 0x91, 0x92, 0x56, 0xfb } };
const GUID SVDPointYResultClassGuid = { 0x71dbc40, 0x8197, 0x4ba2,{ 0x97, 0xde, 0xdb, 0x2, 0xd8, 0x5a, 0x2b, 0x77 } };
const GUID SVDoubleResultClassGuid = { 0x8c0429f9, 0x5faf, 0x11d3,{ 0xa7, 0xe2, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLongResultClassGuid = { 0x131b613d, 0x5b2d, 0x11d3,{ 0xa8, 0x58, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6d } };
const GUID SVVariantResultClassGuid = { 0x79cb37ec, 0x2a7f, 0x4c0b,{ 0xb2, 0xef, 0xde, 0x79, 0xe1, 0x50, 0xae, 0x22 } };
const GUID SVStringResultClassGuid = { 0xf52e8df8, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVBarCodeResultClassGuid = { 0xf52e8dfb, 0x7a94, 0x11d3,{ 0xa7, 0xce, 0x0, 0x10, 0x6f, 0x1, 0xa, 0x93 } };
const GUID SVOCVAnalyzerResultClassGuid = { 0x70d8f918, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVOCVCharacterResultClassGuid = { 0x70d8f92a, 0x30e7, 0x48da,{ 0x9a, 0x58, 0x53, 0x82, 0xf1, 0xe4, 0xf8, 0xc } };
const GUID SVRangeClassGuid = { 0x86dcf5d9, 0xc2de, 0x11d2,{ 0xac, 0xb9, 0x0, 0xc0, 0x4f, 0xc3, 0x8f, 0x76 } };
const GUID SVSmoothFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x02, 0x44, 0xd, 0xd } };
const GUID SVSharpenFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x03, 0x44, 0xd, 0xd } };
const GUID SVSharpen2FilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x04, 0x44, 0xd, 0xd } };
const GUID SVHorizEdgeFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x05, 0x44, 0xd, 0xd } };
const GUID SVVertEdgeFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x06, 0x44, 0xd, 0xd } };
const GUID SVEdgeDetectFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x07, 0x44, 0xd, 0xd } };
const GUID SVEdgeDetect2FilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x08, 0x44, 0xd, 0xd } };
const GUID SVLaplacianEdgeFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x09, 0x44, 0xd, 0xd } };
const GUID SVLaplacianEdge2FilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x0a, 0x44, 0xd, 0xd } };
const GUID SVMaxMinusMinFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x0b, 0x44, 0xd, 0xd } };
const GUID SVErosionFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x0d, 0x44, 0xd, 0xd } };
const GUID SVDilationFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x0e, 0x44, 0xd, 0xd } };
const GUID SVOpeningFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x0f, 0x44, 0xd, 0xd } };
const GUID SVClosingFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x10, 0x44, 0xd, 0xd } };
const GUID SVCustomFilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x13, 0x44, 0xd, 0xd } };
const GUID Custom2FilterClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x14, 0x44, 0xd, 0xd } };
const GUID SVRankingFilterClassGuid = { 0xd2675f50, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x13, 0x44, 0xd, 0xd } };
const GUID Ranking2FilterClassGuid = { 0xd2675f51, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x13, 0x44, 0xd, 0xd } };
const GUID SVSkeletonFilterClassGuid = { 0x81983088, 0xfeaa, 0x47e7,{ 0x83, 0xfc, 0x53, 0x9a, 0x72, 0xc9, 0x15, 0xc8 } };
const GUID SVThinningFilterClassGuid = { 0xd4f9d765, 0xc168, 0x4300,{ 0x91, 0x28, 0x89, 0xdb, 0x40, 0xd9, 0xcb, 0x60 } };
const GUID SVThickeningFilterClassGuid = { 0xa5664844, 0xd021, 0x413f,{ 0xb2, 0xe5, 0xb6, 0x82, 0xf6, 0xc3, 0x9a, 0xa5 } };
const GUID SVWatershedFilterClassGuid = { 0xadd53485, 0x3f05, 0x4cef,{ 0x8f, 0x2, 0x3, 0x77, 0x14, 0x2f, 0xa1, 0x2d } };
const GUID SVEraseBorderBlobsFilterClassGuid = { 0x60ab07dd, 0x423f, 0x4d0b,{ 0x9e, 0xd2, 0x6e, 0x63, 0xba, 0x8b, 0xd2, 0x47 } };
const GUID SVExtractHolesFilterClassGuid = { 0x60ab07dd, 0x423f, 0x4d0b,{ 0x9e, 0xd2, 0x6e, 0x63, 0xba, 0x8b, 0xd2, 0x48 } };
const GUID SVFillHolesFilterClassGuid = { 0x60ab07dd, 0x423f, 0x4d0b,{ 0x9e, 0xd2, 0x6e, 0x63, 0xba, 0x8b, 0xd2, 0x49 } };
const GUID SVReconstructFilterClassGuid = { 0x60ab07dd, 0x423f, 0x4d0b,{ 0x9e, 0xd2, 0x6e, 0x63, 0xba, 0x8b, 0xd2, 0x50 } };
const GUID SVThresholdClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x01, 0x44, 0xd, 0xd } };
const GUID SVUserMaskOperatorClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0x12, 0x44, 0xd, 0xd } };
const GUID SVStdImageOperatorListClassGuid = { 0xd2675f29, 0xc2db, 0x11d1,{ 0x96, 0x11, 0x0, 0x0, 0xf8, 0x5e, 0xd, 0xd } };
const GUID SVInPlaceImageOperatorListClassGuid = { 0x2d8eb69, 0xff48, 0x11d3,{ 0xa9, 0x6d, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLinearImageOperatorListClassGuid = { 0x10ae3db6, 0xe433, 0x4215,{ 0x80, 0x71, 0x2c, 0xab, 0x1c, 0x80, 0xb1, 0xe4 } };
const GUID SVEquationClassGuid = { 0x5dd374e7, 0x4f36, 0x11d3,{ 0xa7, 0xc8, 0x0, 0x10, 0x6f, 0x1, 0x9, 0x6c } };
const GUID SVConditionalClassGuid = { 0x4cdb299b, 0x5bc0, 0x11d3,{ 0xa7, 0xdd, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVMathEquationClassGuid = { 0x4cdb299d, 0x5bc0, 0x11d3,{ 0xa7, 0xdd, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVLinearEdgeAProcessingClassGuid = { 0x12ee01a8, 0xfe81, 0x4ad3,{ 0xaf, 0x3f, 0x57, 0x2f, 0x9, 0xe7, 0xbf, 0xa7 } };
const GUID SVLinearEdgeBProcessingClassGuid = { 0x12ee01a8, 0xfe82, 0x4ad3,{ 0xaf, 0x3f, 0x57, 0x2f, 0x9, 0xe7, 0xbf, 0xa7 } };
const GUID SVDataBufferClassGuid = { 0xdc1f4808, 0x66f3, 0x11d3,{ 0xa8, 0x6b, 0x0, 0x18, 0x0, 0x0, 0x58, 0x11 } };
const GUID SVImageArithmeticClassGuid = { 0x5cc0b7dd, 0x6964, 0x11d3,{ 0xa8, 0x6f, 0x0, 0x1c, 0x55, 0x0, 0x7d, 0x3c } };
const GUID SVUpperThresholdEquationClassGuid = { 0x4598ab0e, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0x3f, 0xe0, 0x23, 0x0, 0x10, 0x0 } };
const GUID SVLowerThresholdEquationClassGuid = { 0x4598ab34, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0xd0, 0x3d, 0x4f, 0x0, 0x44, 0x0 } };
const GUID SVAutoThresholdEquationClassGuid = { 0x4598ab5b, 0x7a84, 0x11d3,{ 0xa8, 0x93, 0x2d, 0x0, 0x33, 0x0, 0xa, 0xb3 } };
const GUID SVExternalToolTaskGuid = { 0xba649a3c, 0x2ef1, 0x4eaf,{ 0xb1, 0x7b, 0xf9, 0x2d, 0xcf, 0xb2, 0x32, 0x38 } };
const GUID SVImageTransformClassGuid = { 0xbdf6dc64, 0xde42, 0x11d3,{ 0xa8, 0x8b, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVPolarTransformClassGuid = { 0xec839a34, 0xeb75, 0x11d3,{ 0xa9, 0x52, 0x7, 0x10, 0x6f, 0x0, 0x18, 0x38 } };
const GUID SVImagePolarTransformClassGuid = { 0xd21cd37, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVEvaluateTranslationXClassGuid = { 0x62df95a9, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVEvaluateTranslationYClassGuid = { 0x62df95aa, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVEvaluateRotationXClassGuid = { 0x62df95ab, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVEvaluateRotationYClassGuid = { 0x62df95ac, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVEvaluateRotationAngleClassGuid = { 0x62df95ad, 0xdf02, 0x11d3,{ 0xa8, 0x8c, 0x0, 0x10, 0x6f, 0x0, 0xc, 0x7d } };
const GUID SVEvaluateCenterXClassGuid = { 0xd21ccf5, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x0, 0x17, 0x36 } };
const GUID SVEvaluateCenterYClassGuid = { 0xd21ccfc, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x32 } };
const GUID SVEvaluateStartRadiusClassGuid = { 0xd21cd04, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x4, 0x18, 0x36 } };
const GUID SVEvaluateEndRadiusClassGuid = { 0xd21cd0e, 0xed1c, 0x11d3,{ 0xa9, 0x54, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVEvaluateStartAngleClassGuid = { 0xd21cd1c, 0xed1c, 0x11d3,{ 0xa9, 0x53, 0x1, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVEvaluateEndAngleClassGuid = { 0xd21cd2b, 0xed1c, 0x11d3,{ 0xa9, 0x58, 0x0, 0x11, 0x6f, 0x0, 0x18, 0x40 } };
const GUID SVLUTEquationClassGuid = { 0x4c478d7f, 0xfbf9, 0x11d3,{ 0xa9, 0x6a, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVLUTOperatorClassGuid = { 0x4c478d96, 0xfbf9, 0x11d3,{ 0xa9, 0x6a, 0x0, 0x10, 0x6f, 0x0, 0x18, 0x36 } };
const GUID SVColorThresholdClassGuid = { 0xdb745833, 0x46d1, 0x11d4,{ 0xa9, 0x25, 0x0, 0x10, 0x6f, 0x3, 0xd, 0x16 } };
const GUID ToolSizeAdjustTaskGuid = { 0x4f6b67ea, 0xaedb, 0x46fb,{ 0xaa, 0x7b, 0xe6, 0x90, 0xe7, 0xc4, 0xa6, 0x80 } };
const GUID TableColumnEquationGuid = { 0x8d4ee252, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3c } };
const GUID TableAddColumnEquationGuid = { 0x8d4ee253, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3c } };
const GUID TableFillObjectGuid = { 0x8d4ee252, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3e } };
const GUID TableCopyObjectGuid = { 0xb74bc930, 0xf60f, 0x4cea,{ 0xbf, 0x3a, 0xd0, 0x7e, 0x25, 0xa2, 0xe8, 0x18 } };
const GUID SVRemoteOutputObjectGUID = { 0xd17799f, 0xb317, 0x4af1,{ 0x90, 0x4d, 0xc2, 0xa6, 0xd6, 0xcc, 0x41, 0xe8 } };
const GUID EQAdjustSizeWidthGuid = { 0xf4021122, 0x9b73, 0x41bf,{ 0x96, 0xaa, 0x89, 0xbf, 0x1f, 0x10, 0xe, 0xd5 } };
const GUID EQAdjustSizeHeightGuid = { 0xe39723ff, 0x5299, 0x4a8f,{ 0x94, 0x4e, 0x6b, 0xbe, 0x11, 0xeb, 0xc8, 0x7 } };
const GUID EQAdjustSizePositionXGuid = { 0xbd589ca5, 0x80e6, 0x41fb,{ 0xac, 0x6e, 0xc0, 0x87, 0xcc, 0xb5, 0x9f, 0xf0 } };
const GUID EQAdjustSizePositionYGuid = { 0xc5547ceb, 0xc7d1, 0x4d2e,{ 0xa7, 0x99, 0xaa, 0xe8, 0x73, 0xac, 0x27, 0x1e } };
const GUID SVShapeMaskHelperClassGuid = { 0x3f24390d, 0xfd80, 0x4d40,{ 0xba, 0x9f, 0x56, 0x15, 0x29, 0xaa, 0x1d, 0x73 } };
const GUID TableObjectGuid = { 0x8d4ee252, 0x1d8b, 0x4f19,{ 0xbe, 0x9a, 0x54, 0x4a, 0x6c, 0xcf, 0x55, 0x3d } };
const GUID SVRemoteOutputGroupGUID = { 0x78c51773, 0x3fb4, 0x4e92,{ 0xad, 0x86, 0xa5, 0x2c, 0xdb, 0x17, 0x6a, 0x53 } };
const GUID SVRemoteOutputDataControllerGUID = { 0x109f88b8, 0x376b, 0x4858,{ 0xa7, 0x1, 0xbb, 0xef, 0x7e, 0x3b, 0xa, 0x15 } };

typedef std::unordered_map<GUID, SvPb::ClassIdEnum>  ExchangeClassMap;
ExchangeClassMap g_ExchangeClassID = {
	{ SVBoolValueObjectClassGuid, SvPb::BoolValueClassId },
	{ SVDWordValueObjectClassGuid, SvPb::DWordValueClassId },
	{ SVDoubleValueObjectClassGuid, SvPb::DoubleValueClassId },
	{ DoubleSortValueObjectGuid, SvPb::DoubleSortValueClassId },
	{ SVLongValueObjectClassGuid, SvPb::LongValueClassId },
	{ SVPointValueObjectClassGuid, SvPb::PointValueClassId },
	{ SVDPointValueObjectClassGuid, SvPb::DPointValueClassId },
	{ SVByteValueObjectClassGuid, SvPb::ByteValueClassId },
	{ SVStaticStringValueObjectClassGuid, SvPb::StringValueClassId },
	{ SVStringValueObjectClassGuid, SvPb::StringValueClassId },
	{ SVFileNameValueObjectClassGuid, SvPb::FileNameValueClassId },
	{ SVInt64ValueObjectClassGuid, SvPb::Int64ValueClassId },
	{ SVCharValueObjectClassGuid, SvPb::CharValueClassId },
	{ SVTimerValueObjectClassGuid, SvPb::TimerValueClassId },
	{ SVVariantValueObjectClassGuid, SvPb::VariantValueClassId },
	{ SVEnumerateValueObjectClassGuid, SvPb::EnumerateValueClassId },
	{ SVImageClassGuid , SvPb::ImageClassId },
	{ SVInspectionProcessGuid , SvPb::InspectionProcessClassId },
	{ SVToolSetClassGuid, SvPb::ToolSetClassId },
	{ SVWindowToolClassGuid, SvPb::WindowToolClassId },
	{ SVMathToolClassGuid, SvPb::MathToolClassId },
	{ SVStatisticsToolClassGuid, SvPb::StatisticsToolClassId },
	{ RingBufferToolGuid, SvPb::RingBufferToolClassId },
	{ SVArchiveToolClassGuid, SvPb::ArchiveToolClassId },
	{ SVAcquisitionToolClassGuid, SvPb::AcquisitionToolClassId },
	{ SVTransformationToolClassGuid, SvPb::TransformationToolClassId },
	{ SVShiftToolClassGuid, SvPb::ShiftToolClassId },
	{ SVCylindricalWarpToolClassGuid, SvPb::CylindricalWarpToolClassId },
	{ SVPerspectiveToolClassGuid, SvPb::PerspectiveToolClassId },
	{ SVImageToolClassGuid, SvPb::ImageToolClassId },
	{ SVLinearToolClassGuid, SvPb::LinearToolClassId },
	{ SVColorToolClassGuid, SvPb::ColorToolClassId },
	{ SVResizeToolGuid, SvPb::ResizeToolId },
	{ SVLoadImageToolClassGuid, SvPb::LoadImageToolClassId },
	{ TableToolGuid, SvPb::TableToolClassId },
	{ TableAnalyzerToolGuid, SvPb::TableAnalyzerToolClassId },
	{ SVPolarTransformationToolClassGuid, SvPb::PolarTransformationToolClassId },
	{ LoopToolClassGuid, SvPb::LoopToolClassId },
	{ SVExternalToolGuid, SvPb::ExternalToolClassId },
	{ SVBlobAnalyzerClassGuid, SvPb::BlobAnalyzerClassId },
	{ SVPixelAnalyzerClassGuid, SvPb::PixelAnalyzerClassId },
	{ SVLuminanceAnalyzerClassGuid, SvPb::LuminanceAnalyzerClassId },
	{ SVHistogramAnalyzerClassGuid, SvPb::HistogramAnalyzerClassId },
	{ SVPatternAnalyzerClassGuid, SvPb::PatternAnalyzerClassId },
	{ SVBarCodeAnalyzerClassGuid, SvPb::BarCodeAnalyzerClassId },
	{ SVOCVAnalyzerClassGuid, SvPb::OCVAnalyzerClassId },
	{ SVLinearPixelCountingLineAnalyzerClassGuid , SvPb::LinearPixelCountingLineAnalyzerClassId },
	{ SVLinearEdgeCountingLineAnalyzerClassGuid, SvPb::LinearEdgeCountingLineAnalyzerClassId },
	{ SVLinearEdgePositionLineAnalyzerClassGuid, SvPb::LinearEdgePositionLineAnalyzerClassId },
	{ SVLinearMeasurementAnalyzerClassGuid, SvPb::LinearMeasurementAnalyzerClassId },
	{ SVLinearMaximumBackgroundObjectLineAnalyzerClassGuid, SvPb::LinearMaximumBackgroundObjectLineAnalyzerClassId },
	{ SVLinearMaximumForegroundObjectLineAnalyzerClassGuid, SvPb::LinearMaximumForegroundObjectLineAnalyzerClassId },
	{ SVLinearMaximumObjectLineAnalyzerClassGuid, SvPb::LinearMaximumObjectLineAnalyzerClassId },
	{ TableAnaylzerSortGuid, SvPb::TableAnaylzerSortClassId },
	{ TableAnaylzerExcludeGuid, SvPb::TableAnaylzerExcludeClassId },
	{ TableAnaylzerLimitGuid, SvPb::TableAnaylzerLimitClassId },
	{ TableAnaylzerAddColumnGuid, SvPb::TableAnaylzerAddColumnClassId },
	{ SVPointXResultClassGuid, SvPb::PointXResultClassId },
	{ SVPointYResultClassGuid, SvPb::PointYResultClassId },
	{ SVDPointXResultClassGuid, SvPb::DPointXResultClassId },
	{ SVDPointYResultClassGuid, SvPb::DPointYResultClassId },
	{ SVLongResultClassGuid, SvPb::LongResultClassId },
	{ SVDoubleResultClassGuid, SvPb::DoubleResultClassId },
	{ SVVariantResultClassGuid, SvPb::VariantResultClassId },
	{ SVStringResultClassGuid, SvPb::StringResultClassId },
	{ SVBarCodeResultClassGuid, SvPb::BarCodeResultClassId },
	{ SVOCVAnalyzerResultClassGuid, SvPb::OCVAnalyzerResultClassId },
	{ SVOCVCharacterResultClassGuid, SvPb::OCVCharacterResultClassId },
	{ SVRangeClassGuid, SvPb::RangeClassId },
	{ SVSmoothFilterClassGuid, SvPb::SmoothFilterClassId },
	{ SVSharpenFilterClassGuid, SvPb::SharpenFilterClassId },
	{ SVSharpen2FilterClassGuid, SvPb::Sharpen2FilterClassId },
	{ SVHorizEdgeFilterClassGuid, SvPb::HorizEdgeFilterClassId },
	{ SVVertEdgeFilterClassGuid, SvPb::VertEdgeFilterClassId },
	{ SVEdgeDetectFilterClassGuid, SvPb::EdgeDetectFilterClassId },
	{ SVEdgeDetect2FilterClassGuid, SvPb::EdgeDetect2FilterClassId },
	{ SVLaplacianEdgeFilterClassGuid, SvPb::LaplacianEdgeFilterClassId },
	{ SVLaplacianEdge2FilterClassGuid, SvPb::LaplacianEdge2FilterClassId },
	{ SVMaxMinusMinFilterClassGuid, SvPb::MaxMinusMinFilterClassId },
	{ SVErosionFilterClassGuid, SvPb::ErosionFilterClassId },
	{ SVDilationFilterClassGuid, SvPb::DilationFilterClassId },
	{ SVOpeningFilterClassGuid, SvPb::OpeningFilterClassId },
	{ SVClosingFilterClassGuid, SvPb::ClosingFilterClassId },
	{ SVCustomFilterClassGuid, SvPb::CustomFilterClassId },
	{ Custom2FilterClassGuid, SvPb::Custom2FilterClassId },
	{ SVRankingFilterClassGuid, SvPb::RankingFilterClassId },
	{ Ranking2FilterClassGuid, SvPb::Ranking2FilterClassId },
	{ SVSkeletonFilterClassGuid, SvPb::SkeletonFilterClassId },
	{ SVThinningFilterClassGuid, SvPb::ThinningFilterClassId },
	{ SVThickeningFilterClassGuid, SvPb::ThickeningFilterClassId },
	{ SVWatershedFilterClassGuid, SvPb::WatershedFilterClassId },
	{ SVEraseBorderBlobsFilterClassGuid, SvPb::EraseBorderBlobsFilterClassId },
	{ SVExtractHolesFilterClassGuid, SvPb::ExtractHolesFilterClassId },
	{ SVFillHolesFilterClassGuid, SvPb::FillHolesFilterClassId },
	{ SVReconstructFilterClassGuid, SvPb::ReconstructFilterClassId },
	{ SVThresholdClassGuid, SvPb::ThresholdClassId },
	{ SVUserMaskOperatorClassGuid, SvPb::UserMaskOperatorClassId },
	{ SVStdImageOperatorListClassGuid, SvPb::StdImageOperatorListClassId },
	{ SVInPlaceImageOperatorListClassGuid, SvPb::InPlaceImageOperatorListClassId },
	{ SVLinearImageOperatorListClassGuid, SvPb::LinearImageOperatorListClassId },
	{ SVEquationClassGuid, SvPb::EquationClassId },
	{ SVConditionalClassGuid, SvPb::ConditionalClassId },
	{ SVMathEquationClassGuid, SvPb::MathEquationClassId },
	{ SVLinearEdgeAProcessingClassGuid, SvPb::LinearEdgeAProcessingClassId },
	{ SVLinearEdgeBProcessingClassGuid, SvPb::LinearEdgeBProcessingClassId },
	{ SVDataBufferClassGuid, SvPb::DataBufferClassId },
	{ SVImageArithmeticClassGuid, SvPb::ImageArithmeticClassId },
	{ SVUpperThresholdEquationClassGuid, SvPb::UpperThresholdEquationClassId },
	{ SVLowerThresholdEquationClassGuid, SvPb::LowerThresholdEquationClassId },
	{ SVAutoThresholdEquationClassGuid, SvPb::AutoThresholdEquationClassId },
	{ SVExternalToolTaskGuid, SvPb::ExternalToolTaskClassId },
	{ SVImageTransformClassGuid, SvPb::ImageTransformClassId },
	{ SVPolarTransformClassGuid, SvPb::PolarTransformClassId },
	{ SVImagePolarTransformClassGuid, SvPb::ImagePolarTransformClassId },
	{ SVEvaluateTranslationXClassGuid, SvPb::EvaluateTranslationXClassId },
	{ SVEvaluateTranslationYClassGuid, SvPb::EvaluateTranslationYClassId },
	{ SVEvaluateRotationXClassGuid, SvPb::EvaluateRotationXClassId },
	{ SVEvaluateRotationYClassGuid, SvPb::EvaluateRotationYClassId },
	{ SVEvaluateRotationAngleClassGuid, SvPb::EvaluateRotationAngleClassId },
	{ SVEvaluateCenterXClassGuid, SvPb::EvaluateCenterXClassId },
	{ SVEvaluateCenterYClassGuid, SvPb::EvaluateCenterYClassId },
	{ SVEvaluateStartRadiusClassGuid, SvPb::EvaluateStartRadiusClassId },
	{ SVEvaluateEndRadiusClassGuid, SvPb::EvaluateEndRadiusClassId },
	{ SVEvaluateStartAngleClassGuid, SvPb::EvaluateStartAngleClassId },
	{ SVEvaluateEndAngleClassGuid, SvPb::EvaluateEndAngleClassId },
	{ SVLUTEquationClassGuid, SvPb::LUTEquationClassId },
	{ SVLUTOperatorClassGuid, SvPb::LUTOperatorClassId },
	{ SVColorThresholdClassGuid, SvPb::ColorThresholdClassId },
	{ ToolSizeAdjustTaskGuid, SvPb::ToolSizeAdjustTaskId },
	{ TableColumnEquationGuid, SvPb::TableColumnEquationId },
	{ TableAddColumnEquationGuid, SvPb::TableAddColumnEquationId },
	{ TableFillObjectGuid, SvPb::TableFillObjectId },
	{ TableCopyObjectGuid, SvPb::TableCopyObjectId },
	{ SVRemoteOutputObjectGUID, SvPb::RemoteOutputObjectId },
	{ EQAdjustSizeWidthGuid, SvPb::EQAdjustSizeWidthClassId },
	{ EQAdjustSizeHeightGuid, SvPb::EQAdjustSizeHeightClassId },
	{ EQAdjustSizePositionXGuid, SvPb::EQAdjustSizePositionXClassId },
	{ EQAdjustSizePositionYGuid, SvPb::EQAdjustSizePositionYClassId },
	{ SVShapeMaskHelperClassGuid, SvPb::ShapeMaskHelperClassId },
	{ TableObjectGuid, SvPb::TableClassId },
	{ SVRemoteOutputGroupGUID, SvPb::RemoteOutputGroupClassId },
	{ SVRemoteOutputDataControllerGUID, SvPb::RemoteOutputDataControllerClassId }
};			//This map is used to exchange a class ID with another, can construct another object when read from a configuration

SvPb::ClassIdEnum calcClassId(const _variant_t& rClassIdVariant)
{
	SvPb::ClassIdEnum classId;
	switch (rClassIdVariant.vt)
	{
	case VT_BSTR:
	{
		SVGUID guidId(rClassIdVariant);
		const auto& iter = g_ExchangeClassID.find(guidId);
		if (g_ExchangeClassID.end() != iter)
		{
			classId = iter->second;
		}
		else
		{
			classId = SvPb::NoObjectClassId;
		}
		break;
	}
	case VT_I4:
	case VT_INT:
		classId = static_cast<SvPb::ClassIdEnum>(static_cast<int>(rClassIdVariant));
		break;
	default:
		classId = SvPb::NoObjectClassId;
		break;
	}
	return classId;
}
#pragma endregion Declarations

SVClassRegisterListClass& SVClassRegisterListClass::Instance()
{
	static SVClassRegisterListClass Object;

	return Object;
}

SVClassRegisterListClass::SVClassRegisterListClass()
{
}

SVClassRegisterListClass::~SVClassRegisterListClass()
{
	Shutdown();
}

// Construct class by ClassID, 
// returns nullptr, if this class type is not available!
// Otherwise, it returns a SVObjectClass* to the new object.
// You have to destroy this new object by yourself by using delete
SVObjectClass* SVClassRegisterListClass::ConstructNewObject(SvPb::ClassIdEnum classId)
{
	SVObjectClass* pResult(nullptr);
	SVClassRegisterMap::const_iterator Iter = m_Registers.find( classId );

	if( m_Registers.end() != Iter )
	{
		if( nullptr != Iter->second )
		{
			pResult = Iter->second->Construct();
		}
	}

	return pResult;
}

void SVClassRegisterListClass::Add( SVClassRegisterClass* pClass )
{
	if( nullptr != pClass )
	{
		SVClassRegisterMap::const_iterator l_Iter = m_Registers.find( pClass->GetClassID() );

		if( l_Iter == m_Registers.end() )
		{
			m_Registers[ pClass->GetClassID() ] = pClass;
		}
		#ifdef _DEBUG
			else
			{
				std::string Temp = SvUl::Format( _T("Duplicate Class encountered\n ClassName: %s\n ClassID: %d"), pClass->GetClassName(), pClass->GetClassID());
				::OutputDebugString( Temp.c_str() );
				assert(false);
			}
		#endif
	}
	#ifdef _DEBUG
	else
	{
		assert(false);//("Invalid Class encountered\n");
	}
	#endif
}

void SVClassRegisterListClass::Shutdown()
{
	m_Registers.clear();
}

