// SVRemoteControl.idl : IDL source for SVRemoteControl
//

// This file will be processed by the MIDL tool to
// produce the type library (SVRemoteControl.tlb) and marshalling code.

#include "olectl.h"
import "oaidl.idl";
import "ocidl.idl";

[
	uuid(D5A134BC-7BC5-487e-B6D3-8600BB6E9368),
	v1_enum,
	helpstring("SVObserver States Enum"),
]
typedef enum SVObserverStates
{
	[helpstring("No Configuration")] NoConfiguration = 0x0000,
	[helpstring("Configuration Loading")] ConfigurationLoading = 0x0001,
	[helpstring("Configuration Loaded")] ConfigurationLoaded = 0x0002,
	[helpstring("Online Pending")] OnlinePending = 0x0004,
	[helpstring("Online")] Online = 0x0008,
	[helpstring("Running Test")] RunningTest = 0x0010,
	[helpstring("Running")] Running = 0x0020,
	[helpstring("Regression Test")] RegressionTest = 0x0040,
	[helpstring("Setup Mode")] SetupMode = 0x0080,
	[helpstring("Saving Configuration")] SavingConfiguration = 0x0100,
	[helpstring("Stopping")] Stopping = 0x0200,
	[helpstring("Raid Failure")] RaidFailure = 0x0400,
	[helpstring("Remote Control Blocked")] RemoteControlBlocked = 0x1000,
} SVObserverStatesEnum;

[
	uuid(2240AEA1-CB39-4bac-9B39-69DEF79041A7),
	v1_enum,
	helpstring("SVObserver Modes Enum"),
]
typedef enum SVObserverModes
{
	[helpstring("Available")] Available = 0,
	[helpstring("Run Mode")] RunMode = 1,
	[helpstring("Stop Mode")] StopMode = 2,
	[helpstring("Regression Mode")] RegressionMode = 3,
	[helpstring("Test Mode")] TestMode = 4,
	[helpstring("Edit Mode")] EditMode = 5,
	[helpstring("Edit Move Mode")] EditMoveMode = 6,
	[helpstring("Mode Changing")] ModeChanging = 100,
} SVObserverModesEnum;

[
	uuid(A884D10E-A72F-44F1-B588-789D993B37AF),
	v1_enum,
	helpstring("Product Filter Modes"),
]
typedef enum SVProductFilterModes
{
	[helpstring("Last Inspected")] LastInspected = 1,
	[helpstring("Last Reject")] LastReject = 2,
} SVProductFilterModesEnum;

[
	uuid(6B759CE1-04AD-4498-8DD4-5BEF00B36418),
	v1_enum,
	helpstring("Shutdown Options Enum"),
]
typedef enum SVShutdownOptions
{
	[helpstring("Graceful")] Graceful = 1,
	[helpstring("Restart")]	 Restart = 2,
} SVShutdownOptionsEnum;

[
	uuid(E5330415-2690-437a-A3AA-21F58B62AFD4),
	v1_enum,
	helpstring("Image Formats Enum"),
]
typedef enum SVImageFormats
{
	[helpstring("Picture Dispatch Interface")] IDisp = 0,
	[helpstring("BMP")] BMP = 1,
	[helpstring("PNG")] PNG = 2,
	[helpstring("JPEG")] JPEG = 3,
	[helpstring("TIFF")] TIFF = 4,
	[helpstring("lossy")] lossy = 0x10,
	[helpstring("fetch")] fetch = 0x20,
	[helpstring("Mask")] Mask = 0x0F,
} SVImageFormatsEnum;

[
	uuid(F92DBBFE-049D-459D-ADAB-F268B9B34DC6),
	v1_enum,
	helpstring("Notification Types Enum"),
]
typedef enum SVNotificationTypes
{
	[helpstring("Unknown Notification Type")] UnknownNotificationType = 0,
	[helpstring("Current Mode")] CurrentMode = 1,
	[helpstring("Last Modified")] LastModified = 2,
	[helpstring("Connected")] Connected = 3,
	[helpstring("Disconnected")] Disconnected = 4,
	[helpstring("MessageNotification")] MessageNotification = 5,
} SVNotificationTypesEnum;

[
	uuid(E28985D7-752A-4969-9444-7548DD3951E0),
	v1_enum,
	helpstring("Data Definition List Type Enum"),
]
typedef enum SVDataDefinitionListType
{
	[helpstring("Unknown Data Definition")] UnknownDataDefinition = 0,
	[helpstring("Selected Values")] SelectedValues = 1,
	[helpstring("Selected Images")] SelectedImages = 2,
	[helpstring("Selected Values and Selected Images")] SelectedValuesAndSelectedImages = 3,
	[helpstring("All Values")] AllValues = 4,
	[helpstring("All Values and Selected Images")] AllValuesAndSelectedImages = 6,
	[helpstring("All Images")] AllImages = 8,
	[helpstring("Selected Values and All Images")] SelectedValuesAndAllImages = 9,
	[helpstring("All Values and All Images")] AllValuesAndAllImages = 12,
} SVDataDefinitionListTypeEnum;

[
	object,
	uuid(FC0896BF-1933-4776-9BE9-EB5927C75FFF),
	dual,
	nonextensible,
	helpstring("ISVValueObject Interface"),
	pointer_default(unique)
]
interface ISVValueObject : IDispatch{
	[propget, id(DISPID_NEWENUM), helpstring("property _NewEnum")] HRESULT _NewEnum([out, retval] IUnknown** pVal);
	[propget, id(DISPID_VALUE), helpstring("property Item")] HRESULT Item([in] VARIANT index, [out,retval] VARIANT* pVal);
	[propget, id(1), readonly, helpstring("property Count")] HRESULT Count([out, retval] LONG* pVal);

	[propget, id(2), helpstring("property Name")] HRESULT Name([out, retval] BSTR* pVal);
	[propput, id(2), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
	[propget, id(3), helpstring("property TriggerCount")] HRESULT TriggerCount([out, retval] LONG* pVal);
	[propput, id(3), helpstring("property TriggerCount")] HRESULT TriggerCount([in] LONG newVal);
	[propget, id(4), helpstring("property Status")] HRESULT Status([out, retval] LONG* pVal);
	[propput, id(4), helpstring("property Status")] HRESULT Status([in] LONG newVal);

	[id(32), helpstring("method Remove")] HRESULT Remove([in] LONG index);
	[id(33), helpstring("method Clear")] HRESULT Clear(void);
	[id(34), helpstring("method Add")] HRESULT Add([in] VARIANT Item);
};

[
	object,
	uuid(9F5BD020-120E-4224-BCC8-D0584273ED85),
	dual,
	nonextensible,
	helpstring("ISVValueObjectList Interface"),
	pointer_default(unique)
]
interface ISVValueObjectList : IDispatch{
	[propget, id(DISPID_NEWENUM), helpstring("property _NewEnum")] HRESULT _NewEnum([out, retval] IUnknown** pVal);
	[propget, id(DISPID_VALUE), helpstring("property Item")] HRESULT Item([in] VARIANT index, [out,retval] VARIANT* pVal);
	[propget, id(1), readonly, helpstring("property Count")] HRESULT Count([out, retval] LONG* pVal);

	[id(32), helpstring("method Remove")] HRESULT Remove([in] LONG index);
	[id(33), helpstring("method Clear")] HRESULT Clear(void);
	[id(34), helpstring("method Add")] HRESULT Add([in] ISVValueObject* p_Item);
};

[
	object,
	uuid(C14E1A1C-CBAC-4048-8D6A-71CE1E039861),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface ISVImageObject : IDispatch{
	[propget, id(2)] HRESULT Name([out, retval] BSTR* pVal);
	[propput, id(2)] HRESULT Name([in] BSTR newVal);
	[propget, id(3)] HRESULT Status([out, retval] LONG* pVal);
	[propput, id(3)] HRESULT Status([in] LONG newVal);
	[propget, id(4)] HRESULT TriggerCount([out, retval] LONG* pVal);
	[propput, id(4)] HRESULT TriggerCount([in] LONG newVal);

	[id(36)] HRESULT GetImage([in] VARIANT_BOOL overlays, [in] DOUBLE zoom, [in] SVImageFormatsEnum format, [out,retval] VARIANT* result);
	[id(37)] HRESULT SetImage([in] VARIANT img);
	[propget, id(5)] HRESULT ImageFormat([out, retval] SVImageFormatsEnum* pVal);
	[propput, id(5)] HRESULT ImageFormat([in] SVImageFormatsEnum newVal);
};
[
	object,
	uuid(FD87ECE3-5AE2-4987-8F3E-852C01CD691A),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface ISVImageObjectList : IDispatch{
	[propget, id(DISPID_NEWENUM), readonly, restricted] HRESULT _NewEnum([out, retval] IUnknown** pVal);
	[propget, id(DISPID_VALUE)] HRESULT Item([in] VARIANT index, [out, retval] VARIANT* pVal);
	[propget, id(1)] HRESULT Count([out, retval] LONG* pVal);
	[id(32)] HRESULT Clear(void);
	[id(33)] HRESULT Remove([in] LONG index);
	[id(34)] HRESULT Add([in] ISVImageObject* object);
};

[
	object,
	uuid(197A36AC-3B8E-4722-9B82-E5B2FE2C533C),
	dual,
	nonextensible,
	helpstring("ISVErrorObject Interface"),
	pointer_default(unique)
]
interface ISVErrorObject : IDispatch{
	[propget, id(2), helpstring("property Name")] HRESULT Name([out, retval] BSTR* pVal);
	[propput, id(2), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
	[propget, id(3), helpstring("property Status")] HRESULT Status([out, retval] LONG* pVal);
	[propput, id(3), helpstring("property Status")] HRESULT Status([in] LONG newVal);
};

[
	object,
	uuid(33E96A56-1B83-441f-AFAF-1F4B4653687E),
	dual,
	nonextensible,
	helpstring("ISVErrorObjectList Interface"),
	pointer_default(unique)
]
interface ISVErrorObjectList : IDispatch{
	[propget, id(DISPID_NEWENUM), helpstring("property _NewEnum")] HRESULT _NewEnum([out, retval] IUnknown** pVal);
	[propget, id(DISPID_VALUE), helpstring("property Item")] HRESULT Item([in] VARIANT index, [out,retval] VARIANT* pVal);
	[propget, id(1), readonly, helpstring("property Count")] HRESULT Count([out, retval] LONG* pVal);

	[id(32), helpstring("method Remove")] HRESULT Remove([in] LONG index);
	[id(33), helpstring("method Clear")] HRESULT Clear(void);
	[id(34), helpstring("method Add")] HRESULT Add([in] ISVErrorObject* p_Item);
};

[
	object,
	uuid(A4786BF3-5F52-4273-BB03-B5C4F37FFA17),
	dual,
	nonextensible,
	helpstring("ISVProductItems Interface"),
	pointer_default(unique)
]
interface ISVProductItems : IDispatch{
	[propget, id(1), helpstring("List of ValueObjects")] HRESULT Values([out, retval] ISVValueObjectList** pVal);
	[propput, id(1), helpstring("List of ValueObjects")] HRESULT Values([in] ISVValueObjectList* newVal);

	[propget, id(2), helpstring("List of Images")] HRESULT Images([out, retval] ISVImageObjectList** pVal);
	[propput, id(2), helpstring("List of Images")] HRESULT Images([in] ISVImageObjectList* newVal);

	[propget, id(3), helpstring("List of Errors")] HRESULT Errors([out, retval] ISVErrorObjectList** pVal);
	[propput, id(3), helpstring("List of Errors")] HRESULT Errors([in] ISVErrorObjectList* newVal);
};

[
	object,
	uuid(72D176A0-88E1-4546-88AE-1E2CD244071F),
	dual,
	nonextensible,
	helpstring("ISVDataDefObject Interface"),
	pointer_default(unique)
]
interface ISVDataDefObject : IDispatch{
	[propget, id(DISPID_NEWENUM), helpstring("property _NewEnum")] HRESULT _NewEnum([out, retval] IUnknown** pVal);
	[propget, id(DISPID_VALUE), helpstring("property Item")] HRESULT Item([in] VARIANT index, [out,retval] VARIANT* pVal);
	[propget, id(1), readonly, helpstring("property Count")] HRESULT Count([out, retval] LONG* pVal);

	[propget, id(2), helpstring("property Name")] HRESULT Name([out, retval] BSTR* pVal);
	[propput, id(2), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
	[propget, id(3), helpstring("property Writable")] HRESULT Writable([out, retval] VARIANT_BOOL* pVal);
	[propput, id(3), helpstring("property Writable")] HRESULT Writable([in] VARIANT_BOOL newVal);
	[propget, id(4), helpstring("property Published")] HRESULT Published([out, retval] VARIANT_BOOL* pVal);
	[propput, id(4), helpstring("property Published")] HRESULT Published([in] VARIANT_BOOL newVal);
	[propget, id(5), helpstring("property Data Type")] HRESULT DataType([out, retval] BSTR* pVal);
	[propput, id(5), helpstring("property Data Type")] HRESULT DataType([in] BSTR newVal);

	[id(32), helpstring("method Remove")] HRESULT Remove([in] LONG index);
	[id(33), helpstring("method Clear")] HRESULT Clear(void);
	[id(34), helpstring("method Add")] HRESULT Add([in] VARIANT Item);
};

[
	object,
	uuid(AE059C37-CB27-475B-BFC4-939A29C2FC73),
	dual,
	nonextensible,
	helpstring("ISVDataDefObjectList Interface"),
	pointer_default(unique)
]
interface ISVDataDefObjectList : IDispatch{
	[propget, id(DISPID_NEWENUM), helpstring("property _NewEnum")] HRESULT _NewEnum([out, retval] IUnknown** pVal);
	[propget, id(DISPID_VALUE), helpstring("property Item")] HRESULT Item([in] VARIANT index, [out,retval] VARIANT* pVal);
	[propget, id(1), readonly, helpstring("property Count")] HRESULT Count([out, retval] LONG* pVal);

	[id(32), helpstring("method Remove")] HRESULT Remove([in] LONG index);
	[id(33), helpstring("method Clear")] HRESULT Clear(void);
	[id(34), helpstring("method Add")] HRESULT Add([in] ISVDataDefObject* p_Item);
};

[
	object,
	uuid(36963812-AE89-4B9A-92E8-2489C50930CE),
	dual,
	nonextensible,
	helpstring("ISVInputMatchItem Interface"),
	pointer_default(unique)
]
interface ISVInputMatchItem : IDispatch{
	[propget, id(1), helpstring("property MatchString")] HRESULT MatchString([out, retval] BSTR* pVal);
	[propput, id(1), helpstring("property MatchString")] HRESULT MatchString([in] BSTR Val);
	[propget, id(2), helpstring("property TxnIdentifier")] HRESULT TxnIdentifier([out, retval] long* pVal);
	[propput, id(2), helpstring("property TxnIdentifier")] HRESULT TxnIdentifier([in] long Val);
};

[
	object,
	uuid(7E31A82C-6046-451A-8D64-26AC2FA48713),
	dual,
	nonextensible,
	helpstring("ISVInputMatchList Interface"),
	pointer_default(unique)
]
interface ISVInputMatchList : IDispatch{
	[propget, id(DISPID_NEWENUM), readonly, restricted]	HRESULT _NewEnum([out, retval] IUnknown** pEnum);
	[propget, id(DISPID_VALUE), readonly, helpstring("property Item")] HRESULT Item([in] VARIANT index, [out, retval] VARIANT* pVal);
	[propget, id(1), readonly, helpstring("property Count")] HRESULT Count([out, retval] LONG* pVal);

	[id(32), helpstring("method Remove")] HRESULT Remove([in] LONG index);
	[id(33), helpstring("method Clear")] HRESULT Clear(void);
	[id(34), helpstring("method Add")] HRESULT Add([in] ISVInputMatchItem* pItem);
	[id(35), helpstring("method AddItem")] HRESULT AddItem([in] BSTR matchString, [in] long txn_Identifier);
};

[
	object,
	uuid(1457A846-AF0D-4C2D-AAF4-DD8400B117D9),
	dual,
	nonextensible,
	helpstring("ISVRemoteCtrl Interface"),
	pointer_default(unique)
]
interface ISVRemoteCtrl : IDispatch{
	[propget, id(DISPID_HWND)] HRESULT HWND([out, retval]LONG_PTR* pHWND);
	[propget, id(1), readonly, helpstring("property ServerAddress")] HRESULT ServerAddress([out, retval] BSTR* pVal);
	[propget, id(2), readonly, helpstring("property VP Address")] HRESULT VPAddress([out, retval] BSTR* pVal);
	[propget, id(5), readonly, helpstring("property ServerType")] HRESULT ServerType([out, retval] BSTR* pVal);
	[propget, id(6), readonly, helpstring("Indicates if connected to the server.")] HRESULT Connected([out, retval] VARIANT_BOOL* pVal);
	[propget, id(8), helpstring("Scale of the transmitted images in percent of width/height(1 - 100).")] HRESULT ImageScale([out, retval] LONG* pVal);
	[propput, id(8), helpstring("Scale of the transmitted images in percent of width/height(1 - 100).")] HRESULT ImageScale([in] LONG newVal);

	[id(512), helpstring("Starts Get Configuration")] HRESULT BeginGetConfig([in] BSTR fileName);
	[id(513), helpstring("Waits for Get Configuartion to finish.")] HRESULT FinishGetConfig([in] LONG Timeout, [in] VARIANT_BOOL CancelAfterTimeout);
	[id(514), helpstring("Starts Put Configuration")] HRESULT BeginPutConfig([in] BSTR fileName);
	[id(515), helpstring("Waits for Put Configuration to finish.")] HRESULT FinishPutConfig([in] LONG Timeout, [in] VARIANT_BOOL CancelAfterTimeout);
	[id(516), helpstring("Starts Put Device File")] HRESULT BeginPutDeviceFile([in] BSTR sourcePath, [in] BSTR destinationPath);
	[id(517), helpstring("Waits for Put Device File to finish.")] HRESULT FinishPutDeviceFile([in] LONG Timeout, [in] VARIANT_BOOL CancelAfterTimeout);
	[id(518), helpstring("Starts Set Device Mode")] HRESULT BeginSetDeviceMode([in] SVObserverModesEnum desiredMode);
	[id(519), helpstring("Waits for Set Device Mode to finish.")] HRESULT FinishSetDeviceMode([in] LONG Timeout, [in] VARIANT_BOOL CancelAfterTimeout);
	[id(522), helpstring("Get Configuration")] HRESULT GetConfig([in] BSTR filePath);
	[id(523), helpstring("Get Device Configuration Report")] HRESULT GetDeviceConfigReport([out,retval] BSTR* report);
	[id(524), helpstring("Get Device Mode")] HRESULT GetDeviceMode([out,retval] LONG* mode);
	[id(525), helpstring("Get Device Offline Count")] HRESULT GetDeviceOfflineCount([out,retval] LONG* count);
	[id(526), helpstring("Get Items")] HRESULT GetItems([in] VARIANT itemNames, [out,retval] ISVProductItems** items);
	[id(527), helpstring("Get State")] HRESULT GetState([out,retval] LONG* state);
	[id(528), helpstring("Put Configuration")] HRESULT PutConfig([in] BSTR filePath, [in] LONG Timeout);
	[id(529), helpstring("Get Version")] HRESULT GetVersion([out] BSTR* svobserver_ver, [out] BSTR* svremotecontrol_ver, [out] BSTR* runrejectserver_ver);
	[id(530), helpstring("Put Device File")] HRESULT PutDeviceFile([in] BSTR sourcePath, [in] BSTR destinationPath);
	[id(531), helpstring("Set Device Mode")] HRESULT SetDeviceMode([in] SVObserverModesEnum desiredMode);
	[id(532), helpstring("Set Items")] HRESULT SetItems([in] ISVProductItems* items, [out, retval] ISVProductItems ** faults);
	[id(536), helpstring("Disconnects from the server.")] HRESULT Disconnect(void);
	[id(537), helpstring("Connects to the server at 'address', timeout in ms.")] HRESULT Connect([in] BSTR address, [in, defaultvalue(1500)] LONG Timeout);
	[id(538), helpstring("Register product items for tracking by RunReject server.")] HRESULT RegisterMonitorList([in] BSTR listName, [in] BSTR ppqName, [in] int rejectDepth, [in] VARIANT productItemList, [in] VARIANT rejectCondList, [in] VARIANT failStatusList, [out, retval] ISVErrorObjectList ** errors);
	[id(539), helpstring("Query for the current product item list.")] HRESULT QueryProductList([in] BSTR listName, [out,retval] VARIANT* itemNames);
	[id(540), helpstring("Query for the current reject condition list.")] HRESULT QueryRejectCondList([in] BSTR listName, [out,retval] VARIANT* itemNames);
	[id(541), helpstring("Query for the current fail status list.")] HRESULT QueryFailStatusList([in] BSTR listName, [out,retval] VARIANT* itemNames);
	[id(542), helpstring("Get product items (as registered) for the supplied trigger count. Scale images according to supplied scale.")] HRESULT GetProduct([in] BSTR listName, [in] LONG triggerCount, [in] LONG imageScale, [out,retval] ISVProductItems** currentViewItems);
	[id(543), helpstring("Get reject items (as registered) for the supplied trigger count. Scale images according to supplied scale.")] HRESULT GetReject([in] BSTR listName, [in] LONG triggerCount, [in] LONG imageScale, [out,retval] ISVProductItems** currentViewItems);
	[id(544), helpstring("Get Data Definition List")] HRESULT GetDataDefinitionList([in] BSTR inspectionName, [in] SVDataDefinitionListTypeEnum listType, [out,retval] ISVDataDefObjectList** entries);
	[id(545), helpstring("Start using an existing Monitor List.")] HRESULT ActivateMonitorList([in] BSTR listName);
	[id(546), helpstring("Stop using the specified Monitor List.")] HRESULT DeactivateMonitorList([in] BSTR listName);
	[id(547), helpstring("Fetches the values (up to 50) of each item in the Fail Status list stored when a product was rejected.")] HRESULT GetFailStatus([in] BSTR listName, [out, retval] VARIANT* values);
	[id(548), helpstring("Set the product filter mode.")] HRESULT SetProductFilter([in] BSTR listName, [in]SVProductFilterModesEnum mode);
	[id(549), helpstring("Get the product filter mode.")] HRESULT GetProductFilter([in] BSTR listName, [out, retval] LONG* mode);
	[id(550), helpstring("Shutdown SVIM.")] HRESULT Shutdown([in, defaultvalue(Graceful)] SVShutdownOptionsEnum options);
	[id(551), helpstring("Query for the monitor list names.")] HRESULT QueryMonitorListNames([out,retval] VARIANT* listNames);
	[id(552), helpstring("Get current inspection names")] HRESULT GetInspectionNames ([out,retval] VARIANT* listNames);
	[id(553), helpstring("Get properties for the monitorlist")] HRESULT GetMonitorListProperties([in] BSTR listName, [out] LONG* RejectDepth,[out] VARIANT_BOOL*  isActive, [out] BSTR*  ppqName);
	[id(554), helpstring("Get Maximum of Reject Queue Depth")] HRESULT GetMaxRejectQeueDepth([out,retval] LONG* maxRejectDepth);
};

[
	uuid(46406B18-E3C7-449D-898F-E857B6A9D945),
	version(1.0),
	helpstring("SVRemoteControl 1.0 Type Library")
]
library SVRemoteControlLib
{
	importlib("stdole2.tlb");

	[
		uuid(89A7446B-ACCE-483B-8C2A-19B882C23011),
		helpstring("_ISVRemoteCtrlEvents Interface")
	]
	dispinterface _ISVRemoteCtrlEvents
	{
		properties:
		methods:
			[id(1), helpstring("method OnNotify")] HRESULT OnNotify([in] VARIANT data, [in] SVNotificationTypesEnum type);
			
	};

	[
		uuid(E4094670-241C-4625-A900-AD8BD44CED08),
		control,
		helpstring("SVRemoteCtrl Class")
	]
	coclass SVRemoteCtrl
	{
		[default] interface ISVRemoteCtrl;
		[default, source] dispinterface _ISVRemoteCtrlEvents;
	};

	[
		uuid(959F3092-2981-4563-95FB-229F894F6444),
		helpstring("SVValueObject Class")
	]
	coclass SVValueObject
	{
		[default] interface ISVValueObject;
	};

	[
		uuid(FBEC601D-59CE-4011-8F3A-FB0B15C07F01),
		helpstring("SVValueObjectList Class")
	]
	coclass SVValueObjectList
	{
		[default] interface ISVValueObjectList;
	};

	[
		uuid(B06B4F17-A3A6-47f6-B1C6-9AF0A69D2EF3),
		helpstring("SVErrorObject Class")
	]
	coclass SVErrorObject
	{
		[default] interface ISVErrorObject;
	};

	[
		uuid(720F2679-B08E-4629-B87E-17D6CACB470F),
		helpstring("SVErrorObjectList Class")
	]
	coclass SVErrorObjectList
	{
		[default] interface ISVErrorObjectList;
	};

	[
		uuid(9EA40F77-F8AB-4D92-BAEA-24C67E3AFE62),
		helpstring("SVDataDefObject Class")
	]
	coclass SVDataDefObject
	{
		[default] interface ISVDataDefObject;
	};

	[
		uuid(D85F32AD-CDD7-4A09-9A19-EFD0181F3075),
		helpstring("SVDataDefObjectList Class")
	]
	coclass SVDataDefObjectList
	{
		[default] interface ISVDataDefObjectList;
	};

	[
		uuid(2C408BE7-AB83-4E34-AA23-B195FCB82632),
		helpstring("SVProductItems Class")
	]
	coclass SVProductItems
	{
		[default] interface ISVProductItems;
	};

	[
		uuid(38168345-B330-4297-AC07-9EFD1A2D510E),
		helpstring("SVInputMatchItem Class")
	]
	coclass SVInputMatchItem
	{
		[default] interface ISVInputMatchItem;
	};

	[
		uuid(8C59EC64-1165-4343-BF20-1FFC6BF52D4C),
		helpstring("SVInputMatchList Class")
	]
	coclass SVInputMatchList
	{
		[default] interface ISVInputMatchList;
	};

	[
		uuid(F2222858-76DD-4DB9-9D4B-6B2AF75700C1)
	]
	coclass SVImageObject
	{
		[default] interface ISVImageObject;
	};

	[
		uuid(19BA3FD5-A318-4FD7-950B-5B537B8D61DE)
	]
	coclass SVImageObjectList
	{
		[default] interface ISVImageObjectList;
	};
};
